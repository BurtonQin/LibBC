; ModuleID = 'libmodbus.so.5.1.0.0.0.preopt.bc'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct._modbus.4 = type { i32, i32, i32, i32, %struct.timeval, %struct.timeval, %struct.timeval, %struct._modbus_backend.3*, i8* }
%struct.timeval = type { i64, i64 }
%struct._modbus_backend.3 = type { i32, i32, i32, i32, {}*, i32 (%struct._modbus.4*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i8*, i32)*, i32 (%struct._modbus.4*)*, void (%struct._modbus.4*)*, i32 (%struct._modbus.4*)*, i32 (%struct._modbus.4*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.4*)* }
%struct._sft = type { i32, i32, i32 }
%struct.fd_set = type { [16 x i64] }
%struct._modbus.13 = type { i32, i32, i32, i32, %struct.timeval, %struct.timeval, %struct.timeval, %struct._modbus_backend.12*, i8* }
%struct._modbus_backend.12 = type { i32, i32, i32, i32, {}*, i32 (%struct._modbus.13*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i8*, i32)*, i32 (%struct._modbus.13*)*, void (%struct._modbus.13*)*, i32 (%struct._modbus.13*)*, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.13*)* }
%struct._modbus = type { i32, i32, i32, i32, %struct.timeval, %struct.timeval, %struct.timeval, %struct._modbus_backend*, i8* }
%struct._modbus_backend = type { i32, i32, i32, i32, i32 (%struct._modbus*, i32)*, i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus*, i8*, i32)*, i32 (%struct._modbus*, i8*)*, i64 (%struct._modbus*, i8*, i32)*, i32 (%struct._modbus*, i8*, i32)*, i32 (%struct._modbus*, i8*, i8*, i32)*, i32 (%struct._modbus*)*, void (%struct._modbus*)*, i32 (%struct._modbus*)*, i32 (%struct._modbus*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus*)* }
%struct.modbus_mapping_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i16*, i16* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._modbus_rtu = type { i8*, i32, i8, i8, i8, %struct.termios, i32, i32, i32, i32, void (%struct._modbus.4*, i32)*, i32 }
%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.serial_rs485 = type { i32, i32, i32, [5 x i32] }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct._modbus_tcp = type { i16, i32, [16 x i8] }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct._modbus_tcp_pi = type { i16, i32, [1025 x i8], [32 x i8] }
%struct.sockaddr_storage = type { i16, [118 x i8], i64 }

@.str = private unnamed_addr constant [17 x i8] c"Illegal function\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Illegal data address\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"Illegal data value\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Slave device or server failure\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Acknowledge\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Slave device or server is busy\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Negative acknowledge\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Memory parity error\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Gateway path unavailable\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"Target device failed to respond\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Invalid CRC\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"Invalid data\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"Invalid exception code\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"Too many data\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"Response not from requested slave\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.15 = private unnamed_addr constant [9 x i8] c"ERROR %s\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c": %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"Bytes flushed (%d)\0A\00", align 1
@.str.50 = private unnamed_addr constant [7 x i8] c"[%.2X]\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"Waiting for an indication...\0A\00", align 1
@.str.20 = private unnamed_addr constant [31 x i8] c"Waiting for a confirmation...\0A\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"<%.2X>\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"too many data\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"read_input_bits\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"read_bits\00", align 1
@.str.27 = private unnamed_addr constant [40 x i8] c"Illegal nb of values %d in %s (max %d)\0A\00", align 1
@.str.28 = private unnamed_addr constant [34 x i8] c"Illegal data address 0x%0X in %s\0A\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c"read_input_registers\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c"read_registers\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"Illegal data address 0x%0X in write_bit\0A\00", align 1
@.str.32 = private unnamed_addr constant [62 x i8] c"Illegal data value 0x%0X in write_bit request at address %0X\0A\00", align 1
@.str.33 = private unnamed_addr constant [46 x i8] c"Illegal data address 0x%0X in write_register\0A\00", align 1
@.str.34 = private unnamed_addr constant [52 x i8] c"Illegal number of values %d in write_bits (max %d)\0A\00", align 1
@.str.35 = private unnamed_addr constant [42 x i8] c"Illegal data address 0x%0X in write_bits\0A\00", align 1
@.str.36 = private unnamed_addr constant [57 x i8] c"Illegal number of values %d in write_registers (max %d)\0A\00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Illegal data address 0x%0X in write_registers\0A\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"LMB3.1.4\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"FIXME Not implemented\0A\00", align 1
@.str.40 = private unnamed_addr constant [76 x i8] c"Illegal nb of values (W%d, R%d) in write_and_read_registers (max W%d, R%d)\0A\00", align 1
@.str.41 = private unnamed_addr constant [81 x i8] c"Illegal data read address 0x%0X or write address 0x%0X write_and_read_registers\0A\00", align 1
@.str.42 = private unnamed_addr constant [37 x i8] c"Unknown Modbus function code: 0x%0X\0A\00", align 1
@.str.43 = private unnamed_addr constant [41 x i8] c"ERROR Too many bits requested (%d > %d)\0A\00", align 1
@.str.51 = private unnamed_addr constant [67 x i8] c"Received function not corresponding to the request (0x%X != 0x%X)\0A\00", align 1
@.str.52 = private unnamed_addr constant [54 x i8] c"Quantity not corresponding to the request (%d != %d)\0A\00", align 1
@.str.53 = private unnamed_addr constant [68 x i8] c"Message length not corresponding to the computed length (%d != %d)\0A\00", align 1
@.str.44 = private unnamed_addr constant [52 x i8] c"ERROR Too many discrete inputs requested (%d > %d)\0A\00", align 1
@.str.45 = private unnamed_addr constant [46 x i8] c"ERROR Too many registers requested (%d > %d)\0A\00", align 1
@.str.46 = private unnamed_addr constant [52 x i8] c"ERROR Too many input registers requested (%d > %d)\0A\00", align 1
@.str.47 = private unnamed_addr constant [39 x i8] c"ERROR Writing too many bits (%d > %d)\0A\00", align 1
@.str.48 = private unnamed_addr constant [55 x i8] c"ERROR Trying to write to too many registers (%d > %d)\0A\00", align 1
@.str.49 = private unnamed_addr constant [45 x i8] c"ERROR Too many registers to write (%d > %d)\0A\00", align 1
@libmodbus_version_major = constant i32 3, align 4, !dbg !0
@libmodbus_version_minor = constant i32 1, align 4, !dbg !69
@libmodbus_version_micro = constant i32 4, align 4, !dbg !73
@.str.54 = private unnamed_addr constant [12 x i8] c"nb_bits < 8\00", align 1
@.str.1.55 = private unnamed_addr constant [24 x i8] c"../../src/modbus-data.c\00", align 1
@__PRETTY_FUNCTION__.modbus_get_byte_from_bits = private unnamed_addr constant [70 x i8] c"uint8_t modbus_get_byte_from_bits(const uint8_t *, int, unsigned int)\00", align 1
@.str.56 = private unnamed_addr constant [28 x i8] c"The device string is empty\0A\00", align 1
@.str.1.57 = private unnamed_addr constant [38 x i8] c"The baud rate value must not be zero\0A\00", align 1
@_modbus_rtu_backend = constant { i32, i32, i32, i32, i32 (%struct._modbus.4*, i32)*, i32 (%struct._modbus.4*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i8*, i32)*, i32 (%struct._modbus.4*)*, void (%struct._modbus.4*)*, i32 (%struct._modbus.4*)*, i32 (%struct._modbus.4*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.4*)* } { i32 0, i32 1, i32 2, i32 256, i32 (%struct._modbus.4*, i32)* @_modbus_set_slave, i32 (%struct._modbus.4*, i32, i32, i32, i8*)* @_modbus_rtu_build_request_basis, i32 (%struct._sft*, i8*)* @_modbus_rtu_build_response_basis, i32 (i8*, i32*)* @_modbus_rtu_prepare_response_tid, i32 (i8*, i32)* @_modbus_rtu_send_msg_pre, i64 (%struct._modbus.4*, i8*, i32)* @_modbus_rtu_send, i32 (%struct._modbus.4*, i8*)* @_modbus_rtu_receive, i64 (%struct._modbus.4*, i8*, i32)* @_modbus_rtu_recv, i32 (%struct._modbus.4*, i8*, i32)* @_modbus_rtu_check_integrity, i32 (%struct._modbus.4*, i8*, i8*, i32)* @_modbus_rtu_pre_check_confirmation, i32 (%struct._modbus.4*)* @_modbus_rtu_connect, void (%struct._modbus.4*)* @_modbus_rtu_close, i32 (%struct._modbus.4*)* @_modbus_rtu_flush, i32 (%struct._modbus.4*, %struct.fd_set*, %struct.timeval*, i32)* @_modbus_rtu_select, void (%struct._modbus.4*)* @_modbus_rtu_free }, align 8, !dbg !75
@.str.12.58 = private unnamed_addr constant [33 x i8] c"A non blocked signal was caught\0A\00", align 1
@.str.9.59 = private unnamed_addr constant [37 x i8] c"Opening %s at %d bauds (%c, %d, %d)\0A\00", align 1
@.str.10.60 = private unnamed_addr constant [37 x i8] c"ERROR Can't open the device %s (%s)\0A\00", align 1
@.str.11.61 = private unnamed_addr constant [50 x i8] c"WARNING Unknown baud rate %d for %s (B9600 used)\0A\00", align 1
@.str.8.62 = private unnamed_addr constant [54 x i8] c"The responding slave %d isn't the requested slave %d\0A\00", align 1
@.str.6.63 = private unnamed_addr constant [39 x i8] c"Request for slave %d ignored (not %d)\0A\00", align 1
@.str.7.64 = private unnamed_addr constant [50 x i8] c"ERROR CRC received 0x%0X != CRC calculated 0x%0X\0A\00", align 1
@table_crc_hi = internal constant [256 x i8] calign 16, !dbg !228
@table_crc_lo = internal constant [256 x i8] c"\00\C0\C1\01\C3\03\02\C2\C6\06\07\C7\05\C5\C4\04\CC\0C\0D\CD\0F\CF\CE\0E\0A\CA\CB\0B\C9\09\08\C8\D8\18\19\D9\1B\DB\DA\1A\1E\DE\DF\1F\DD\1D\1C\DC\14\D4\D5\15\D7\17\16\D6\D2\12\13\D3\11\D1\D0\10\F001\F13\F3\F226\F6\F77\F554\F4<\FC\FD=\FF?>\FE\FA:;\FB9\F9\F88(\E8\E9)\EB+*\EA\EE./\EF-\ED\EC,\E4$%\E5'\E7\E6&\22\E2\E3#\E1! \E0\A0`a\A1c\A3\A2bf\A6\A7g\A5ed\A4l\AC\ADm\AFon\AE\AAjk\ABi\A9\A8hx\B8\B9y\BB{z\BA\BE~\7F\BF}\BD\BC|\B4tu\B5w\B7\B6vr\B2\B3s\B1qp\B0P\90\91Q\93SR\92\96VW\97U\95\94T\9C\5C]\9D_\9F\9E^Z\9A\9B[\99YX\98\88HI\89K\8B\8AJN\8E\8FO\8DML\8CD\84\85E\87GF\86\82BC\83A\81\80@", align 16, !dbg !233
@.str.5.65 = private unnamed_addr constant [24 x i8] c"Confirmation to ignore\0A\00", align 1
@.str.4.66 = private unnamed_addr constant [34 x i8] c"Sending request using RTS signal\0A\00", align 1
@.str.2.67 = private unnamed_addr constant [17 x i8] c"ctx->slave != -1\00", align 1
@.str.3.68 = private unnamed_addr constant [23 x i8] c"../../src/modbus-rtu.c\00", align 1
@__PRETTY_FUNCTION__._modbus_rtu_build_request_basis = private unnamed_addr constant [74 x i8] c"int _modbus_rtu_build_request_basis(modbus_t *, int, int, int, uint8_t *)\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"502\00", align 1
@.str.1.70 = private unnamed_addr constant [35 x i8] c"Error returned by getaddrinfo: %s\0A\00", align 1
@.str.2.71 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3.72 = private unnamed_addr constant [11 x i8] c"setsockopt\00", align 1
@.str.4.73 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@.str.5.74 = private unnamed_addr constant [7 x i8] c"listen\00", align 1
@.str.6.75 = private unnamed_addr constant [43 x i8] c"The client connection from %s is accepted\0A\00", align 1
@.str.7.76 = private unnamed_addr constant [36 x i8] c"The client connection is accepted.\0A\00", align 1
@_modbus_tcp_backend = constant { i32, i32, i32, i32, i32 (%struct._modbus.13*, i32)*, i32 (%struct._modbus.13*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i8*, i32)*, i32 (%struct._modbus.13*)*, void (%struct._modbus.13*)*, i32 (%struct._modbus.13*)*, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.13*)* } { i32 1, i32 7, i32 0, i32 260, i32 (%struct._modbus.13*, i32)* @_modbus_set_slave.79, i32 (%struct._modbus.13*, i32, i32, i32, i8*)* @_modbus_tcp_build_request_basis, i32 (%struct._sft*, i8*)* @_modbus_tcp_build_response_basis, i32 (i8*, i32*)* @_modbus_tcp_prepare_response_tid, i32 (i8*, i32)* @_modbus_tcp_send_msg_pre, i64 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_send, i32 (%struct._modbus.13*, i8*)* @_modbus_tcp_receive, i64 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_recv, i32 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_check_integrity, i32 (%struct._modbus.13*, i8*, i8*, i32)* @_modbus_tcp_pre_check_confirmation, i32 (%struct._modbus.13*)* @_modbus_tcp_connect, void (%struct._modbus.13*)* @_modbus_tcp_close, i32 (%struct._modbus.13*)* @_modbus_tcp_flush, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)* @_modbus_tcp_select, void (%struct._modbus.13*)* @_modbus_tcp_free }, align 8, !dbg !235
@.str.8.77 = private unnamed_addr constant [24 x i8] c"The IP string is empty\0A\00", align 1
@.str.9.78 = private unnamed_addr constant [34 x i8] c"The IP string has been truncated\0A\00", align 1
@.str.17.80 = private unnamed_addr constant [33 x i8] c"A non blocked signal was caught\0A\00", align 1
@.str.16.81 = private unnamed_addr constant [21 x i8] c"Connecting to %s:%d\0A\00", align 1
@.str.14.82 = private unnamed_addr constant [49 x i8] c"Invalid transaction ID received 0x%X (not 0x%X)\0A\00", align 1
@.str.15.83 = private unnamed_addr constant [45 x i8] c"Invalid protocol ID received 0x%X (not 0x0)\0A\00", align 1
@_modbus_tcp_pi_backend = constant { i32, i32, i32, i32, i32 (%struct._modbus.13*, i32)*, i32 (%struct._modbus.13*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i8*, i32)*, i32 (%struct._modbus.13*)*, void (%struct._modbus.13*)*, i32 (%struct._modbus.13*)*, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.13*)* } { i32 1, i32 7, i32 0, i32 260, i32 (%struct._modbus.13*, i32)* @_modbus_set_slave.79, i32 (%struct._modbus.13*, i32, i32, i32, i8*)* @_modbus_tcp_build_request_basis, i32 (%struct._sft*, i8*)* @_modbus_tcp_build_response_basis, i32 (i8*, i32*)* @_modbus_tcp_prepare_response_tid, i32 (i8*, i32)* @_modbus_tcp_send_msg_pre, i64 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_send, i32 (%struct._modbus.13*, i8*)* @_modbus_tcp_receive, i64 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_recv, i32 (%struct._modbus.13*, i8*, i32)* @_modbus_tcp_check_integrity, i32 (%struct._modbus.13*, i8*, i8*, i32)* @_modbus_tcp_pre_check_confirmation, i32 (%struct._modbus.13*)* @_modbus_tcp_pi_connect, void (%struct._modbus.13*)* @_modbus_tcp_close, i32 (%struct._modbus.13*)* @_modbus_tcp_flush, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)* @_modbus_tcp_select, void (%struct._modbus.13*)* @_modbus_tcp_free }, align 8, !dbg !436
@.str.10.84 = private unnamed_addr constant [26 x i8] c"The node string is empty\0A\00", align 1
@.str.11.85 = private unnamed_addr constant [36 x i8] c"The node string has been truncated\0A\00", align 1
@.str.12.86 = private unnamed_addr constant [29 x i8] c"The service string is empty\0A\00", align 1
@.str.13.87 = private unnamed_addr constant [39 x i8] c"The service string has been truncated\0A\00", align 1
@.str.18.88 = private unnamed_addr constant [23 x i8] c"Connecting to [%s]:%s\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i8* @modbus_strerror(i32 %errnum) #0 !dbg !447 {
entry:
  %retval = alloca i8*, align 8
  %errnum.addr = alloca i32, align 4
  store i32 %errnum, i32* %errnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %errnum.addr, metadata !450, metadata !451), !dbg !452
  %0 = load i32, i32* %errnum.addr, align 4, !dbg !453
  switch i32 %0, label %sw.default [
    i32 112345679, label %sw.bb
    i32 112345680, label %sw.bb1
    i32 112345681, label %sw.bb2
    i32 112345682, label %sw.bb3
    i32 112345683, label %sw.bb4
    i32 112345684, label %sw.bb5
    i32 112345685, label %sw.bb6
    i32 112345686, label %sw.bb7
    i32 112345688, label %sw.bb8
    i32 112345689, label %sw.bb9
    i32 112345690, label %sw.bb10
    i32 112345691, label %sw.bb11
    i32 112345692, label %sw.bb12
    i32 112345694, label %sw.bb13
    i32 112345695, label %sw.bb14
  ], !dbg !454

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i8** %retval, align 8, !dbg !455
  br label %return, !dbg !455

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i8** %retval, align 8, !dbg !457
  br label %return, !dbg !457

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i32 0, i32 0), i8** %retval, align 8, !dbg !458
  br label %return, !dbg !458

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 8, !dbg !459
  br label %return, !dbg !459

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 8, !dbg !460
  br label %return, !dbg !460

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 8, !dbg !461
  br label %return, !dbg !461

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 8, !dbg !462
  br label %return, !dbg !462

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 8, !dbg !463
  br label %return, !dbg !463

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 8, !dbg !464
  br label %return, !dbg !464

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 8, !dbg !465
  br label %return, !dbg !465

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 8, !dbg !466
  br label %return, !dbg !466

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 8, !dbg !467
  br label %return, !dbg !467

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0), i8** %retval, align 8, !dbg !468
  br label %return, !dbg !468

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i8** %retval, align 8, !dbg !469
  br label %return, !dbg !469

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i32 0, i32 0), i8** %retval, align 8, !dbg !470
  br label %return, !dbg !470

sw.default:                                       ; preds = %entry
  %1 = load i32, i32* %errnum.addr, align 4, !dbg !471
  %call = call i8* @strerror(i32 %1) #6, !dbg !472
  store i8* %call, i8** %retval, align 8, !dbg !473
  br label %return, !dbg !473

return:                                           ; preds = %sw.default, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %2 = load i8*, i8** %retval, align 8, !dbg !474
  ret i8* %2, !dbg !474
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @strerror(i32) #2

; Function Attrs: noinline nounwind uwtable
define void @_error_print(%struct._modbus* %ctx, i8* %context) #0 !dbg !475 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !565, metadata !451), !dbg !566
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !567, metadata !451), !dbg !568
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !569
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 2, !dbg !571
  %1 = load i32, i32* %debug, align 8, !dbg !571
  %tobool = icmp ne i32 %1, 0, !dbg !569
  br i1 %tobool, label %if.then, label %if.end6, !dbg !572

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !573
  %call = call i32* @__errno_location() #9, !dbg !575
  %3 = load i32, i32* %call, align 4, !dbg !575
  %call1 = call i8* @modbus_strerror(i32 %3), !dbg !576
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8* %call1), !dbg !577
  %4 = load i8*, i8** %context.addr, align 8, !dbg !578
  %cmp = icmp ne i8* %4, null, !dbg !580
  br i1 %cmp, label %if.then3, label %if.else, !dbg !581

if.then3:                                         ; preds = %if.then
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !582
  %6 = load i8*, i8** %context.addr, align 8, !dbg !584
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* %6), !dbg !585
  br label %if.end, !dbg !586

if.else:                                          ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !587
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0)), !dbg !589
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end6, !dbg !590

if.end6:                                          ; preds = %if.end, %entry
  ret void, !dbg !591
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_flush(%struct._modbus* %ctx) #0 !dbg !592 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %rc = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !593, metadata !451), !dbg !594
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !595, metadata !451), !dbg !596
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !597
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !599
  br i1 %cmp, label %if.then, label %if.end, !dbg !600

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !601
  store i32 22, i32* %call, align 4, !dbg !603
  store i32 -1, i32* %retval, align 4, !dbg !604
  br label %return, !dbg !604

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !605
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !606
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !606
  %flush = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 16, !dbg !607
  %3 = load i32 (%struct._modbus*)*, i32 (%struct._modbus*)** %flush, align 8, !dbg !607
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !608
  %call1 = call i32 %3(%struct._modbus* %4), !dbg !605
  store i32 %call1, i32* %rc, align 4, !dbg !609
  %5 = load i32, i32* %rc, align 4, !dbg !610
  %cmp2 = icmp ne i32 %5, -1, !dbg !612
  br i1 %cmp2, label %land.lhs.true, label %if.end5, !dbg !613

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !614
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %6, i32 0, i32 2, !dbg !615
  %7 = load i32, i32* %debug, align 8, !dbg !615
  %tobool = icmp ne i32 %7, 0, !dbg !614
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !616

if.then3:                                         ; preds = %land.lhs.true
  %8 = load i32, i32* %rc, align 4, !dbg !617
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i32 0, i32 0), i32 %8), !dbg !619
  br label %if.end5, !dbg !620

if.end5:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %9 = load i32, i32* %rc, align 4, !dbg !621
  store i32 %9, i32* %retval, align 4, !dbg !622
  br label %return, !dbg !622

return:                                           ; preds = %if.end5, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !623
  ret i32 %10, !dbg !623
}

declare i32 @printf(i8*, ...) #4

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_send_raw_request(%struct._modbus* %ctx, i8* %raw_req, i32 %raw_req_length) #0 !dbg !624 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %raw_req.addr = alloca i8*, align 8
  %raw_req_length.addr = alloca i32, align 4
  %sft = alloca %struct._sft, align 4
  %req = alloca [260 x i8], align 16
  %req_length = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !627, metadata !451), !dbg !628
  store i8* %raw_req, i8** %raw_req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %raw_req.addr, metadata !629, metadata !451), !dbg !630
  store i32 %raw_req_length, i32* %raw_req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %raw_req_length.addr, metadata !631, metadata !451), !dbg !632
  call void @llvm.dbg.declare(metadata %struct._sft* %sft, metadata !633, metadata !451), !dbg !634
  call void @llvm.dbg.declare(metadata [260 x i8]* %req, metadata !635, metadata !451), !dbg !639
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !640, metadata !451), !dbg !641
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !642
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !644
  br i1 %cmp, label %if.then, label %if.end, !dbg !645

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !646
  store i32 22, i32* %call, align 4, !dbg !648
  store i32 -1, i32* %retval, align 4, !dbg !649
  br label %return, !dbg !649

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %raw_req_length.addr, align 4, !dbg !650
  %cmp1 = icmp slt i32 %1, 2, !dbg !652
  br i1 %cmp1, label %if.then3, label %lor.lhs.false, !dbg !653

lor.lhs.false:                                    ; preds = %if.end
  %2 = load i32, i32* %raw_req_length.addr, align 4, !dbg !654
  %cmp2 = icmp sgt i32 %2, 254, !dbg !655
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !656

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %call4 = call i32* @__errno_location() #9, !dbg !657
  store i32 22, i32* %call4, align 4, !dbg !659
  store i32 -1, i32* %retval, align 4, !dbg !660
  br label %return, !dbg !660

if.end5:                                          ; preds = %lor.lhs.false
  %3 = load i8*, i8** %raw_req.addr, align 8, !dbg !661
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0, !dbg !661
  %4 = load i8, i8* %arrayidx, align 1, !dbg !661
  %conv = zext i8 %4 to i32, !dbg !661
  %slave = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 0, !dbg !662
  store i32 %conv, i32* %slave, align 4, !dbg !663
  %5 = load i8*, i8** %raw_req.addr, align 8, !dbg !664
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !664
  %6 = load i8, i8* %arrayidx6, align 1, !dbg !664
  %conv7 = zext i8 %6 to i32, !dbg !664
  %function = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 1, !dbg !665
  store i32 %conv7, i32* %function, align 4, !dbg !666
  %t_id = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 2, !dbg !667
  store i32 0, i32* %t_id, align 4, !dbg !668
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !669
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %7, i32 0, i32 7, !dbg !670
  %8 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !670
  %build_response_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %8, i32 0, i32 6, !dbg !671
  %9 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis, align 8, !dbg !671
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !672
  %call8 = call i32 %9(%struct._sft* %sft, i8* %arraydecay), !dbg !669
  store i32 %call8, i32* %req_length, align 4, !dbg !673
  %10 = load i32, i32* %raw_req_length.addr, align 4, !dbg !674
  %cmp9 = icmp sgt i32 %10, 2, !dbg !676
  br i1 %cmp9, label %if.then11, label %if.end16, !dbg !677

if.then11:                                        ; preds = %if.end5
  %arraydecay12 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !678
  %11 = load i32, i32* %req_length, align 4, !dbg !680
  %idx.ext = sext i32 %11 to i64, !dbg !681
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay12, i64 %idx.ext, !dbg !681
  %12 = load i8*, i8** %raw_req.addr, align 8, !dbg !682
  %add.ptr13 = getelementptr inbounds i8, i8* %12, i64 2, !dbg !683
  %13 = load i32, i32* %raw_req_length.addr, align 4, !dbg !684
  %sub = sub nsw i32 %13, 2, !dbg !685
  %conv14 = sext i32 %sub to i64, !dbg !684
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr13, i64 %conv14, i32 1, i1 false), !dbg !686
  %14 = load i32, i32* %raw_req_length.addr, align 4, !dbg !687
  %sub15 = sub nsw i32 %14, 2, !dbg !688
  %15 = load i32, i32* %req_length, align 4, !dbg !689
  %add = add nsw i32 %15, %sub15, !dbg !689
  store i32 %add, i32* %req_length, align 4, !dbg !689
  br label %if.end16, !dbg !690

if.end16:                                         ; preds = %if.then11, %if.end5
  %16 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !691
  %arraydecay17 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !692
  %17 = load i32, i32* %req_length, align 4, !dbg !693
  %call18 = call i32 @send_msg(%struct._modbus* %16, i8* %arraydecay17, i32 %17), !dbg !694
  store i32 %call18, i32* %retval, align 4, !dbg !695
  br label %return, !dbg !695

return:                                           ; preds = %if.end16, %if.then3, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !696
  ret i32 %18, !dbg !696
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: noinline nounwind uwtable
define internal i32 @send_msg(%struct._modbus* %ctx, i8* %msg, i32 %msg_length) #0 !dbg !697 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %msg.addr = alloca i8*, align 8
  %msg_length.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %i = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !698, metadata !451), !dbg !699
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !700, metadata !451), !dbg !701
  store i32 %msg_length, i32* %msg_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_length.addr, metadata !702, metadata !451), !dbg !703
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !704, metadata !451), !dbg !705
  call void @llvm.dbg.declare(metadata i32* %i, metadata !706, metadata !451), !dbg !707
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !708
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 7, !dbg !709
  %1 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !709
  %send_msg_pre = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %1, i32 0, i32 8, !dbg !710
  %2 = load i32 (i8*, i32)*, i32 (i8*, i32)** %send_msg_pre, align 8, !dbg !710
  %3 = load i8*, i8** %msg.addr, align 8, !dbg !711
  %4 = load i32, i32* %msg_length.addr, align 4, !dbg !712
  %call = call i32 %2(i8* %3, i32 %4), !dbg !708
  store i32 %call, i32* %msg_length.addr, align 4, !dbg !713
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !714
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 2, !dbg !716
  %6 = load i32, i32* %debug, align 8, !dbg !716
  %tobool = icmp ne i32 %6, 0, !dbg !714
  br i1 %tobool, label %if.then, label %if.end, !dbg !717

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !718
  br label %for.cond, !dbg !721

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4, !dbg !722
  %8 = load i32, i32* %msg_length.addr, align 4, !dbg !724
  %cmp = icmp slt i32 %7, %8, !dbg !725
  br i1 %cmp, label %for.body, label %for.end, !dbg !726

for.body:                                         ; preds = %for.cond
  %9 = load i8*, i8** %msg.addr, align 8, !dbg !727
  %10 = load i32, i32* %i, align 4, !dbg !728
  %idxprom = sext i32 %10 to i64, !dbg !727
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom, !dbg !727
  %11 = load i8, i8* %arrayidx, align 1, !dbg !727
  %conv = zext i8 %11 to i32, !dbg !727
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50, i32 0, i32 0), i32 %conv), !dbg !729
  br label %for.inc, !dbg !729

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !730
  %inc = add nsw i32 %12, 1, !dbg !730
  store i32 %inc, i32* %i, align 4, !dbg !730
  br label %for.cond, !dbg !731, !llvm.loop !732

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0)), !dbg !734
  br label %if.end, !dbg !735

if.end:                                           ; preds = %for.end, %entry
  br label %do.body, !dbg !736, !llvm.loop !737

do.body:                                          ; preds = %land.end, %if.end
  %13 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !739
  %backend3 = getelementptr inbounds %struct._modbus, %struct._modbus* %13, i32 0, i32 7, !dbg !741
  %14 = load %struct._modbus_backend*, %struct._modbus_backend** %backend3, align 8, !dbg !741
  %send = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %14, i32 0, i32 9, !dbg !742
  %15 = load i64 (%struct._modbus*, i8*, i32)*, i64 (%struct._modbus*, i8*, i32)** %send, align 8, !dbg !742
  %16 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !743
  %17 = load i8*, i8** %msg.addr, align 8, !dbg !744
  %18 = load i32, i32* %msg_length.addr, align 4, !dbg !745
  %call4 = call i64 %15(%struct._modbus* %16, i8* %17, i32 %18), !dbg !739
  %conv5 = trunc i64 %call4 to i32, !dbg !739
  store i32 %conv5, i32* %rc, align 4, !dbg !746
  %19 = load i32, i32* %rc, align 4, !dbg !747
  %cmp6 = icmp eq i32 %19, -1, !dbg !749
  br i1 %cmp6, label %if.then8, label %if.end28, !dbg !750

if.then8:                                         ; preds = %do.body
  %20 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !751
  call void @_error_print(%struct._modbus* %20, i8* null), !dbg !753
  %21 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !754
  %error_recovery = getelementptr inbounds %struct._modbus, %struct._modbus* %21, i32 0, i32 3, !dbg !756
  %22 = load i32, i32* %error_recovery, align 4, !dbg !756
  %and = and i32 %22, 2, !dbg !757
  %tobool9 = icmp ne i32 %and, 0, !dbg !757
  br i1 %tobool9, label %if.then10, label %if.end27, !dbg !758

if.then10:                                        ; preds = %if.then8
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !759, metadata !451), !dbg !761
  %call11 = call i32* @__errno_location() #9, !dbg !762
  %23 = load i32, i32* %call11, align 4, !dbg !762
  store i32 %23, i32* %saved_errno, align 4, !dbg !761
  %call12 = call i32* @__errno_location() #9, !dbg !763
  %24 = load i32, i32* %call12, align 4, !dbg !763
  %cmp13 = icmp eq i32 %24, 9, !dbg !765
  br i1 %cmp13, label %if.then22, label %lor.lhs.false, !dbg !766

lor.lhs.false:                                    ; preds = %if.then10
  %call15 = call i32* @__errno_location() #9, !dbg !767
  %25 = load i32, i32* %call15, align 4, !dbg !767
  %cmp16 = icmp eq i32 %25, 104, !dbg !768
  br i1 %cmp16, label %if.then22, label %lor.lhs.false18, !dbg !769

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %call19 = call i32* @__errno_location() #9, !dbg !770
  %26 = load i32, i32* %call19, align 4, !dbg !770
  %cmp20 = icmp eq i32 %26, 32, !dbg !771
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !772

if.then22:                                        ; preds = %lor.lhs.false18, %lor.lhs.false, %if.then10
  %27 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !773
  call void @modbus_close(%struct._modbus* %27), !dbg !775
  %28 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !776
  call void @_sleep_response_timeout(%struct._modbus* %28), !dbg !777
  %29 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !778
  %call23 = call i32 @modbus_connect(%struct._modbus* %29), !dbg !779
  br label %if.end25, !dbg !780

if.else:                                          ; preds = %lor.lhs.false18
  %30 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !781
  call void @_sleep_response_timeout(%struct._modbus* %30), !dbg !783
  %31 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !784
  %call24 = call i32 @modbus_flush(%struct._modbus* %31), !dbg !785
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then22
  %32 = load i32, i32* %saved_errno, align 4, !dbg !786
  %call26 = call i32* @__errno_location() #9, !dbg !787
  store i32 %32, i32* %call26, align 4, !dbg !788
  br label %if.end27, !dbg !789

if.end27:                                         ; preds = %if.end25, %if.then8
  br label %if.end28, !dbg !790

if.end28:                                         ; preds = %if.end27, %do.body
  br label %do.cond, !dbg !791

do.cond:                                          ; preds = %if.end28
  %33 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !792
  %error_recovery29 = getelementptr inbounds %struct._modbus, %struct._modbus* %33, i32 0, i32 3, !dbg !793
  %34 = load i32, i32* %error_recovery29, align 4, !dbg !793
  %and30 = and i32 %34, 2, !dbg !794
  %tobool31 = icmp ne i32 %and30, 0, !dbg !794
  br i1 %tobool31, label %land.rhs, label %land.end, !dbg !795

land.rhs:                                         ; preds = %do.cond
  %35 = load i32, i32* %rc, align 4, !dbg !796
  %cmp32 = icmp eq i32 %35, -1, !dbg !797
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %36 = phi i1 [ false, %do.cond ], [ %cmp32, %land.rhs ]
  br i1 %36, label %do.body, label %do.end, !dbg !791, !llvm.loop !737

do.end:                                           ; preds = %land.end
  %37 = load i32, i32* %rc, align 4, !dbg !798
  %cmp34 = icmp sgt i32 %37, 0, !dbg !800
  br i1 %cmp34, label %land.lhs.true, label %if.end40, !dbg !801

land.lhs.true:                                    ; preds = %do.end
  %38 = load i32, i32* %rc, align 4, !dbg !802
  %39 = load i32, i32* %msg_length.addr, align 4, !dbg !803
  %cmp36 = icmp ne i32 %38, %39, !dbg !804
  br i1 %cmp36, label %if.then38, label %if.end40, !dbg !805

if.then38:                                        ; preds = %land.lhs.true
  %call39 = call i32* @__errno_location() #9, !dbg !806
  store i32 112345691, i32* %call39, align 4, !dbg !808
  store i32 -1, i32* %retval, align 4, !dbg !809
  br label %return, !dbg !809

if.end40:                                         ; preds = %land.lhs.true, %do.end
  %40 = load i32, i32* %rc, align 4, !dbg !810
  store i32 %40, i32* %retval, align 4, !dbg !811
  br label %return, !dbg !811

return:                                           ; preds = %if.end40, %if.then38
  %41 = load i32, i32* %retval, align 4, !dbg !812
  ret i32 %41, !dbg !812
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_close(%struct._modbus* %ctx) #0 !dbg !813 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !814, metadata !451), !dbg !815
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !816
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !818
  br i1 %cmp, label %if.then, label %if.end, !dbg !819

if.then:                                          ; preds = %entry
  br label %return, !dbg !820

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !821
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !822
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !822
  %close = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 15, !dbg !823
  %3 = load void (%struct._modbus*)*, void (%struct._modbus*)** %close, align 8, !dbg !823
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !824
  call void %3(%struct._modbus* %4), !dbg !821
  br label %return, !dbg !825

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !825
}

; Function Attrs: noinline nounwind uwtable
define internal void @_sleep_response_timeout(%struct._modbus* %ctx) #0 !dbg !826 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  %request = alloca %struct.timeval, align 8
  %remaining = alloca %struct.timeval, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !827, metadata !451), !dbg !828
  call void @llvm.dbg.declare(metadata %struct.timeval* %request, metadata !829, metadata !451), !dbg !836
  call void @llvm.dbg.declare(metadata %struct.timeval* %remaining, metadata !837, metadata !451), !dbg !838
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !839
  %response_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 4, !dbg !840
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout, i32 0, i32 0, !dbg !841
  %1 = load i64, i64* %tv_sec, align 8, !dbg !841
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %request, i32 0, i32 0, !dbg !842
  store i64 %1, i64* %tv_sec1, align 8, !dbg !843
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !844
  %response_timeout2 = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 4, !dbg !845
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout2, i32 0, i32 1, !dbg !846
  %3 = load i64, i64* %tv_usec, align 8, !dbg !846
  %mul = mul nsw i64 %3, 1000, !dbg !847
  %tv_nsec = getelementptr inbounds %struct.timeval, %struct.timeval* %request, i32 0, i32 1, !dbg !848
  store i64 %mul, i64* %tv_nsec, align 8, !dbg !849
  br label %while.cond, !dbg !850

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @nanosleep(%struct.timeval* %request, %struct.timeval* %remaining), !dbg !851
  %cmp = icmp eq i32 %call, -1, !dbg !852
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !853

land.rhs:                                         ; preds = %while.cond
  %call3 = call i32* @__errno_location() #9, !dbg !854
  %4 = load i32, i32* %call3, align 4, !dbg !854
  %cmp4 = icmp eq i32 %4, 4, !dbg !855
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %5, label %while.body, label %while.end, !dbg !850

while.body:                                       ; preds = %land.end
  %6 = bitcast %struct.timeval* %request to i8*, !dbg !856
  %7 = bitcast %struct.timeval* %remaining to i8*, !dbg !856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 16, i32 8, i1 false), !dbg !856
  br label %while.cond, !dbg !850, !llvm.loop !858

while.end:                                        ; preds = %land.end
  ret void, !dbg !860
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_connect(%struct._modbus* %ctx) #0 !dbg !861 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !862, metadata !451), !dbg !863
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !864
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !866
  br i1 %cmp, label %if.then, label %if.end, !dbg !867

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !868
  store i32 22, i32* %call, align 4, !dbg !870
  store i32 -1, i32* %retval, align 4, !dbg !871
  br label %return, !dbg !871

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !872
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !873
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !873
  %connect = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 14, !dbg !874
  %3 = load i32 (%struct._modbus*)*, i32 (%struct._modbus*)** %connect, align 8, !dbg !874
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !875
  %call1 = call i32 %3(%struct._modbus* %4), !dbg !872
  store i32 %call1, i32* %retval, align 4, !dbg !876
  br label %return, !dbg !876

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !877
  ret i32 %5, !dbg !877
}

declare i32 @nanosleep(%struct.timeval*, %struct.timeval*) #4

; Function Attrs: noinline nounwind uwtable
define i32 @_modbus_receive_msg(%struct._modbus* %ctx, i8* %msg, i32 %msg_type) #0 !dbg !878 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %msg.addr = alloca i8*, align 8
  %msg_type.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %rset = alloca %struct.fd_set, align 8
  %tv = alloca %struct.timeval, align 8
  %p_tv = alloca %struct.timeval*, align 8
  %length_to_read = alloca i32, align 4
  %msg_length = alloca i32, align 4
  %step = alloca i32, align 4
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  %saved_errno76 = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !882, metadata !451), !dbg !883
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !884, metadata !451), !dbg !885
  store i32 %msg_type, i32* %msg_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_type.addr, metadata !886, metadata !451), !dbg !887
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !888, metadata !451), !dbg !889
  call void @llvm.dbg.declare(metadata %struct.fd_set* %rset, metadata !890, metadata !451), !dbg !891
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !892, metadata !451), !dbg !893
  call void @llvm.dbg.declare(metadata %struct.timeval** %p_tv, metadata !894, metadata !451), !dbg !895
  call void @llvm.dbg.declare(metadata i32* %length_to_read, metadata !896, metadata !451), !dbg !897
  call void @llvm.dbg.declare(metadata i32* %msg_length, metadata !898, metadata !451), !dbg !899
  store i32 0, i32* %msg_length, align 4, !dbg !899
  call void @llvm.dbg.declare(metadata i32* %step, metadata !900, metadata !451), !dbg !902
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !903
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 2, !dbg !905
  %1 = load i32, i32* %debug, align 8, !dbg !905
  %tobool = icmp ne i32 %1, 0, !dbg !903
  br i1 %tobool, label %if.then, label %if.end3, !dbg !906

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %msg_type.addr, align 4, !dbg !907
  %cmp = icmp eq i32 %2, 0, !dbg !910
  br i1 %cmp, label %if.then1, label %if.else, !dbg !911

if.then1:                                         ; preds = %if.then
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i32 0, i32 0)), !dbg !912
  br label %if.end, !dbg !914

if.else:                                          ; preds = %if.then
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i32 0, i32 0)), !dbg !915
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end3, !dbg !917

if.end3:                                          ; preds = %if.end, %entry
  br label %do.body, !dbg !918, !llvm.loop !919

do.body:                                          ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i32* %__d0, metadata !920, metadata !451), !dbg !922
  call void @llvm.dbg.declare(metadata i32* %__d1, metadata !923, metadata !451), !dbg !922
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %rset, i32 0, i32 0, !dbg !922
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i64 0, i64 0, !dbg !922
  %3 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #6, !dbg !922, !srcloc !924
  %asmresult = extractvalue { i64, i64* } %3, 0, !dbg !922
  %asmresult4 = extractvalue { i64, i64* } %3, 1, !dbg !922
  %4 = trunc i64 %asmresult to i32, !dbg !922
  store i32 %4, i32* %__d0, align 4, !dbg !922
  %5 = ptrtoint i64* %asmresult4 to i64, !dbg !922
  %6 = trunc i64 %5 to i32, !dbg !922
  store i32 %6, i32* %__d1, align 4, !dbg !922
  br label %do.end, !dbg !922

do.end:                                           ; preds = %do.body
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !925
  %s = getelementptr inbounds %struct._modbus, %struct._modbus* %7, i32 0, i32 1, !dbg !925
  %8 = load i32, i32* %s, align 4, !dbg !925
  %rem = srem i32 %8, 64, !dbg !925
  %sh_prom = zext i32 %rem to i64, !dbg !925
  %shl = shl i64 1, %sh_prom, !dbg !925
  %fds_bits5 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %rset, i32 0, i32 0, !dbg !925
  %9 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !925
  %s6 = getelementptr inbounds %struct._modbus, %struct._modbus* %9, i32 0, i32 1, !dbg !925
  %10 = load i32, i32* %s6, align 4, !dbg !925
  %div = sdiv i32 %10, 64, !dbg !925
  %idxprom = sext i32 %div to i64, !dbg !925
  %arrayidx7 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits5, i64 0, i64 %idxprom, !dbg !925
  %11 = load i64, i64* %arrayidx7, align 8, !dbg !925
  %or = or i64 %11, %shl, !dbg !925
  store i64 %or, i64* %arrayidx7, align 8, !dbg !925
  store i32 0, i32* %step, align 4, !dbg !926
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !927
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %12, i32 0, i32 7, !dbg !928
  %13 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !928
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %13, i32 0, i32 1, !dbg !929
  %14 = load i32, i32* %header_length, align 4, !dbg !929
  %add = add i32 %14, 1, !dbg !930
  store i32 %add, i32* %length_to_read, align 4, !dbg !931
  %15 = load i32, i32* %msg_type.addr, align 4, !dbg !932
  %cmp8 = icmp eq i32 %15, 0, !dbg !934
  br i1 %cmp8, label %if.then9, label %if.else22, !dbg !935

if.then9:                                         ; preds = %do.end
  %16 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !936
  %indication_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %16, i32 0, i32 6, !dbg !939
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout, i32 0, i32 0, !dbg !940
  %17 = load i64, i64* %tv_sec, align 8, !dbg !940
  %cmp10 = icmp eq i64 %17, 0, !dbg !941
  br i1 %cmp10, label %land.lhs.true, label %if.else14, !dbg !942

land.lhs.true:                                    ; preds = %if.then9
  %18 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !943
  %indication_timeout11 = getelementptr inbounds %struct._modbus, %struct._modbus* %18, i32 0, i32 6, !dbg !944
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout11, i32 0, i32 1, !dbg !945
  %19 = load i64, i64* %tv_usec, align 8, !dbg !945
  %cmp12 = icmp eq i64 %19, 0, !dbg !946
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !947

if.then13:                                        ; preds = %land.lhs.true
  store %struct.timeval* null, %struct.timeval** %p_tv, align 8, !dbg !948
  br label %if.end21, !dbg !950

if.else14:                                        ; preds = %land.lhs.true, %if.then9
  %20 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !951
  %indication_timeout15 = getelementptr inbounds %struct._modbus, %struct._modbus* %20, i32 0, i32 6, !dbg !953
  %tv_sec16 = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout15, i32 0, i32 0, !dbg !954
  %21 = load i64, i64* %tv_sec16, align 8, !dbg !954
  %tv_sec17 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !955
  store i64 %21, i64* %tv_sec17, align 8, !dbg !956
  %22 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !957
  %indication_timeout18 = getelementptr inbounds %struct._modbus, %struct._modbus* %22, i32 0, i32 6, !dbg !958
  %tv_usec19 = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout18, i32 0, i32 1, !dbg !959
  %23 = load i64, i64* %tv_usec19, align 8, !dbg !959
  %tv_usec20 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !960
  store i64 %23, i64* %tv_usec20, align 8, !dbg !961
  store %struct.timeval* %tv, %struct.timeval** %p_tv, align 8, !dbg !962
  br label %if.end21

if.end21:                                         ; preds = %if.else14, %if.then13
  br label %if.end28, !dbg !963

if.else22:                                        ; preds = %do.end
  %24 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !964
  %response_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %24, i32 0, i32 4, !dbg !966
  %tv_sec23 = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout, i32 0, i32 0, !dbg !967
  %25 = load i64, i64* %tv_sec23, align 8, !dbg !967
  %tv_sec24 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !968
  store i64 %25, i64* %tv_sec24, align 8, !dbg !969
  %26 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !970
  %response_timeout25 = getelementptr inbounds %struct._modbus, %struct._modbus* %26, i32 0, i32 4, !dbg !971
  %tv_usec26 = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout25, i32 0, i32 1, !dbg !972
  %27 = load i64, i64* %tv_usec26, align 8, !dbg !972
  %tv_usec27 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !973
  store i64 %27, i64* %tv_usec27, align 8, !dbg !974
  store %struct.timeval* %tv, %struct.timeval** %p_tv, align 8, !dbg !975
  br label %if.end28

if.end28:                                         ; preds = %if.else22, %if.end21
  br label %while.cond, !dbg !976

while.cond:                                       ; preds = %if.end136, %if.end28
  %28 = load i32, i32* %length_to_read, align 4, !dbg !977
  %cmp29 = icmp ne i32 %28, 0, !dbg !978
  br i1 %cmp29, label %while.body, label %while.end, !dbg !976

while.body:                                       ; preds = %while.cond
  %29 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !979
  %backend30 = getelementptr inbounds %struct._modbus, %struct._modbus* %29, i32 0, i32 7, !dbg !981
  %30 = load %struct._modbus_backend*, %struct._modbus_backend** %backend30, align 8, !dbg !981
  %select = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %30, i32 0, i32 17, !dbg !982
  %31 = load i32 (%struct._modbus*, %struct.fd_set*, %struct.timeval*, i32)*, i32 (%struct._modbus*, %struct.fd_set*, %struct.timeval*, i32)** %select, align 8, !dbg !982
  %32 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !983
  %33 = load %struct.timeval*, %struct.timeval** %p_tv, align 8, !dbg !984
  %34 = load i32, i32* %length_to_read, align 4, !dbg !985
  %call31 = call i32 %31(%struct._modbus* %32, %struct.fd_set* %rset, %struct.timeval* %33, i32 %34), !dbg !979
  store i32 %call31, i32* %rc, align 4, !dbg !986
  %35 = load i32, i32* %rc, align 4, !dbg !987
  %cmp32 = icmp eq i32 %35, -1, !dbg !989
  br i1 %cmp32, label %if.then33, label %if.end50, !dbg !990

if.then33:                                        ; preds = %while.body
  %36 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !991
  call void @_error_print(%struct._modbus* %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0)), !dbg !993
  %37 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !994
  %error_recovery = getelementptr inbounds %struct._modbus, %struct._modbus* %37, i32 0, i32 3, !dbg !996
  %38 = load i32, i32* %error_recovery, align 4, !dbg !996
  %and = and i32 %38, 2, !dbg !997
  %tobool34 = icmp ne i32 %and, 0, !dbg !997
  br i1 %tobool34, label %if.then35, label %if.end49, !dbg !998

if.then35:                                        ; preds = %if.then33
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !999, metadata !451), !dbg !1001
  %call36 = call i32* @__errno_location() #9, !dbg !1002
  %39 = load i32, i32* %call36, align 4, !dbg !1002
  store i32 %39, i32* %saved_errno, align 4, !dbg !1001
  %call37 = call i32* @__errno_location() #9, !dbg !1003
  %40 = load i32, i32* %call37, align 4, !dbg !1003
  %cmp38 = icmp eq i32 %40, 110, !dbg !1005
  br i1 %cmp38, label %if.then39, label %if.else41, !dbg !1006

if.then39:                                        ; preds = %if.then35
  %41 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1007
  call void @_sleep_response_timeout(%struct._modbus* %41), !dbg !1009
  %42 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1010
  %call40 = call i32 @modbus_flush(%struct._modbus* %42), !dbg !1011
  br label %if.end47, !dbg !1012

if.else41:                                        ; preds = %if.then35
  %call42 = call i32* @__errno_location() #9, !dbg !1013
  %43 = load i32, i32* %call42, align 4, !dbg !1013
  %cmp43 = icmp eq i32 %43, 9, !dbg !1015
  br i1 %cmp43, label %if.then44, label %if.end46, !dbg !1016

if.then44:                                        ; preds = %if.else41
  %44 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1017
  call void @modbus_close(%struct._modbus* %44), !dbg !1019
  %45 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1020
  %call45 = call i32 @modbus_connect(%struct._modbus* %45), !dbg !1021
  br label %if.end46, !dbg !1022

if.end46:                                         ; preds = %if.then44, %if.else41
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then39
  %46 = load i32, i32* %saved_errno, align 4, !dbg !1023
  %call48 = call i32* @__errno_location() #9, !dbg !1024
  store i32 %46, i32* %call48, align 4, !dbg !1025
  br label %if.end49, !dbg !1026

if.end49:                                         ; preds = %if.end47, %if.then33
  store i32 -1, i32* %retval, align 4, !dbg !1027
  br label %return, !dbg !1027

if.end50:                                         ; preds = %while.body
  %47 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1028
  %backend51 = getelementptr inbounds %struct._modbus, %struct._modbus* %47, i32 0, i32 7, !dbg !1029
  %48 = load %struct._modbus_backend*, %struct._modbus_backend** %backend51, align 8, !dbg !1029
  %recv = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %48, i32 0, i32 11, !dbg !1030
  %49 = load i64 (%struct._modbus*, i8*, i32)*, i64 (%struct._modbus*, i8*, i32)** %recv, align 8, !dbg !1030
  %50 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1031
  %51 = load i8*, i8** %msg.addr, align 8, !dbg !1032
  %52 = load i32, i32* %msg_length, align 4, !dbg !1033
  %idx.ext = sext i32 %52 to i64, !dbg !1034
  %add.ptr = getelementptr inbounds i8, i8* %51, i64 %idx.ext, !dbg !1034
  %53 = load i32, i32* %length_to_read, align 4, !dbg !1035
  %call52 = call i64 %49(%struct._modbus* %50, i8* %add.ptr, i32 %53), !dbg !1028
  %conv = trunc i64 %call52 to i32, !dbg !1028
  store i32 %conv, i32* %rc, align 4, !dbg !1036
  %54 = load i32, i32* %rc, align 4, !dbg !1037
  %cmp53 = icmp eq i32 %54, 0, !dbg !1039
  br i1 %cmp53, label %if.then55, label %if.end57, !dbg !1040

if.then55:                                        ; preds = %if.end50
  %call56 = call i32* @__errno_location() #9, !dbg !1041
  store i32 104, i32* %call56, align 4, !dbg !1043
  store i32 -1, i32* %rc, align 4, !dbg !1044
  br label %if.end57, !dbg !1045

if.end57:                                         ; preds = %if.then55, %if.end50
  %55 = load i32, i32* %rc, align 4, !dbg !1046
  %cmp58 = icmp eq i32 %55, -1, !dbg !1048
  br i1 %cmp58, label %if.then60, label %if.end81, !dbg !1049

if.then60:                                        ; preds = %if.end57
  %56 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1050
  call void @_error_print(%struct._modbus* %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0)), !dbg !1052
  %57 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1053
  %error_recovery61 = getelementptr inbounds %struct._modbus, %struct._modbus* %57, i32 0, i32 3, !dbg !1055
  %58 = load i32, i32* %error_recovery61, align 4, !dbg !1055
  %and62 = and i32 %58, 2, !dbg !1056
  %tobool63 = icmp ne i32 %and62, 0, !dbg !1056
  br i1 %tobool63, label %land.lhs.true64, label %if.end80, !dbg !1057

land.lhs.true64:                                  ; preds = %if.then60
  %call65 = call i32* @__errno_location() #9, !dbg !1058
  %59 = load i32, i32* %call65, align 4, !dbg !1058
  %cmp66 = icmp eq i32 %59, 104, !dbg !1059
  br i1 %cmp66, label %if.then75, label %lor.lhs.false, !dbg !1060

lor.lhs.false:                                    ; preds = %land.lhs.true64
  %call68 = call i32* @__errno_location() #9, !dbg !1061
  %60 = load i32, i32* %call68, align 4, !dbg !1061
  %cmp69 = icmp eq i32 %60, 111, !dbg !1062
  br i1 %cmp69, label %if.then75, label %lor.lhs.false71, !dbg !1063

lor.lhs.false71:                                  ; preds = %lor.lhs.false
  %call72 = call i32* @__errno_location() #9, !dbg !1064
  %61 = load i32, i32* %call72, align 4, !dbg !1064
  %cmp73 = icmp eq i32 %61, 9, !dbg !1065
  br i1 %cmp73, label %if.then75, label %if.end80, !dbg !1066

if.then75:                                        ; preds = %lor.lhs.false71, %lor.lhs.false, %land.lhs.true64
  call void @llvm.dbg.declare(metadata i32* %saved_errno76, metadata !1067, metadata !451), !dbg !1069
  %call77 = call i32* @__errno_location() #9, !dbg !1070
  %62 = load i32, i32* %call77, align 4, !dbg !1070
  store i32 %62, i32* %saved_errno76, align 4, !dbg !1069
  %63 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1071
  call void @modbus_close(%struct._modbus* %63), !dbg !1072
  %64 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1073
  %call78 = call i32 @modbus_connect(%struct._modbus* %64), !dbg !1074
  %65 = load i32, i32* %saved_errno76, align 4, !dbg !1075
  %call79 = call i32* @__errno_location() #9, !dbg !1076
  store i32 %65, i32* %call79, align 4, !dbg !1077
  br label %if.end80, !dbg !1078

if.end80:                                         ; preds = %if.then75, %lor.lhs.false71, %if.then60
  store i32 -1, i32* %retval, align 4, !dbg !1079
  br label %return, !dbg !1079

if.end81:                                         ; preds = %if.end57
  %66 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1080
  %debug82 = getelementptr inbounds %struct._modbus, %struct._modbus* %66, i32 0, i32 2, !dbg !1082
  %67 = load i32, i32* %debug82, align 8, !dbg !1082
  %tobool83 = icmp ne i32 %67, 0, !dbg !1080
  br i1 %tobool83, label %if.then84, label %if.end92, !dbg !1083

if.then84:                                        ; preds = %if.end81
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1084, metadata !451), !dbg !1086
  store i32 0, i32* %i, align 4, !dbg !1087
  br label %for.cond, !dbg !1089

for.cond:                                         ; preds = %for.inc, %if.then84
  %68 = load i32, i32* %i, align 4, !dbg !1090
  %69 = load i32, i32* %rc, align 4, !dbg !1092
  %cmp85 = icmp slt i32 %68, %69, !dbg !1093
  br i1 %cmp85, label %for.body, label %for.end, !dbg !1094

for.body:                                         ; preds = %for.cond
  %70 = load i8*, i8** %msg.addr, align 8, !dbg !1095
  %71 = load i32, i32* %msg_length, align 4, !dbg !1096
  %72 = load i32, i32* %i, align 4, !dbg !1097
  %add87 = add nsw i32 %71, %72, !dbg !1098
  %idxprom88 = sext i32 %add87 to i64, !dbg !1095
  %arrayidx89 = getelementptr inbounds i8, i8* %70, i64 %idxprom88, !dbg !1095
  %73 = load i8, i8* %arrayidx89, align 1, !dbg !1095
  %conv90 = zext i8 %73 to i32, !dbg !1095
  %call91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i32 %conv90), !dbg !1099
  br label %for.inc, !dbg !1099

for.inc:                                          ; preds = %for.body
  %74 = load i32, i32* %i, align 4, !dbg !1100
  %inc = add nsw i32 %74, 1, !dbg !1100
  store i32 %inc, i32* %i, align 4, !dbg !1100
  br label %for.cond, !dbg !1101, !llvm.loop !1102

for.end:                                          ; preds = %for.cond
  br label %if.end92, !dbg !1104

if.end92:                                         ; preds = %for.end, %if.end81
  %75 = load i32, i32* %rc, align 4, !dbg !1105
  %76 = load i32, i32* %msg_length, align 4, !dbg !1106
  %add93 = add nsw i32 %76, %75, !dbg !1106
  store i32 %add93, i32* %msg_length, align 4, !dbg !1106
  %77 = load i32, i32* %rc, align 4, !dbg !1107
  %78 = load i32, i32* %length_to_read, align 4, !dbg !1108
  %sub = sub nsw i32 %78, %77, !dbg !1108
  store i32 %sub, i32* %length_to_read, align 4, !dbg !1108
  %79 = load i32, i32* %length_to_read, align 4, !dbg !1109
  %cmp94 = icmp eq i32 %79, 0, !dbg !1111
  br i1 %cmp94, label %if.then96, label %if.end117, !dbg !1112

if.then96:                                        ; preds = %if.end92
  %80 = load i32, i32* %step, align 4, !dbg !1113
  switch i32 %80, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb108
  ], !dbg !1115

sw.bb:                                            ; preds = %if.then96
  %81 = load i8*, i8** %msg.addr, align 8, !dbg !1116
  %82 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1118
  %backend97 = getelementptr inbounds %struct._modbus, %struct._modbus* %82, i32 0, i32 7, !dbg !1119
  %83 = load %struct._modbus_backend*, %struct._modbus_backend** %backend97, align 8, !dbg !1119
  %header_length98 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %83, i32 0, i32 1, !dbg !1120
  %84 = load i32, i32* %header_length98, align 4, !dbg !1120
  %idxprom99 = zext i32 %84 to i64, !dbg !1116
  %arrayidx100 = getelementptr inbounds i8, i8* %81, i64 %idxprom99, !dbg !1116
  %85 = load i8, i8* %arrayidx100, align 1, !dbg !1116
  %conv101 = zext i8 %85 to i32, !dbg !1116
  %86 = load i32, i32* %msg_type.addr, align 4, !dbg !1121
  %call102 = call zeroext i8 @compute_meta_length_after_function(i32 %conv101, i32 %86), !dbg !1122
  %conv103 = zext i8 %call102 to i32, !dbg !1122
  store i32 %conv103, i32* %length_to_read, align 4, !dbg !1123
  %87 = load i32, i32* %length_to_read, align 4, !dbg !1124
  %cmp104 = icmp ne i32 %87, 0, !dbg !1126
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !1127

if.then106:                                       ; preds = %sw.bb
  store i32 1, i32* %step, align 4, !dbg !1128
  br label %sw.epilog, !dbg !1130

if.end107:                                        ; preds = %sw.bb
  br label %sw.bb108, !dbg !1131

sw.bb108:                                         ; preds = %if.end107, %if.then96
  %88 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1132
  %89 = load i8*, i8** %msg.addr, align 8, !dbg !1133
  %90 = load i32, i32* %msg_type.addr, align 4, !dbg !1134
  %call109 = call i32 @compute_data_length_after_meta(%struct._modbus* %88, i8* %89, i32 %90), !dbg !1135
  store i32 %call109, i32* %length_to_read, align 4, !dbg !1136
  %91 = load i32, i32* %msg_length, align 4, !dbg !1137
  %92 = load i32, i32* %length_to_read, align 4, !dbg !1139
  %add110 = add nsw i32 %91, %92, !dbg !1140
  %93 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1141
  %backend111 = getelementptr inbounds %struct._modbus, %struct._modbus* %93, i32 0, i32 7, !dbg !1142
  %94 = load %struct._modbus_backend*, %struct._modbus_backend** %backend111, align 8, !dbg !1142
  %max_adu_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %94, i32 0, i32 3, !dbg !1143
  %95 = load i32, i32* %max_adu_length, align 4, !dbg !1143
  %cmp112 = icmp sgt i32 %add110, %95, !dbg !1144
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !1145

if.then114:                                       ; preds = %sw.bb108
  %call115 = call i32* @__errno_location() #9, !dbg !1146
  store i32 112345691, i32* %call115, align 4, !dbg !1148
  %96 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1149
  call void @_error_print(%struct._modbus* %96, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0)), !dbg !1150
  store i32 -1, i32* %retval, align 4, !dbg !1151
  br label %return, !dbg !1151

if.end116:                                        ; preds = %sw.bb108
  store i32 2, i32* %step, align 4, !dbg !1152
  br label %sw.epilog, !dbg !1153

sw.default:                                       ; preds = %if.then96
  br label %sw.epilog, !dbg !1154

sw.epilog:                                        ; preds = %sw.default, %if.end116, %if.then106
  br label %if.end117, !dbg !1155

if.end117:                                        ; preds = %sw.epilog, %if.end92
  %97 = load i32, i32* %length_to_read, align 4, !dbg !1156
  %cmp118 = icmp sgt i32 %97, 0, !dbg !1158
  br i1 %cmp118, label %land.lhs.true120, label %if.end136, !dbg !1159

land.lhs.true120:                                 ; preds = %if.end117
  %98 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1160
  %byte_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %98, i32 0, i32 5, !dbg !1161
  %tv_sec121 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout, i32 0, i32 0, !dbg !1162
  %99 = load i64, i64* %tv_sec121, align 8, !dbg !1162
  %cmp122 = icmp sgt i64 %99, 0, !dbg !1163
  br i1 %cmp122, label %if.then129, label %lor.lhs.false124, !dbg !1164

lor.lhs.false124:                                 ; preds = %land.lhs.true120
  %100 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1165
  %byte_timeout125 = getelementptr inbounds %struct._modbus, %struct._modbus* %100, i32 0, i32 5, !dbg !1166
  %tv_usec126 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout125, i32 0, i32 1, !dbg !1167
  %101 = load i64, i64* %tv_usec126, align 8, !dbg !1167
  %cmp127 = icmp sgt i64 %101, 0, !dbg !1168
  br i1 %cmp127, label %if.then129, label %if.end136, !dbg !1169

if.then129:                                       ; preds = %lor.lhs.false124, %land.lhs.true120
  %102 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1170
  %byte_timeout130 = getelementptr inbounds %struct._modbus, %struct._modbus* %102, i32 0, i32 5, !dbg !1172
  %tv_sec131 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout130, i32 0, i32 0, !dbg !1173
  %103 = load i64, i64* %tv_sec131, align 8, !dbg !1173
  %tv_sec132 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0, !dbg !1174
  store i64 %103, i64* %tv_sec132, align 8, !dbg !1175
  %104 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1176
  %byte_timeout133 = getelementptr inbounds %struct._modbus, %struct._modbus* %104, i32 0, i32 5, !dbg !1177
  %tv_usec134 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout133, i32 0, i32 1, !dbg !1178
  %105 = load i64, i64* %tv_usec134, align 8, !dbg !1178
  %tv_usec135 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1, !dbg !1179
  store i64 %105, i64* %tv_usec135, align 8, !dbg !1180
  store %struct.timeval* %tv, %struct.timeval** %p_tv, align 8, !dbg !1181
  br label %if.end136, !dbg !1182

if.end136:                                        ; preds = %if.then129, %lor.lhs.false124, %if.end117
  br label %while.cond, !dbg !976, !llvm.loop !1183

while.end:                                        ; preds = %while.cond
  %106 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1185
  %debug137 = getelementptr inbounds %struct._modbus, %struct._modbus* %106, i32 0, i32 2, !dbg !1187
  %107 = load i32, i32* %debug137, align 8, !dbg !1187
  %tobool138 = icmp ne i32 %107, 0, !dbg !1185
  br i1 %tobool138, label %if.then139, label %if.end141, !dbg !1188

if.then139:                                       ; preds = %while.end
  %call140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0)), !dbg !1189
  br label %if.end141, !dbg !1189

if.end141:                                        ; preds = %if.then139, %while.end
  %108 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1190
  %backend142 = getelementptr inbounds %struct._modbus, %struct._modbus* %108, i32 0, i32 7, !dbg !1191
  %109 = load %struct._modbus_backend*, %struct._modbus_backend** %backend142, align 8, !dbg !1191
  %check_integrity = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %109, i32 0, i32 12, !dbg !1192
  %110 = load i32 (%struct._modbus*, i8*, i32)*, i32 (%struct._modbus*, i8*, i32)** %check_integrity, align 8, !dbg !1192
  %111 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1193
  %112 = load i8*, i8** %msg.addr, align 8, !dbg !1194
  %113 = load i32, i32* %msg_length, align 4, !dbg !1195
  %call143 = call i32 %110(%struct._modbus* %111, i8* %112, i32 %113), !dbg !1190
  store i32 %call143, i32* %retval, align 4, !dbg !1196
  br label %return, !dbg !1196

return:                                           ; preds = %if.end141, %if.then114, %if.end80, %if.end49
  %114 = load i32, i32* %retval, align 4, !dbg !1197
  ret i32 %114, !dbg !1197
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compute_meta_length_after_function(i32 %function, i32 %msg_type) #0 !dbg !1198 {
entry:
  %function.addr = alloca i32, align 4
  %msg_type.addr = alloca i32, align 4
  %length = alloca i32, align 4
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !1201, metadata !451), !dbg !1202
  store i32 %msg_type, i32* %msg_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_type.addr, metadata !1203, metadata !451), !dbg !1204
  call void @llvm.dbg.declare(metadata i32* %length, metadata !1205, metadata !451), !dbg !1206
  %0 = load i32, i32* %msg_type.addr, align 4, !dbg !1207
  %cmp = icmp eq i32 %0, 0, !dbg !1209
  br i1 %cmp, label %if.then, label %if.else16, !dbg !1210

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %function.addr, align 4, !dbg !1211
  %cmp1 = icmp sle i32 %1, 6, !dbg !1214
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !1215

if.then2:                                         ; preds = %if.then
  store i32 4, i32* %length, align 4, !dbg !1216
  br label %if.end15, !dbg !1218

if.else:                                          ; preds = %if.then
  %2 = load i32, i32* %function.addr, align 4, !dbg !1219
  %cmp3 = icmp eq i32 %2, 15, !dbg !1221
  br i1 %cmp3, label %if.then5, label %lor.lhs.false, !dbg !1222

lor.lhs.false:                                    ; preds = %if.else
  %3 = load i32, i32* %function.addr, align 4, !dbg !1223
  %cmp4 = icmp eq i32 %3, 16, !dbg !1224
  br i1 %cmp4, label %if.then5, label %if.else6, !dbg !1225

if.then5:                                         ; preds = %lor.lhs.false, %if.else
  store i32 5, i32* %length, align 4, !dbg !1226
  br label %if.end14, !dbg !1228

if.else6:                                         ; preds = %lor.lhs.false
  %4 = load i32, i32* %function.addr, align 4, !dbg !1229
  %cmp7 = icmp eq i32 %4, 22, !dbg !1231
  br i1 %cmp7, label %if.then8, label %if.else9, !dbg !1232

if.then8:                                         ; preds = %if.else6
  store i32 6, i32* %length, align 4, !dbg !1233
  br label %if.end13, !dbg !1235

if.else9:                                         ; preds = %if.else6
  %5 = load i32, i32* %function.addr, align 4, !dbg !1236
  %cmp10 = icmp eq i32 %5, 23, !dbg !1238
  br i1 %cmp10, label %if.then11, label %if.else12, !dbg !1239

if.then11:                                        ; preds = %if.else9
  store i32 9, i32* %length, align 4, !dbg !1240
  br label %if.end, !dbg !1242

if.else12:                                        ; preds = %if.else9
  store i32 0, i32* %length, align 4, !dbg !1243
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then8
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then5
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then2
  br label %if.end18, !dbg !1245

if.else16:                                        ; preds = %entry
  %6 = load i32, i32* %function.addr, align 4, !dbg !1246
  switch i32 %6, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 22, label %sw.bb17
  ], !dbg !1248

sw.bb:                                            ; preds = %if.else16, %if.else16, %if.else16, %if.else16
  store i32 4, i32* %length, align 4, !dbg !1249
  br label %sw.epilog, !dbg !1251

sw.bb17:                                          ; preds = %if.else16
  store i32 6, i32* %length, align 4, !dbg !1252
  br label %sw.epilog, !dbg !1253

sw.default:                                       ; preds = %if.else16
  store i32 1, i32* %length, align 4, !dbg !1254
  br label %sw.epilog, !dbg !1255

sw.epilog:                                        ; preds = %sw.default, %sw.bb17, %sw.bb
  br label %if.end18

if.end18:                                         ; preds = %sw.epilog, %if.end15
  %7 = load i32, i32* %length, align 4, !dbg !1256
  %conv = trunc i32 %7 to i8, !dbg !1256
  ret i8 %conv, !dbg !1257
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_data_length_after_meta(%struct._modbus* %ctx, i8* %msg, i32 %msg_type) #0 !dbg !1258 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  %msg.addr = alloca i8*, align 8
  %msg_type.addr = alloca i32, align 4
  %function = alloca i32, align 4
  %length = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !1259, metadata !451), !dbg !1260
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !1261, metadata !451), !dbg !1262
  store i32 %msg_type, i32* %msg_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_type.addr, metadata !1263, metadata !451), !dbg !1264
  call void @llvm.dbg.declare(metadata i32* %function, metadata !1265, metadata !451), !dbg !1266
  %0 = load i8*, i8** %msg.addr, align 8, !dbg !1267
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1268
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !1269
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !1269
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 1, !dbg !1270
  %3 = load i32, i32* %header_length, align 4, !dbg !1270
  %idxprom = zext i32 %3 to i64, !dbg !1267
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %idxprom, !dbg !1267
  %4 = load i8, i8* %arrayidx, align 1, !dbg !1267
  %conv = zext i8 %4 to i32, !dbg !1267
  store i32 %conv, i32* %function, align 4, !dbg !1266
  call void @llvm.dbg.declare(metadata i32* %length, metadata !1271, metadata !451), !dbg !1272
  %5 = load i32, i32* %msg_type.addr, align 4, !dbg !1273
  %cmp = icmp eq i32 %5, 0, !dbg !1275
  br i1 %cmp, label %if.then, label %if.else, !dbg !1276

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %function, align 4, !dbg !1277
  switch i32 %6, label %sw.default [
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 23, label %sw.bb7
  ], !dbg !1279

sw.bb:                                            ; preds = %if.then, %if.then
  %7 = load i8*, i8** %msg.addr, align 8, !dbg !1280
  %8 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1282
  %backend2 = getelementptr inbounds %struct._modbus, %struct._modbus* %8, i32 0, i32 7, !dbg !1283
  %9 = load %struct._modbus_backend*, %struct._modbus_backend** %backend2, align 8, !dbg !1283
  %header_length3 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %9, i32 0, i32 1, !dbg !1284
  %10 = load i32, i32* %header_length3, align 4, !dbg !1284
  %add = add i32 %10, 5, !dbg !1285
  %idxprom4 = zext i32 %add to i64, !dbg !1280
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 %idxprom4, !dbg !1280
  %11 = load i8, i8* %arrayidx5, align 1, !dbg !1280
  %conv6 = zext i8 %11 to i32, !dbg !1280
  store i32 %conv6, i32* %length, align 4, !dbg !1286
  br label %sw.epilog, !dbg !1287

sw.bb7:                                           ; preds = %if.then
  %12 = load i8*, i8** %msg.addr, align 8, !dbg !1288
  %13 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1289
  %backend8 = getelementptr inbounds %struct._modbus, %struct._modbus* %13, i32 0, i32 7, !dbg !1290
  %14 = load %struct._modbus_backend*, %struct._modbus_backend** %backend8, align 8, !dbg !1290
  %header_length9 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %14, i32 0, i32 1, !dbg !1291
  %15 = load i32, i32* %header_length9, align 4, !dbg !1291
  %add10 = add i32 %15, 9, !dbg !1292
  %idxprom11 = zext i32 %add10 to i64, !dbg !1288
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i64 %idxprom11, !dbg !1288
  %16 = load i8, i8* %arrayidx12, align 1, !dbg !1288
  %conv13 = zext i8 %16 to i32, !dbg !1288
  store i32 %conv13, i32* %length, align 4, !dbg !1293
  br label %sw.epilog, !dbg !1294

sw.default:                                       ; preds = %if.then
  store i32 0, i32* %length, align 4, !dbg !1295
  br label %sw.epilog, !dbg !1296

sw.epilog:                                        ; preds = %sw.default, %sw.bb7, %sw.bb
  br label %if.end29, !dbg !1297

if.else:                                          ; preds = %entry
  %17 = load i32, i32* %function, align 4, !dbg !1298
  %cmp14 = icmp sle i32 %17, 4, !dbg !1301
  br i1 %cmp14, label %if.then21, label %lor.lhs.false, !dbg !1302

lor.lhs.false:                                    ; preds = %if.else
  %18 = load i32, i32* %function, align 4, !dbg !1303
  %cmp16 = icmp eq i32 %18, 17, !dbg !1304
  br i1 %cmp16, label %if.then21, label %lor.lhs.false18, !dbg !1305

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %19 = load i32, i32* %function, align 4, !dbg !1306
  %cmp19 = icmp eq i32 %19, 23, !dbg !1307
  br i1 %cmp19, label %if.then21, label %if.else28, !dbg !1308

if.then21:                                        ; preds = %lor.lhs.false18, %lor.lhs.false, %if.else
  %20 = load i8*, i8** %msg.addr, align 8, !dbg !1309
  %21 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1311
  %backend22 = getelementptr inbounds %struct._modbus, %struct._modbus* %21, i32 0, i32 7, !dbg !1312
  %22 = load %struct._modbus_backend*, %struct._modbus_backend** %backend22, align 8, !dbg !1312
  %header_length23 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %22, i32 0, i32 1, !dbg !1313
  %23 = load i32, i32* %header_length23, align 4, !dbg !1313
  %add24 = add i32 %23, 1, !dbg !1314
  %idxprom25 = zext i32 %add24 to i64, !dbg !1309
  %arrayidx26 = getelementptr inbounds i8, i8* %20, i64 %idxprom25, !dbg !1309
  %24 = load i8, i8* %arrayidx26, align 1, !dbg !1309
  %conv27 = zext i8 %24 to i32, !dbg !1309
  store i32 %conv27, i32* %length, align 4, !dbg !1315
  br label %if.end, !dbg !1316

if.else28:                                        ; preds = %lor.lhs.false18
  store i32 0, i32* %length, align 4, !dbg !1317
  br label %if.end

if.end:                                           ; preds = %if.else28, %if.then21
  br label %if.end29

if.end29:                                         ; preds = %if.end, %sw.epilog
  %25 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1319
  %backend30 = getelementptr inbounds %struct._modbus, %struct._modbus* %25, i32 0, i32 7, !dbg !1320
  %26 = load %struct._modbus_backend*, %struct._modbus_backend** %backend30, align 8, !dbg !1320
  %checksum_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %26, i32 0, i32 2, !dbg !1321
  %27 = load i32, i32* %checksum_length, align 8, !dbg !1321
  %28 = load i32, i32* %length, align 4, !dbg !1322
  %add31 = add i32 %28, %27, !dbg !1322
  store i32 %add31, i32* %length, align 4, !dbg !1322
  %29 = load i32, i32* %length, align 4, !dbg !1323
  ret i32 %29, !dbg !1324
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_receive(%struct._modbus* %ctx, i8* %req) #0 !dbg !1325 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %req.addr = alloca i8*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !1326, metadata !451), !dbg !1327
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !1328, metadata !451), !dbg !1329
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1330
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !1332
  br i1 %cmp, label %if.then, label %if.end, !dbg !1333

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !1334
  store i32 22, i32* %call, align 4, !dbg !1336
  store i32 -1, i32* %retval, align 4, !dbg !1337
  br label %return, !dbg !1337

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1338
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !1339
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !1339
  %receive = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 10, !dbg !1340
  %3 = load i32 (%struct._modbus*, i8*)*, i32 (%struct._modbus*, i8*)** %receive, align 8, !dbg !1340
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1341
  %5 = load i8*, i8** %req.addr, align 8, !dbg !1342
  %call1 = call i32 %3(%struct._modbus* %4, i8* %5), !dbg !1338
  store i32 %call1, i32* %retval, align 4, !dbg !1343
  br label %return, !dbg !1343

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !1344
  ret i32 %6, !dbg !1344
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_receive_confirmation(%struct._modbus* %ctx, i8* %rsp) #0 !dbg !1345 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %rsp.addr = alloca i8*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !1346, metadata !451), !dbg !1347
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !1348, metadata !451), !dbg !1349
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1350
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !1352
  br i1 %cmp, label %if.then, label %if.end, !dbg !1353

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !1354
  store i32 22, i32* %call, align 4, !dbg !1356
  store i32 -1, i32* %retval, align 4, !dbg !1357
  br label %return, !dbg !1357

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1358
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !1359
  %call1 = call i32 @_modbus_receive_msg(%struct._modbus* %1, i8* %2, i32 1), !dbg !1360
  store i32 %call1, i32* %retval, align 4, !dbg !1361
  br label %return, !dbg !1361

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !1362
  ret i32 %3, !dbg !1362
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_reply(%struct._modbus* %ctx, i8* %req, i32 %req_length, %struct.modbus_mapping_t* %mb_mapping) #0 !dbg !1363 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32, align 4
  %mb_mapping.addr = alloca %struct.modbus_mapping_t*, align 8
  %offset = alloca i32, align 4
  %slave = alloca i32, align 4
  %function = alloca i32, align 4
  %address = alloca i16, align 2
  %rsp = alloca [260 x i8], align 16
  %rsp_length = alloca i32, align 4
  %sft = alloca %struct._sft, align 4
  %is_input = alloca i32, align 4
  %start_bits = alloca i32, align 4
  %nb_bits = alloca i32, align 4
  %tab_bits = alloca i8*, align 8
  %name = alloca i8*, align 8
  %nb = alloca i32, align 4
  %mapping_address = alloca i32, align 4
  %is_input85 = alloca i32, align 4
  %start_registers = alloca i32, align 4
  %nb_registers = alloca i32, align 4
  %tab_registers = alloca i16*, align 8
  %name106 = alloca i8*, align 8
  %nb109 = alloca i32, align 4
  %mapping_address120 = alloca i32, align 4
  %i = alloca i32, align 4
  %mapping_address181 = alloca i32, align 4
  %data = alloca i32, align 4
  %mapping_address227 = alloca i32, align 4
  %data242 = alloca i32, align 4
  %nb261 = alloca i32, align 4
  %mapping_address272 = alloca i32, align 4
  %nb320 = alloca i32, align 4
  %mapping_address331 = alloca i32, align 4
  %i364 = alloca i32, align 4
  %j = alloca i32, align 4
  %str_len = alloca i32, align 4
  %byte_count_pos = alloca i32, align 4
  %mapping_address430 = alloca i32, align 4
  %data445 = alloca i16, align 2
  %and449 = alloca i16, align 2
  %or = alloca i16, align 2
  %nb487 = alloca i32, align 4
  %address_write = alloca i16, align 2
  %nb_write = alloca i32, align 4
  %nb_write_bytes = alloca i32, align 4
  %mapping_address523 = alloca i32, align 4
  %mapping_address_write = alloca i32, align 4
  %i585 = alloca i32, align 4
  %j586 = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !1366, metadata !451), !dbg !1367
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !1368, metadata !451), !dbg !1369
  store i32 %req_length, i32* %req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_length.addr, metadata !1370, metadata !451), !dbg !1371
  store %struct.modbus_mapping_t* %mb_mapping, %struct.modbus_mapping_t** %mb_mapping.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.modbus_mapping_t** %mb_mapping.addr, metadata !1372, metadata !451), !dbg !1373
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !1374, metadata !451), !dbg !1375
  call void @llvm.dbg.declare(metadata i32* %slave, metadata !1376, metadata !451), !dbg !1377
  call void @llvm.dbg.declare(metadata i32* %function, metadata !1378, metadata !451), !dbg !1379
  call void @llvm.dbg.declare(metadata i16* %address, metadata !1380, metadata !451), !dbg !1381
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !1382, metadata !451), !dbg !1383
  call void @llvm.dbg.declare(metadata i32* %rsp_length, metadata !1384, metadata !451), !dbg !1385
  store i32 0, i32* %rsp_length, align 4, !dbg !1385
  call void @llvm.dbg.declare(metadata %struct._sft* %sft, metadata !1386, metadata !451), !dbg !1387
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1388
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !1390
  br i1 %cmp, label %if.then, label %if.end, !dbg !1391

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !1392
  store i32 22, i32* %call, align 4, !dbg !1394
  store i32 -1, i32* %retval, align 4, !dbg !1395
  br label %return, !dbg !1395

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1396
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !1397
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !1397
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 1, !dbg !1398
  %3 = load i32, i32* %header_length, align 4, !dbg !1398
  store i32 %3, i32* %offset, align 4, !dbg !1399
  %4 = load i8*, i8** %req.addr, align 8, !dbg !1400
  %5 = load i32, i32* %offset, align 4, !dbg !1401
  %sub = sub nsw i32 %5, 1, !dbg !1402
  %idxprom = sext i32 %sub to i64, !dbg !1400
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !1400
  %6 = load i8, i8* %arrayidx, align 1, !dbg !1400
  %conv = zext i8 %6 to i32, !dbg !1400
  store i32 %conv, i32* %slave, align 4, !dbg !1403
  %7 = load i8*, i8** %req.addr, align 8, !dbg !1404
  %8 = load i32, i32* %offset, align 4, !dbg !1405
  %idxprom1 = sext i32 %8 to i64, !dbg !1404
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 %idxprom1, !dbg !1404
  %9 = load i8, i8* %arrayidx2, align 1, !dbg !1404
  %conv3 = zext i8 %9 to i32, !dbg !1404
  store i32 %conv3, i32* %function, align 4, !dbg !1406
  %10 = load i8*, i8** %req.addr, align 8, !dbg !1407
  %11 = load i32, i32* %offset, align 4, !dbg !1408
  %add = add nsw i32 %11, 1, !dbg !1409
  %idxprom4 = sext i32 %add to i64, !dbg !1407
  %arrayidx5 = getelementptr inbounds i8, i8* %10, i64 %idxprom4, !dbg !1407
  %12 = load i8, i8* %arrayidx5, align 1, !dbg !1407
  %conv6 = zext i8 %12 to i32, !dbg !1407
  %shl = shl i32 %conv6, 8, !dbg !1410
  %13 = load i8*, i8** %req.addr, align 8, !dbg !1411
  %14 = load i32, i32* %offset, align 4, !dbg !1412
  %add7 = add nsw i32 %14, 2, !dbg !1413
  %idxprom8 = sext i32 %add7 to i64, !dbg !1411
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 %idxprom8, !dbg !1411
  %15 = load i8, i8* %arrayidx9, align 1, !dbg !1411
  %conv10 = zext i8 %15 to i32, !dbg !1411
  %add11 = add nsw i32 %shl, %conv10, !dbg !1414
  %conv12 = trunc i32 %add11 to i16, !dbg !1415
  store i16 %conv12, i16* %address, align 2, !dbg !1416
  %16 = load i32, i32* %slave, align 4, !dbg !1417
  %slave13 = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 0, !dbg !1418
  store i32 %16, i32* %slave13, align 4, !dbg !1419
  %17 = load i32, i32* %function, align 4, !dbg !1420
  %function14 = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 1, !dbg !1421
  store i32 %17, i32* %function14, align 4, !dbg !1422
  %18 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1423
  %backend15 = getelementptr inbounds %struct._modbus, %struct._modbus* %18, i32 0, i32 7, !dbg !1424
  %19 = load %struct._modbus_backend*, %struct._modbus_backend** %backend15, align 8, !dbg !1424
  %prepare_response_tid = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %19, i32 0, i32 7, !dbg !1425
  %20 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %prepare_response_tid, align 8, !dbg !1425
  %21 = load i8*, i8** %req.addr, align 8, !dbg !1426
  %call16 = call i32 %20(i8* %21, i32* %req_length.addr), !dbg !1423
  %t_id = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 2, !dbg !1427
  store i32 %call16, i32* %t_id, align 4, !dbg !1428
  %22 = load i32, i32* %function, align 4, !dbg !1429
  switch i32 %22, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb84
    i32 4, label %sw.bb84
    i32 5, label %sw.bb180
    i32 6, label %sw.bb226
    i32 15, label %sw.bb260
    i32 16, label %sw.bb319
    i32 17, label %sw.bb401
    i32 7, label %sw.bb423
    i32 22, label %sw.bb429
    i32 23, label %sw.bb486
  ], !dbg !1430

sw.bb:                                            ; preds = %if.end, %if.end
  call void @llvm.dbg.declare(metadata i32* %is_input, metadata !1431, metadata !451), !dbg !1434
  %23 = load i32, i32* %function, align 4, !dbg !1435
  %cmp17 = icmp eq i32 %23, 2, !dbg !1436
  %conv18 = zext i1 %cmp17 to i32, !dbg !1436
  store i32 %conv18, i32* %is_input, align 4, !dbg !1434
  call void @llvm.dbg.declare(metadata i32* %start_bits, metadata !1437, metadata !451), !dbg !1438
  %24 = load i32, i32* %is_input, align 4, !dbg !1439
  %tobool = icmp ne i32 %24, 0, !dbg !1439
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1439

cond.true:                                        ; preds = %sw.bb
  %25 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1440
  %start_input_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %25, i32 0, i32 3, !dbg !1441
  %26 = load i32, i32* %start_input_bits, align 4, !dbg !1441
  br label %cond.end, !dbg !1439

cond.false:                                       ; preds = %sw.bb
  %27 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1442
  %start_bits19 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %27, i32 0, i32 1, !dbg !1443
  %28 = load i32, i32* %start_bits19, align 4, !dbg !1443
  br label %cond.end, !dbg !1439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %26, %cond.true ], [ %28, %cond.false ], !dbg !1439
  store i32 %cond, i32* %start_bits, align 4, !dbg !1438
  call void @llvm.dbg.declare(metadata i32* %nb_bits, metadata !1444, metadata !451), !dbg !1445
  %29 = load i32, i32* %is_input, align 4, !dbg !1446
  %tobool20 = icmp ne i32 %29, 0, !dbg !1446
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !1446

cond.true21:                                      ; preds = %cond.end
  %30 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1447
  %nb_input_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %30, i32 0, i32 2, !dbg !1448
  %31 = load i32, i32* %nb_input_bits, align 8, !dbg !1448
  br label %cond.end24, !dbg !1446

cond.false22:                                     ; preds = %cond.end
  %32 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1449
  %nb_bits23 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %32, i32 0, i32 0, !dbg !1450
  %33 = load i32, i32* %nb_bits23, align 8, !dbg !1450
  br label %cond.end24, !dbg !1446

cond.end24:                                       ; preds = %cond.false22, %cond.true21
  %cond25 = phi i32 [ %31, %cond.true21 ], [ %33, %cond.false22 ], !dbg !1446
  store i32 %cond25, i32* %nb_bits, align 4, !dbg !1445
  call void @llvm.dbg.declare(metadata i8** %tab_bits, metadata !1451, metadata !451), !dbg !1452
  %34 = load i32, i32* %is_input, align 4, !dbg !1453
  %tobool26 = icmp ne i32 %34, 0, !dbg !1453
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !1453

cond.true27:                                      ; preds = %cond.end24
  %35 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1454
  %tab_input_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %35, i32 0, i32 9, !dbg !1455
  %36 = load i8*, i8** %tab_input_bits, align 8, !dbg !1455
  br label %cond.end30, !dbg !1453

cond.false28:                                     ; preds = %cond.end24
  %37 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1456
  %tab_bits29 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %37, i32 0, i32 8, !dbg !1457
  %38 = load i8*, i8** %tab_bits29, align 8, !dbg !1457
  br label %cond.end30, !dbg !1453

cond.end30:                                       ; preds = %cond.false28, %cond.true27
  %cond31 = phi i8* [ %36, %cond.true27 ], [ %38, %cond.false28 ], !dbg !1453
  store i8* %cond31, i8** %tab_bits, align 8, !dbg !1452
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1458, metadata !451), !dbg !1460
  %39 = load i32, i32* %is_input, align 4, !dbg !1461
  %tobool32 = icmp ne i32 %39, 0, !dbg !1461
  %40 = zext i1 %tobool32 to i64, !dbg !1461
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), !dbg !1461
  store i8* %cond33, i8** %name, align 8, !dbg !1460
  call void @llvm.dbg.declare(metadata i32* %nb, metadata !1462, metadata !451), !dbg !1463
  %41 = load i8*, i8** %req.addr, align 8, !dbg !1464
  %42 = load i32, i32* %offset, align 4, !dbg !1465
  %add34 = add nsw i32 %42, 3, !dbg !1466
  %idxprom35 = sext i32 %add34 to i64, !dbg !1464
  %arrayidx36 = getelementptr inbounds i8, i8* %41, i64 %idxprom35, !dbg !1464
  %43 = load i8, i8* %arrayidx36, align 1, !dbg !1464
  %conv37 = zext i8 %43 to i32, !dbg !1464
  %shl38 = shl i32 %conv37, 8, !dbg !1467
  %44 = load i8*, i8** %req.addr, align 8, !dbg !1468
  %45 = load i32, i32* %offset, align 4, !dbg !1469
  %add39 = add nsw i32 %45, 4, !dbg !1470
  %idxprom40 = sext i32 %add39 to i64, !dbg !1468
  %arrayidx41 = getelementptr inbounds i8, i8* %44, i64 %idxprom40, !dbg !1468
  %46 = load i8, i8* %arrayidx41, align 1, !dbg !1468
  %conv42 = zext i8 %46 to i32, !dbg !1468
  %add43 = add nsw i32 %shl38, %conv42, !dbg !1471
  store i32 %add43, i32* %nb, align 4, !dbg !1463
  call void @llvm.dbg.declare(metadata i32* %mapping_address, metadata !1472, metadata !451), !dbg !1473
  %47 = load i16, i16* %address, align 2, !dbg !1474
  %conv44 = zext i16 %47 to i32, !dbg !1474
  %48 = load i32, i32* %start_bits, align 4, !dbg !1475
  %sub45 = sub nsw i32 %conv44, %48, !dbg !1476
  store i32 %sub45, i32* %mapping_address, align 4, !dbg !1473
  %49 = load i32, i32* %nb, align 4, !dbg !1477
  %cmp46 = icmp slt i32 %49, 1, !dbg !1479
  br i1 %cmp46, label %if.then50, label %lor.lhs.false, !dbg !1480

lor.lhs.false:                                    ; preds = %cond.end30
  %50 = load i32, i32* %nb, align 4, !dbg !1481
  %cmp48 = icmp slt i32 2000, %50, !dbg !1482
  br i1 %cmp48, label %if.then50, label %if.else, !dbg !1483

if.then50:                                        ; preds = %lor.lhs.false, %cond.end30
  %51 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1484
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1486
  %52 = load i32, i32* %nb, align 4, !dbg !1487
  %53 = load i8*, i8** %name, align 8, !dbg !1488
  %call51 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %51, %struct._sft* %sft, i32 3, i8* %arraydecay, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.27, i32 0, i32 0), i32 %52, i8* %53, i32 2000), !dbg !1489
  store i32 %call51, i32* %rsp_length, align 4, !dbg !1490
  br label %if.end83, !dbg !1491

if.else:                                          ; preds = %lor.lhs.false
  %54 = load i32, i32* %mapping_address, align 4, !dbg !1492
  %cmp52 = icmp slt i32 %54, 0, !dbg !1494
  br i1 %cmp52, label %if.then58, label %lor.lhs.false54, !dbg !1495

lor.lhs.false54:                                  ; preds = %if.else
  %55 = load i32, i32* %mapping_address, align 4, !dbg !1496
  %56 = load i32, i32* %nb, align 4, !dbg !1497
  %add55 = add nsw i32 %55, %56, !dbg !1498
  %57 = load i32, i32* %nb_bits, align 4, !dbg !1499
  %cmp56 = icmp sgt i32 %add55, %57, !dbg !1500
  br i1 %cmp56, label %if.then58, label %if.else70, !dbg !1501

if.then58:                                        ; preds = %lor.lhs.false54, %if.else
  %58 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1502
  %arraydecay59 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1504
  %59 = load i32, i32* %mapping_address, align 4, !dbg !1505
  %cmp60 = icmp slt i32 %59, 0, !dbg !1506
  br i1 %cmp60, label %cond.true62, label %cond.false64, !dbg !1505

cond.true62:                                      ; preds = %if.then58
  %60 = load i16, i16* %address, align 2, !dbg !1507
  %conv63 = zext i16 %60 to i32, !dbg !1507
  br label %cond.end67, !dbg !1505

cond.false64:                                     ; preds = %if.then58
  %61 = load i16, i16* %address, align 2, !dbg !1508
  %conv65 = zext i16 %61 to i32, !dbg !1508
  %62 = load i32, i32* %nb, align 4, !dbg !1509
  %add66 = add nsw i32 %conv65, %62, !dbg !1510
  br label %cond.end67, !dbg !1505

cond.end67:                                       ; preds = %cond.false64, %cond.true62
  %cond68 = phi i32 [ %conv63, %cond.true62 ], [ %add66, %cond.false64 ], !dbg !1505
  %63 = load i8*, i8** %name, align 8, !dbg !1511
  %call69 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %58, %struct._sft* %sft, i32 2, i8* %arraydecay59, i32 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.28, i32 0, i32 0), i32 %cond68, i8* %63), !dbg !1512
  store i32 %call69, i32* %rsp_length, align 4, !dbg !1513
  br label %if.end82, !dbg !1514

if.else70:                                        ; preds = %lor.lhs.false54
  %64 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1515
  %backend71 = getelementptr inbounds %struct._modbus, %struct._modbus* %64, i32 0, i32 7, !dbg !1517
  %65 = load %struct._modbus_backend*, %struct._modbus_backend** %backend71, align 8, !dbg !1517
  %build_response_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %65, i32 0, i32 6, !dbg !1518
  %66 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis, align 8, !dbg !1518
  %arraydecay72 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1519
  %call73 = call i32 %66(%struct._sft* %sft, i8* %arraydecay72), !dbg !1515
  store i32 %call73, i32* %rsp_length, align 4, !dbg !1520
  %67 = load i32, i32* %nb, align 4, !dbg !1521
  %div = sdiv i32 %67, 8, !dbg !1522
  %68 = load i32, i32* %nb, align 4, !dbg !1523
  %rem = srem i32 %68, 8, !dbg !1524
  %tobool74 = icmp ne i32 %rem, 0, !dbg !1525
  %69 = zext i1 %tobool74 to i64, !dbg !1525
  %cond75 = select i1 %tobool74, i32 1, i32 0, !dbg !1525
  %add76 = add nsw i32 %div, %cond75, !dbg !1526
  %conv77 = trunc i32 %add76 to i8, !dbg !1527
  %70 = load i32, i32* %rsp_length, align 4, !dbg !1528
  %inc = add nsw i32 %70, 1, !dbg !1528
  store i32 %inc, i32* %rsp_length, align 4, !dbg !1528
  %idxprom78 = sext i32 %70 to i64, !dbg !1529
  %arrayidx79 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom78, !dbg !1529
  store i8 %conv77, i8* %arrayidx79, align 1, !dbg !1530
  %71 = load i8*, i8** %tab_bits, align 8, !dbg !1531
  %72 = load i32, i32* %mapping_address, align 4, !dbg !1532
  %73 = load i32, i32* %nb, align 4, !dbg !1533
  %arraydecay80 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1534
  %74 = load i32, i32* %rsp_length, align 4, !dbg !1535
  %call81 = call i32 @response_io_status(i8* %71, i32 %72, i32 %73, i8* %arraydecay80, i32 %74), !dbg !1536
  store i32 %call81, i32* %rsp_length, align 4, !dbg !1537
  br label %if.end82

if.end82:                                         ; preds = %if.else70, %cond.end67
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then50
  br label %sw.epilog, !dbg !1538

sw.bb84:                                          ; preds = %if.end, %if.end
  call void @llvm.dbg.declare(metadata i32* %is_input85, metadata !1539, metadata !451), !dbg !1541
  %75 = load i32, i32* %function, align 4, !dbg !1542
  %cmp86 = icmp eq i32 %75, 4, !dbg !1543
  %conv87 = zext i1 %cmp86 to i32, !dbg !1543
  store i32 %conv87, i32* %is_input85, align 4, !dbg !1541
  call void @llvm.dbg.declare(metadata i32* %start_registers, metadata !1544, metadata !451), !dbg !1545
  %76 = load i32, i32* %is_input85, align 4, !dbg !1546
  %tobool88 = icmp ne i32 %76, 0, !dbg !1546
  br i1 %tobool88, label %cond.true89, label %cond.false90, !dbg !1546

cond.true89:                                      ; preds = %sw.bb84
  %77 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1547
  %start_input_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %77, i32 0, i32 5, !dbg !1548
  %78 = load i32, i32* %start_input_registers, align 4, !dbg !1548
  br label %cond.end92, !dbg !1546

cond.false90:                                     ; preds = %sw.bb84
  %79 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1549
  %start_registers91 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %79, i32 0, i32 7, !dbg !1550
  %80 = load i32, i32* %start_registers91, align 4, !dbg !1550
  br label %cond.end92, !dbg !1546

cond.end92:                                       ; preds = %cond.false90, %cond.true89
  %cond93 = phi i32 [ %78, %cond.true89 ], [ %80, %cond.false90 ], !dbg !1546
  store i32 %cond93, i32* %start_registers, align 4, !dbg !1545
  call void @llvm.dbg.declare(metadata i32* %nb_registers, metadata !1551, metadata !451), !dbg !1552
  %81 = load i32, i32* %is_input85, align 4, !dbg !1553
  %tobool94 = icmp ne i32 %81, 0, !dbg !1553
  br i1 %tobool94, label %cond.true95, label %cond.false96, !dbg !1553

cond.true95:                                      ; preds = %cond.end92
  %82 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1554
  %nb_input_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %82, i32 0, i32 4, !dbg !1555
  %83 = load i32, i32* %nb_input_registers, align 8, !dbg !1555
  br label %cond.end98, !dbg !1553

cond.false96:                                     ; preds = %cond.end92
  %84 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1556
  %nb_registers97 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %84, i32 0, i32 6, !dbg !1557
  %85 = load i32, i32* %nb_registers97, align 8, !dbg !1557
  br label %cond.end98, !dbg !1553

cond.end98:                                       ; preds = %cond.false96, %cond.true95
  %cond99 = phi i32 [ %83, %cond.true95 ], [ %85, %cond.false96 ], !dbg !1553
  store i32 %cond99, i32* %nb_registers, align 4, !dbg !1552
  call void @llvm.dbg.declare(metadata i16** %tab_registers, metadata !1558, metadata !451), !dbg !1559
  %86 = load i32, i32* %is_input85, align 4, !dbg !1560
  %tobool100 = icmp ne i32 %86, 0, !dbg !1560
  br i1 %tobool100, label %cond.true101, label %cond.false102, !dbg !1560

cond.true101:                                     ; preds = %cond.end98
  %87 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1561
  %tab_input_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %87, i32 0, i32 10, !dbg !1562
  %88 = load i16*, i16** %tab_input_registers, align 8, !dbg !1562
  br label %cond.end104, !dbg !1560

cond.false102:                                    ; preds = %cond.end98
  %89 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1563
  %tab_registers103 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %89, i32 0, i32 11, !dbg !1564
  %90 = load i16*, i16** %tab_registers103, align 8, !dbg !1564
  br label %cond.end104, !dbg !1560

cond.end104:                                      ; preds = %cond.false102, %cond.true101
  %cond105 = phi i16* [ %88, %cond.true101 ], [ %90, %cond.false102 ], !dbg !1560
  store i16* %cond105, i16** %tab_registers, align 8, !dbg !1559
  call void @llvm.dbg.declare(metadata i8** %name106, metadata !1565, metadata !451), !dbg !1566
  %91 = load i32, i32* %is_input85, align 4, !dbg !1567
  %tobool107 = icmp ne i32 %91, 0, !dbg !1567
  %92 = zext i1 %tobool107 to i64, !dbg !1567
  %cond108 = select i1 %tobool107, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i32 0, i32 0), !dbg !1567
  store i8* %cond108, i8** %name106, align 8, !dbg !1566
  call void @llvm.dbg.declare(metadata i32* %nb109, metadata !1568, metadata !451), !dbg !1569
  %93 = load i8*, i8** %req.addr, align 8, !dbg !1570
  %94 = load i32, i32* %offset, align 4, !dbg !1571
  %add110 = add nsw i32 %94, 3, !dbg !1572
  %idxprom111 = sext i32 %add110 to i64, !dbg !1570
  %arrayidx112 = getelementptr inbounds i8, i8* %93, i64 %idxprom111, !dbg !1570
  %95 = load i8, i8* %arrayidx112, align 1, !dbg !1570
  %conv113 = zext i8 %95 to i32, !dbg !1570
  %shl114 = shl i32 %conv113, 8, !dbg !1573
  %96 = load i8*, i8** %req.addr, align 8, !dbg !1574
  %97 = load i32, i32* %offset, align 4, !dbg !1575
  %add115 = add nsw i32 %97, 4, !dbg !1576
  %idxprom116 = sext i32 %add115 to i64, !dbg !1574
  %arrayidx117 = getelementptr inbounds i8, i8* %96, i64 %idxprom116, !dbg !1574
  %98 = load i8, i8* %arrayidx117, align 1, !dbg !1574
  %conv118 = zext i8 %98 to i32, !dbg !1574
  %add119 = add nsw i32 %shl114, %conv118, !dbg !1577
  store i32 %add119, i32* %nb109, align 4, !dbg !1569
  call void @llvm.dbg.declare(metadata i32* %mapping_address120, metadata !1578, metadata !451), !dbg !1579
  %99 = load i16, i16* %address, align 2, !dbg !1580
  %conv121 = zext i16 %99 to i32, !dbg !1580
  %100 = load i32, i32* %start_registers, align 4, !dbg !1581
  %sub122 = sub nsw i32 %conv121, %100, !dbg !1582
  store i32 %sub122, i32* %mapping_address120, align 4, !dbg !1579
  %101 = load i32, i32* %nb109, align 4, !dbg !1583
  %cmp123 = icmp slt i32 %101, 1, !dbg !1585
  br i1 %cmp123, label %if.then128, label %lor.lhs.false125, !dbg !1586

lor.lhs.false125:                                 ; preds = %cond.end104
  %102 = load i32, i32* %nb109, align 4, !dbg !1587
  %cmp126 = icmp slt i32 125, %102, !dbg !1588
  br i1 %cmp126, label %if.then128, label %if.else131, !dbg !1589

if.then128:                                       ; preds = %lor.lhs.false125, %cond.end104
  %103 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1590
  %arraydecay129 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1592
  %104 = load i32, i32* %nb109, align 4, !dbg !1593
  %105 = load i8*, i8** %name106, align 8, !dbg !1594
  %call130 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %103, %struct._sft* %sft, i32 3, i8* %arraydecay129, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.27, i32 0, i32 0), i32 %104, i8* %105, i32 125), !dbg !1595
  store i32 %call130, i32* %rsp_length, align 4, !dbg !1596
  br label %if.end179, !dbg !1597

if.else131:                                       ; preds = %lor.lhs.false125
  %106 = load i32, i32* %mapping_address120, align 4, !dbg !1598
  %cmp132 = icmp slt i32 %106, 0, !dbg !1600
  br i1 %cmp132, label %if.then138, label %lor.lhs.false134, !dbg !1601

lor.lhs.false134:                                 ; preds = %if.else131
  %107 = load i32, i32* %mapping_address120, align 4, !dbg !1602
  %108 = load i32, i32* %nb109, align 4, !dbg !1603
  %add135 = add nsw i32 %107, %108, !dbg !1604
  %109 = load i32, i32* %nb_registers, align 4, !dbg !1605
  %cmp136 = icmp sgt i32 %add135, %109, !dbg !1606
  br i1 %cmp136, label %if.then138, label %if.else150, !dbg !1607

if.then138:                                       ; preds = %lor.lhs.false134, %if.else131
  %110 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1608
  %arraydecay139 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1610
  %111 = load i32, i32* %mapping_address120, align 4, !dbg !1611
  %cmp140 = icmp slt i32 %111, 0, !dbg !1612
  br i1 %cmp140, label %cond.true142, label %cond.false144, !dbg !1611

cond.true142:                                     ; preds = %if.then138
  %112 = load i16, i16* %address, align 2, !dbg !1613
  %conv143 = zext i16 %112 to i32, !dbg !1613
  br label %cond.end147, !dbg !1611

cond.false144:                                    ; preds = %if.then138
  %113 = load i16, i16* %address, align 2, !dbg !1614
  %conv145 = zext i16 %113 to i32, !dbg !1614
  %114 = load i32, i32* %nb109, align 4, !dbg !1615
  %add146 = add nsw i32 %conv145, %114, !dbg !1616
  br label %cond.end147, !dbg !1611

cond.end147:                                      ; preds = %cond.false144, %cond.true142
  %cond148 = phi i32 [ %conv143, %cond.true142 ], [ %add146, %cond.false144 ], !dbg !1611
  %115 = load i8*, i8** %name106, align 8, !dbg !1617
  %call149 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %110, %struct._sft* %sft, i32 2, i8* %arraydecay139, i32 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.28, i32 0, i32 0), i32 %cond148, i8* %115), !dbg !1618
  store i32 %call149, i32* %rsp_length, align 4, !dbg !1619
  br label %if.end178, !dbg !1620

if.else150:                                       ; preds = %lor.lhs.false134
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1621, metadata !451), !dbg !1623
  %116 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1624
  %backend151 = getelementptr inbounds %struct._modbus, %struct._modbus* %116, i32 0, i32 7, !dbg !1625
  %117 = load %struct._modbus_backend*, %struct._modbus_backend** %backend151, align 8, !dbg !1625
  %build_response_basis152 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %117, i32 0, i32 6, !dbg !1626
  %118 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis152, align 8, !dbg !1626
  %arraydecay153 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1627
  %call154 = call i32 %118(%struct._sft* %sft, i8* %arraydecay153), !dbg !1624
  store i32 %call154, i32* %rsp_length, align 4, !dbg !1628
  %119 = load i32, i32* %nb109, align 4, !dbg !1629
  %shl155 = shl i32 %119, 1, !dbg !1630
  %conv156 = trunc i32 %shl155 to i8, !dbg !1629
  %120 = load i32, i32* %rsp_length, align 4, !dbg !1631
  %inc157 = add nsw i32 %120, 1, !dbg !1631
  store i32 %inc157, i32* %rsp_length, align 4, !dbg !1631
  %idxprom158 = sext i32 %120 to i64, !dbg !1632
  %arrayidx159 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom158, !dbg !1632
  store i8 %conv156, i8* %arrayidx159, align 1, !dbg !1633
  %121 = load i32, i32* %mapping_address120, align 4, !dbg !1634
  store i32 %121, i32* %i, align 4, !dbg !1636
  br label %for.cond, !dbg !1637

for.cond:                                         ; preds = %for.inc, %if.else150
  %122 = load i32, i32* %i, align 4, !dbg !1638
  %123 = load i32, i32* %mapping_address120, align 4, !dbg !1640
  %124 = load i32, i32* %nb109, align 4, !dbg !1641
  %add160 = add nsw i32 %123, %124, !dbg !1642
  %cmp161 = icmp slt i32 %122, %add160, !dbg !1643
  br i1 %cmp161, label %for.body, label %for.end, !dbg !1644

for.body:                                         ; preds = %for.cond
  %125 = load i16*, i16** %tab_registers, align 8, !dbg !1645
  %126 = load i32, i32* %i, align 4, !dbg !1647
  %idxprom163 = sext i32 %126 to i64, !dbg !1645
  %arrayidx164 = getelementptr inbounds i16, i16* %125, i64 %idxprom163, !dbg !1645
  %127 = load i16, i16* %arrayidx164, align 2, !dbg !1645
  %conv165 = zext i16 %127 to i32, !dbg !1645
  %shr = ashr i32 %conv165, 8, !dbg !1648
  %conv166 = trunc i32 %shr to i8, !dbg !1645
  %128 = load i32, i32* %rsp_length, align 4, !dbg !1649
  %inc167 = add nsw i32 %128, 1, !dbg !1649
  store i32 %inc167, i32* %rsp_length, align 4, !dbg !1649
  %idxprom168 = sext i32 %128 to i64, !dbg !1650
  %arrayidx169 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom168, !dbg !1650
  store i8 %conv166, i8* %arrayidx169, align 1, !dbg !1651
  %129 = load i16*, i16** %tab_registers, align 8, !dbg !1652
  %130 = load i32, i32* %i, align 4, !dbg !1653
  %idxprom170 = sext i32 %130 to i64, !dbg !1652
  %arrayidx171 = getelementptr inbounds i16, i16* %129, i64 %idxprom170, !dbg !1652
  %131 = load i16, i16* %arrayidx171, align 2, !dbg !1652
  %conv172 = zext i16 %131 to i32, !dbg !1652
  %and = and i32 %conv172, 255, !dbg !1654
  %conv173 = trunc i32 %and to i8, !dbg !1652
  %132 = load i32, i32* %rsp_length, align 4, !dbg !1655
  %inc174 = add nsw i32 %132, 1, !dbg !1655
  store i32 %inc174, i32* %rsp_length, align 4, !dbg !1655
  %idxprom175 = sext i32 %132 to i64, !dbg !1656
  %arrayidx176 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom175, !dbg !1656
  store i8 %conv173, i8* %arrayidx176, align 1, !dbg !1657
  br label %for.inc, !dbg !1658

for.inc:                                          ; preds = %for.body
  %133 = load i32, i32* %i, align 4, !dbg !1659
  %inc177 = add nsw i32 %133, 1, !dbg !1659
  store i32 %inc177, i32* %i, align 4, !dbg !1659
  br label %for.cond, !dbg !1660, !llvm.loop !1661

for.end:                                          ; preds = %for.cond
  br label %if.end178

if.end178:                                        ; preds = %for.end, %cond.end147
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then128
  br label %sw.epilog, !dbg !1663

sw.bb180:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %mapping_address181, metadata !1664, metadata !451), !dbg !1666
  %134 = load i16, i16* %address, align 2, !dbg !1667
  %conv182 = zext i16 %134 to i32, !dbg !1667
  %135 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1668
  %start_bits183 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %135, i32 0, i32 1, !dbg !1669
  %136 = load i32, i32* %start_bits183, align 4, !dbg !1669
  %sub184 = sub nsw i32 %conv182, %136, !dbg !1670
  store i32 %sub184, i32* %mapping_address181, align 4, !dbg !1666
  %137 = load i32, i32* %mapping_address181, align 4, !dbg !1671
  %cmp185 = icmp slt i32 %137, 0, !dbg !1673
  br i1 %cmp185, label %if.then191, label %lor.lhs.false187, !dbg !1674

lor.lhs.false187:                                 ; preds = %sw.bb180
  %138 = load i32, i32* %mapping_address181, align 4, !dbg !1675
  %139 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1676
  %nb_bits188 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %139, i32 0, i32 0, !dbg !1677
  %140 = load i32, i32* %nb_bits188, align 8, !dbg !1677
  %cmp189 = icmp sge i32 %138, %140, !dbg !1678
  br i1 %cmp189, label %if.then191, label %if.else195, !dbg !1679

if.then191:                                       ; preds = %lor.lhs.false187, %sw.bb180
  %141 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1680
  %arraydecay192 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1682
  %142 = load i16, i16* %address, align 2, !dbg !1683
  %conv193 = zext i16 %142 to i32, !dbg !1683
  %call194 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %141, %struct._sft* %sft, i32 2, i8* %arraydecay192, i32 0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i32 0, i32 0), i32 %conv193), !dbg !1684
  store i32 %call194, i32* %rsp_length, align 4, !dbg !1685
  br label %if.end225, !dbg !1686

if.else195:                                       ; preds = %lor.lhs.false187
  call void @llvm.dbg.declare(metadata i32* %data, metadata !1687, metadata !451), !dbg !1689
  %143 = load i8*, i8** %req.addr, align 8, !dbg !1690
  %144 = load i32, i32* %offset, align 4, !dbg !1691
  %add196 = add nsw i32 %144, 3, !dbg !1692
  %idxprom197 = sext i32 %add196 to i64, !dbg !1690
  %arrayidx198 = getelementptr inbounds i8, i8* %143, i64 %idxprom197, !dbg !1690
  %145 = load i8, i8* %arrayidx198, align 1, !dbg !1690
  %conv199 = zext i8 %145 to i32, !dbg !1690
  %shl200 = shl i32 %conv199, 8, !dbg !1693
  %146 = load i8*, i8** %req.addr, align 8, !dbg !1694
  %147 = load i32, i32* %offset, align 4, !dbg !1695
  %add201 = add nsw i32 %147, 4, !dbg !1696
  %idxprom202 = sext i32 %add201 to i64, !dbg !1694
  %arrayidx203 = getelementptr inbounds i8, i8* %146, i64 %idxprom202, !dbg !1694
  %148 = load i8, i8* %arrayidx203, align 1, !dbg !1694
  %conv204 = zext i8 %148 to i32, !dbg !1694
  %add205 = add nsw i32 %shl200, %conv204, !dbg !1697
  store i32 %add205, i32* %data, align 4, !dbg !1689
  %149 = load i32, i32* %data, align 4, !dbg !1698
  %cmp206 = icmp eq i32 %149, 65280, !dbg !1700
  br i1 %cmp206, label %if.then211, label %lor.lhs.false208, !dbg !1701

lor.lhs.false208:                                 ; preds = %if.else195
  %150 = load i32, i32* %data, align 4, !dbg !1702
  %cmp209 = icmp eq i32 %150, 0, !dbg !1703
  br i1 %cmp209, label %if.then211, label %if.else220, !dbg !1704

if.then211:                                       ; preds = %lor.lhs.false208, %if.else195
  %151 = load i32, i32* %data, align 4, !dbg !1705
  %tobool212 = icmp ne i32 %151, 0, !dbg !1705
  %152 = zext i1 %tobool212 to i64, !dbg !1705
  %cond213 = select i1 %tobool212, i32 1, i32 0, !dbg !1705
  %conv214 = trunc i32 %cond213 to i8, !dbg !1705
  %153 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1707
  %tab_bits215 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %153, i32 0, i32 8, !dbg !1708
  %154 = load i8*, i8** %tab_bits215, align 8, !dbg !1708
  %155 = load i32, i32* %mapping_address181, align 4, !dbg !1709
  %idxprom216 = sext i32 %155 to i64, !dbg !1707
  %arrayidx217 = getelementptr inbounds i8, i8* %154, i64 %idxprom216, !dbg !1707
  store i8 %conv214, i8* %arrayidx217, align 1, !dbg !1710
  %arraydecay218 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1711
  %156 = load i8*, i8** %req.addr, align 8, !dbg !1712
  %157 = load i32, i32* %req_length.addr, align 4, !dbg !1713
  %conv219 = sext i32 %157 to i64, !dbg !1713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay218, i8* %156, i64 %conv219, i32 1, i1 false), !dbg !1711
  %158 = load i32, i32* %req_length.addr, align 4, !dbg !1714
  store i32 %158, i32* %rsp_length, align 4, !dbg !1715
  br label %if.end224, !dbg !1716

if.else220:                                       ; preds = %lor.lhs.false208
  %159 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1717
  %arraydecay221 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1719
  %160 = load i32, i32* %data, align 4, !dbg !1720
  %161 = load i16, i16* %address, align 2, !dbg !1721
  %conv222 = zext i16 %161 to i32, !dbg !1721
  %call223 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %159, %struct._sft* %sft, i32 3, i8* %arraydecay221, i32 0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.32, i32 0, i32 0), i32 %160, i32 %conv222), !dbg !1722
  store i32 %call223, i32* %rsp_length, align 4, !dbg !1723
  br label %if.end224

if.end224:                                        ; preds = %if.else220, %if.then211
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.then191
  br label %sw.epilog, !dbg !1724

sw.bb226:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %mapping_address227, metadata !1725, metadata !451), !dbg !1727
  %162 = load i16, i16* %address, align 2, !dbg !1728
  %conv228 = zext i16 %162 to i32, !dbg !1728
  %163 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1729
  %start_registers229 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %163, i32 0, i32 7, !dbg !1730
  %164 = load i32, i32* %start_registers229, align 4, !dbg !1730
  %sub230 = sub nsw i32 %conv228, %164, !dbg !1731
  store i32 %sub230, i32* %mapping_address227, align 4, !dbg !1727
  %165 = load i32, i32* %mapping_address227, align 4, !dbg !1732
  %cmp231 = icmp slt i32 %165, 0, !dbg !1734
  br i1 %cmp231, label %if.then237, label %lor.lhs.false233, !dbg !1735

lor.lhs.false233:                                 ; preds = %sw.bb226
  %166 = load i32, i32* %mapping_address227, align 4, !dbg !1736
  %167 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1737
  %nb_registers234 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %167, i32 0, i32 6, !dbg !1738
  %168 = load i32, i32* %nb_registers234, align 8, !dbg !1738
  %cmp235 = icmp sge i32 %166, %168, !dbg !1739
  br i1 %cmp235, label %if.then237, label %if.else241, !dbg !1740

if.then237:                                       ; preds = %lor.lhs.false233, %sw.bb226
  %169 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1741
  %arraydecay238 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1743
  %170 = load i16, i16* %address, align 2, !dbg !1744
  %conv239 = zext i16 %170 to i32, !dbg !1744
  %call240 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %169, %struct._sft* %sft, i32 2, i8* %arraydecay238, i32 0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i32 0, i32 0), i32 %conv239), !dbg !1745
  store i32 %call240, i32* %rsp_length, align 4, !dbg !1746
  br label %if.end259, !dbg !1747

if.else241:                                       ; preds = %lor.lhs.false233
  call void @llvm.dbg.declare(metadata i32* %data242, metadata !1748, metadata !451), !dbg !1750
  %171 = load i8*, i8** %req.addr, align 8, !dbg !1751
  %172 = load i32, i32* %offset, align 4, !dbg !1752
  %add243 = add nsw i32 %172, 3, !dbg !1753
  %idxprom244 = sext i32 %add243 to i64, !dbg !1751
  %arrayidx245 = getelementptr inbounds i8, i8* %171, i64 %idxprom244, !dbg !1751
  %173 = load i8, i8* %arrayidx245, align 1, !dbg !1751
  %conv246 = zext i8 %173 to i32, !dbg !1751
  %shl247 = shl i32 %conv246, 8, !dbg !1754
  %174 = load i8*, i8** %req.addr, align 8, !dbg !1755
  %175 = load i32, i32* %offset, align 4, !dbg !1756
  %add248 = add nsw i32 %175, 4, !dbg !1757
  %idxprom249 = sext i32 %add248 to i64, !dbg !1755
  %arrayidx250 = getelementptr inbounds i8, i8* %174, i64 %idxprom249, !dbg !1755
  %176 = load i8, i8* %arrayidx250, align 1, !dbg !1755
  %conv251 = zext i8 %176 to i32, !dbg !1755
  %add252 = add nsw i32 %shl247, %conv251, !dbg !1758
  store i32 %add252, i32* %data242, align 4, !dbg !1750
  %177 = load i32, i32* %data242, align 4, !dbg !1759
  %conv253 = trunc i32 %177 to i16, !dbg !1759
  %178 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1760
  %tab_registers254 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %178, i32 0, i32 11, !dbg !1761
  %179 = load i16*, i16** %tab_registers254, align 8, !dbg !1761
  %180 = load i32, i32* %mapping_address227, align 4, !dbg !1762
  %idxprom255 = sext i32 %180 to i64, !dbg !1760
  %arrayidx256 = getelementptr inbounds i16, i16* %179, i64 %idxprom255, !dbg !1760
  store i16 %conv253, i16* %arrayidx256, align 2, !dbg !1763
  %arraydecay257 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1764
  %181 = load i8*, i8** %req.addr, align 8, !dbg !1765
  %182 = load i32, i32* %req_length.addr, align 4, !dbg !1766
  %conv258 = sext i32 %182 to i64, !dbg !1766
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay257, i8* %181, i64 %conv258, i32 1, i1 false), !dbg !1764
  %183 = load i32, i32* %req_length.addr, align 4, !dbg !1767
  store i32 %183, i32* %rsp_length, align 4, !dbg !1768
  br label %if.end259

if.end259:                                        ; preds = %if.else241, %if.then237
  br label %sw.epilog, !dbg !1769

sw.bb260:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %nb261, metadata !1770, metadata !451), !dbg !1772
  %184 = load i8*, i8** %req.addr, align 8, !dbg !1773
  %185 = load i32, i32* %offset, align 4, !dbg !1774
  %add262 = add nsw i32 %185, 3, !dbg !1775
  %idxprom263 = sext i32 %add262 to i64, !dbg !1773
  %arrayidx264 = getelementptr inbounds i8, i8* %184, i64 %idxprom263, !dbg !1773
  %186 = load i8, i8* %arrayidx264, align 1, !dbg !1773
  %conv265 = zext i8 %186 to i32, !dbg !1773
  %shl266 = shl i32 %conv265, 8, !dbg !1776
  %187 = load i8*, i8** %req.addr, align 8, !dbg !1777
  %188 = load i32, i32* %offset, align 4, !dbg !1778
  %add267 = add nsw i32 %188, 4, !dbg !1779
  %idxprom268 = sext i32 %add267 to i64, !dbg !1777
  %arrayidx269 = getelementptr inbounds i8, i8* %187, i64 %idxprom268, !dbg !1777
  %189 = load i8, i8* %arrayidx269, align 1, !dbg !1777
  %conv270 = zext i8 %189 to i32, !dbg !1777
  %add271 = add nsw i32 %shl266, %conv270, !dbg !1780
  store i32 %add271, i32* %nb261, align 4, !dbg !1772
  call void @llvm.dbg.declare(metadata i32* %mapping_address272, metadata !1781, metadata !451), !dbg !1782
  %190 = load i16, i16* %address, align 2, !dbg !1783
  %conv273 = zext i16 %190 to i32, !dbg !1783
  %191 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1784
  %start_bits274 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %191, i32 0, i32 1, !dbg !1785
  %192 = load i32, i32* %start_bits274, align 4, !dbg !1785
  %sub275 = sub nsw i32 %conv273, %192, !dbg !1786
  store i32 %sub275, i32* %mapping_address272, align 4, !dbg !1782
  %193 = load i32, i32* %nb261, align 4, !dbg !1787
  %cmp276 = icmp slt i32 %193, 1, !dbg !1789
  br i1 %cmp276, label %if.then281, label %lor.lhs.false278, !dbg !1790

lor.lhs.false278:                                 ; preds = %sw.bb260
  %194 = load i32, i32* %nb261, align 4, !dbg !1791
  %cmp279 = icmp slt i32 1968, %194, !dbg !1792
  br i1 %cmp279, label %if.then281, label %if.else284, !dbg !1793

if.then281:                                       ; preds = %lor.lhs.false278, %sw.bb260
  %195 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1794
  %arraydecay282 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1796
  %196 = load i32, i32* %nb261, align 4, !dbg !1797
  %call283 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %195, %struct._sft* %sft, i32 3, i8* %arraydecay282, i32 1, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.34, i32 0, i32 0), i32 %196, i32 1968), !dbg !1798
  store i32 %call283, i32* %rsp_length, align 4, !dbg !1799
  br label %if.end318, !dbg !1800

if.else284:                                       ; preds = %lor.lhs.false278
  %197 = load i32, i32* %mapping_address272, align 4, !dbg !1801
  %cmp285 = icmp slt i32 %197, 0, !dbg !1803
  br i1 %cmp285, label %if.then292, label %lor.lhs.false287, !dbg !1804

lor.lhs.false287:                                 ; preds = %if.else284
  %198 = load i32, i32* %mapping_address272, align 4, !dbg !1805
  %199 = load i32, i32* %nb261, align 4, !dbg !1806
  %add288 = add nsw i32 %198, %199, !dbg !1807
  %200 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1808
  %nb_bits289 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %200, i32 0, i32 0, !dbg !1809
  %201 = load i32, i32* %nb_bits289, align 8, !dbg !1809
  %cmp290 = icmp sgt i32 %add288, %201, !dbg !1810
  br i1 %cmp290, label %if.then292, label %if.else304, !dbg !1811

if.then292:                                       ; preds = %lor.lhs.false287, %if.else284
  %202 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1812
  %arraydecay293 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1814
  %203 = load i32, i32* %mapping_address272, align 4, !dbg !1815
  %cmp294 = icmp slt i32 %203, 0, !dbg !1816
  br i1 %cmp294, label %cond.true296, label %cond.false298, !dbg !1815

cond.true296:                                     ; preds = %if.then292
  %204 = load i16, i16* %address, align 2, !dbg !1817
  %conv297 = zext i16 %204 to i32, !dbg !1817
  br label %cond.end301, !dbg !1815

cond.false298:                                    ; preds = %if.then292
  %205 = load i16, i16* %address, align 2, !dbg !1818
  %conv299 = zext i16 %205 to i32, !dbg !1818
  %206 = load i32, i32* %nb261, align 4, !dbg !1819
  %add300 = add nsw i32 %conv299, %206, !dbg !1820
  br label %cond.end301, !dbg !1815

cond.end301:                                      ; preds = %cond.false298, %cond.true296
  %cond302 = phi i32 [ %conv297, %cond.true296 ], [ %add300, %cond.false298 ], !dbg !1815
  %call303 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %202, %struct._sft* %sft, i32 2, i8* %arraydecay293, i32 0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.35, i32 0, i32 0), i32 %cond302), !dbg !1821
  store i32 %call303, i32* %rsp_length, align 4, !dbg !1822
  br label %if.end317, !dbg !1823

if.else304:                                       ; preds = %lor.lhs.false287
  %207 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1824
  %tab_bits305 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %207, i32 0, i32 8, !dbg !1826
  %208 = load i8*, i8** %tab_bits305, align 8, !dbg !1826
  %209 = load i32, i32* %mapping_address272, align 4, !dbg !1827
  %210 = load i32, i32* %nb261, align 4, !dbg !1828
  %211 = load i8*, i8** %req.addr, align 8, !dbg !1829
  %212 = load i32, i32* %offset, align 4, !dbg !1830
  %add306 = add nsw i32 %212, 6, !dbg !1831
  %idxprom307 = sext i32 %add306 to i64, !dbg !1829
  %arrayidx308 = getelementptr inbounds i8, i8* %211, i64 %idxprom307, !dbg !1829
  call void @modbus_set_bits_from_bytes(i8* %208, i32 %209, i32 %210, i8* %arrayidx308), !dbg !1832
  %213 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1833
  %backend309 = getelementptr inbounds %struct._modbus, %struct._modbus* %213, i32 0, i32 7, !dbg !1834
  %214 = load %struct._modbus_backend*, %struct._modbus_backend** %backend309, align 8, !dbg !1834
  %build_response_basis310 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %214, i32 0, i32 6, !dbg !1835
  %215 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis310, align 8, !dbg !1835
  %arraydecay311 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1836
  %call312 = call i32 %215(%struct._sft* %sft, i8* %arraydecay311), !dbg !1833
  store i32 %call312, i32* %rsp_length, align 4, !dbg !1837
  %arraydecay313 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1838
  %216 = load i32, i32* %rsp_length, align 4, !dbg !1839
  %idx.ext = sext i32 %216 to i64, !dbg !1840
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay313, i64 %idx.ext, !dbg !1840
  %217 = load i8*, i8** %req.addr, align 8, !dbg !1841
  %218 = load i32, i32* %rsp_length, align 4, !dbg !1842
  %idx.ext314 = sext i32 %218 to i64, !dbg !1843
  %add.ptr315 = getelementptr inbounds i8, i8* %217, i64 %idx.ext314, !dbg !1843
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr315, i64 4, i32 1, i1 false), !dbg !1844
  %219 = load i32, i32* %rsp_length, align 4, !dbg !1845
  %add316 = add nsw i32 %219, 4, !dbg !1845
  store i32 %add316, i32* %rsp_length, align 4, !dbg !1845
  br label %if.end317

if.end317:                                        ; preds = %if.else304, %cond.end301
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %if.then281
  br label %sw.epilog, !dbg !1846

sw.bb319:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %nb320, metadata !1847, metadata !451), !dbg !1849
  %220 = load i8*, i8** %req.addr, align 8, !dbg !1850
  %221 = load i32, i32* %offset, align 4, !dbg !1851
  %add321 = add nsw i32 %221, 3, !dbg !1852
  %idxprom322 = sext i32 %add321 to i64, !dbg !1850
  %arrayidx323 = getelementptr inbounds i8, i8* %220, i64 %idxprom322, !dbg !1850
  %222 = load i8, i8* %arrayidx323, align 1, !dbg !1850
  %conv324 = zext i8 %222 to i32, !dbg !1850
  %shl325 = shl i32 %conv324, 8, !dbg !1853
  %223 = load i8*, i8** %req.addr, align 8, !dbg !1854
  %224 = load i32, i32* %offset, align 4, !dbg !1855
  %add326 = add nsw i32 %224, 4, !dbg !1856
  %idxprom327 = sext i32 %add326 to i64, !dbg !1854
  %arrayidx328 = getelementptr inbounds i8, i8* %223, i64 %idxprom327, !dbg !1854
  %225 = load i8, i8* %arrayidx328, align 1, !dbg !1854
  %conv329 = zext i8 %225 to i32, !dbg !1854
  %add330 = add nsw i32 %shl325, %conv329, !dbg !1857
  store i32 %add330, i32* %nb320, align 4, !dbg !1849
  call void @llvm.dbg.declare(metadata i32* %mapping_address331, metadata !1858, metadata !451), !dbg !1859
  %226 = load i16, i16* %address, align 2, !dbg !1860
  %conv332 = zext i16 %226 to i32, !dbg !1860
  %227 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1861
  %start_registers333 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %227, i32 0, i32 7, !dbg !1862
  %228 = load i32, i32* %start_registers333, align 4, !dbg !1862
  %sub334 = sub nsw i32 %conv332, %228, !dbg !1863
  store i32 %sub334, i32* %mapping_address331, align 4, !dbg !1859
  %229 = load i32, i32* %nb320, align 4, !dbg !1864
  %cmp335 = icmp slt i32 %229, 1, !dbg !1866
  br i1 %cmp335, label %if.then340, label %lor.lhs.false337, !dbg !1867

lor.lhs.false337:                                 ; preds = %sw.bb319
  %230 = load i32, i32* %nb320, align 4, !dbg !1868
  %cmp338 = icmp slt i32 123, %230, !dbg !1869
  br i1 %cmp338, label %if.then340, label %if.else343, !dbg !1870

if.then340:                                       ; preds = %lor.lhs.false337, %sw.bb319
  %231 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1871
  %arraydecay341 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1873
  %232 = load i32, i32* %nb320, align 4, !dbg !1874
  %call342 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %231, %struct._sft* %sft, i32 3, i8* %arraydecay341, i32 1, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.36, i32 0, i32 0), i32 %232, i32 123), !dbg !1875
  store i32 %call342, i32* %rsp_length, align 4, !dbg !1876
  br label %if.end400, !dbg !1877

if.else343:                                       ; preds = %lor.lhs.false337
  %233 = load i32, i32* %mapping_address331, align 4, !dbg !1878
  %cmp344 = icmp slt i32 %233, 0, !dbg !1880
  br i1 %cmp344, label %if.then351, label %lor.lhs.false346, !dbg !1881

lor.lhs.false346:                                 ; preds = %if.else343
  %234 = load i32, i32* %mapping_address331, align 4, !dbg !1882
  %235 = load i32, i32* %nb320, align 4, !dbg !1883
  %add347 = add nsw i32 %234, %235, !dbg !1884
  %236 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1885
  %nb_registers348 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %236, i32 0, i32 6, !dbg !1886
  %237 = load i32, i32* %nb_registers348, align 8, !dbg !1886
  %cmp349 = icmp sgt i32 %add347, %237, !dbg !1887
  br i1 %cmp349, label %if.then351, label %if.else363, !dbg !1888

if.then351:                                       ; preds = %lor.lhs.false346, %if.else343
  %238 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1889
  %arraydecay352 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1891
  %239 = load i32, i32* %mapping_address331, align 4, !dbg !1892
  %cmp353 = icmp slt i32 %239, 0, !dbg !1893
  br i1 %cmp353, label %cond.true355, label %cond.false357, !dbg !1892

cond.true355:                                     ; preds = %if.then351
  %240 = load i16, i16* %address, align 2, !dbg !1894
  %conv356 = zext i16 %240 to i32, !dbg !1894
  br label %cond.end360, !dbg !1892

cond.false357:                                    ; preds = %if.then351
  %241 = load i16, i16* %address, align 2, !dbg !1895
  %conv358 = zext i16 %241 to i32, !dbg !1895
  %242 = load i32, i32* %nb320, align 4, !dbg !1896
  %add359 = add nsw i32 %conv358, %242, !dbg !1897
  br label %cond.end360, !dbg !1892

cond.end360:                                      ; preds = %cond.false357, %cond.true355
  %cond361 = phi i32 [ %conv356, %cond.true355 ], [ %add359, %cond.false357 ], !dbg !1892
  %call362 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %238, %struct._sft* %sft, i32 2, i8* %arraydecay352, i32 0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0), i32 %cond361), !dbg !1898
  store i32 %call362, i32* %rsp_length, align 4, !dbg !1899
  br label %if.end399, !dbg !1900

if.else363:                                       ; preds = %lor.lhs.false346
  call void @llvm.dbg.declare(metadata i32* %i364, metadata !1901, metadata !451), !dbg !1903
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1904, metadata !451), !dbg !1905
  %243 = load i32, i32* %mapping_address331, align 4, !dbg !1906
  store i32 %243, i32* %i364, align 4, !dbg !1908
  store i32 6, i32* %j, align 4, !dbg !1909
  br label %for.cond365, !dbg !1910

for.cond365:                                      ; preds = %for.inc385, %if.else363
  %244 = load i32, i32* %i364, align 4, !dbg !1911
  %245 = load i32, i32* %mapping_address331, align 4, !dbg !1913
  %246 = load i32, i32* %nb320, align 4, !dbg !1914
  %add366 = add nsw i32 %245, %246, !dbg !1915
  %cmp367 = icmp slt i32 %244, %add366, !dbg !1916
  br i1 %cmp367, label %for.body369, label %for.end388, !dbg !1917

for.body369:                                      ; preds = %for.cond365
  %247 = load i8*, i8** %req.addr, align 8, !dbg !1918
  %248 = load i32, i32* %offset, align 4, !dbg !1920
  %249 = load i32, i32* %j, align 4, !dbg !1921
  %add370 = add nsw i32 %248, %249, !dbg !1922
  %idxprom371 = sext i32 %add370 to i64, !dbg !1918
  %arrayidx372 = getelementptr inbounds i8, i8* %247, i64 %idxprom371, !dbg !1918
  %250 = load i8, i8* %arrayidx372, align 1, !dbg !1918
  %conv373 = zext i8 %250 to i32, !dbg !1918
  %shl374 = shl i32 %conv373, 8, !dbg !1923
  %251 = load i8*, i8** %req.addr, align 8, !dbg !1924
  %252 = load i32, i32* %offset, align 4, !dbg !1925
  %253 = load i32, i32* %j, align 4, !dbg !1926
  %add375 = add nsw i32 %252, %253, !dbg !1927
  %add376 = add nsw i32 %add375, 1, !dbg !1928
  %idxprom377 = sext i32 %add376 to i64, !dbg !1924
  %arrayidx378 = getelementptr inbounds i8, i8* %251, i64 %idxprom377, !dbg !1924
  %254 = load i8, i8* %arrayidx378, align 1, !dbg !1924
  %conv379 = zext i8 %254 to i32, !dbg !1924
  %add380 = add nsw i32 %shl374, %conv379, !dbg !1929
  %conv381 = trunc i32 %add380 to i16, !dbg !1930
  %255 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !1931
  %tab_registers382 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %255, i32 0, i32 11, !dbg !1932
  %256 = load i16*, i16** %tab_registers382, align 8, !dbg !1932
  %257 = load i32, i32* %i364, align 4, !dbg !1933
  %idxprom383 = sext i32 %257 to i64, !dbg !1931
  %arrayidx384 = getelementptr inbounds i16, i16* %256, i64 %idxprom383, !dbg !1931
  store i16 %conv381, i16* %arrayidx384, align 2, !dbg !1934
  br label %for.inc385, !dbg !1935

for.inc385:                                       ; preds = %for.body369
  %258 = load i32, i32* %i364, align 4, !dbg !1936
  %inc386 = add nsw i32 %258, 1, !dbg !1936
  store i32 %inc386, i32* %i364, align 4, !dbg !1936
  %259 = load i32, i32* %j, align 4, !dbg !1937
  %add387 = add nsw i32 %259, 2, !dbg !1937
  store i32 %add387, i32* %j, align 4, !dbg !1937
  br label %for.cond365, !dbg !1938, !llvm.loop !1939

for.end388:                                       ; preds = %for.cond365
  %260 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1941
  %backend389 = getelementptr inbounds %struct._modbus, %struct._modbus* %260, i32 0, i32 7, !dbg !1942
  %261 = load %struct._modbus_backend*, %struct._modbus_backend** %backend389, align 8, !dbg !1942
  %build_response_basis390 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %261, i32 0, i32 6, !dbg !1943
  %262 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis390, align 8, !dbg !1943
  %arraydecay391 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1944
  %call392 = call i32 %262(%struct._sft* %sft, i8* %arraydecay391), !dbg !1941
  store i32 %call392, i32* %rsp_length, align 4, !dbg !1945
  %arraydecay393 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1946
  %263 = load i32, i32* %rsp_length, align 4, !dbg !1947
  %idx.ext394 = sext i32 %263 to i64, !dbg !1948
  %add.ptr395 = getelementptr inbounds i8, i8* %arraydecay393, i64 %idx.ext394, !dbg !1948
  %264 = load i8*, i8** %req.addr, align 8, !dbg !1949
  %265 = load i32, i32* %rsp_length, align 4, !dbg !1950
  %idx.ext396 = sext i32 %265 to i64, !dbg !1951
  %add.ptr397 = getelementptr inbounds i8, i8* %264, i64 %idx.ext396, !dbg !1951
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr395, i8* %add.ptr397, i64 4, i32 1, i1 false), !dbg !1952
  %266 = load i32, i32* %rsp_length, align 4, !dbg !1953
  %add398 = add nsw i32 %266, 4, !dbg !1953
  store i32 %add398, i32* %rsp_length, align 4, !dbg !1953
  br label %if.end399

if.end399:                                        ; preds = %for.end388, %cond.end360
  br label %if.end400

if.end400:                                        ; preds = %if.end399, %if.then340
  br label %sw.epilog, !dbg !1954

sw.bb401:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %str_len, metadata !1955, metadata !451), !dbg !1957
  call void @llvm.dbg.declare(metadata i32* %byte_count_pos, metadata !1958, metadata !451), !dbg !1959
  %267 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1960
  %backend402 = getelementptr inbounds %struct._modbus, %struct._modbus* %267, i32 0, i32 7, !dbg !1961
  %268 = load %struct._modbus_backend*, %struct._modbus_backend** %backend402, align 8, !dbg !1961
  %build_response_basis403 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %268, i32 0, i32 6, !dbg !1962
  %269 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis403, align 8, !dbg !1962
  %arraydecay404 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1963
  %call405 = call i32 %269(%struct._sft* %sft, i8* %arraydecay404), !dbg !1960
  store i32 %call405, i32* %rsp_length, align 4, !dbg !1964
  %270 = load i32, i32* %rsp_length, align 4, !dbg !1965
  %inc406 = add nsw i32 %270, 1, !dbg !1965
  store i32 %inc406, i32* %rsp_length, align 4, !dbg !1965
  store i32 %270, i32* %byte_count_pos, align 4, !dbg !1966
  %271 = load i32, i32* %rsp_length, align 4, !dbg !1967
  %inc407 = add nsw i32 %271, 1, !dbg !1967
  store i32 %inc407, i32* %rsp_length, align 4, !dbg !1967
  %idxprom408 = sext i32 %271 to i64, !dbg !1968
  %arrayidx409 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom408, !dbg !1968
  store i8 -76, i8* %arrayidx409, align 1, !dbg !1969
  %272 = load i32, i32* %rsp_length, align 4, !dbg !1970
  %inc410 = add nsw i32 %272, 1, !dbg !1970
  store i32 %inc410, i32* %rsp_length, align 4, !dbg !1970
  %idxprom411 = sext i32 %272 to i64, !dbg !1971
  %arrayidx412 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom411, !dbg !1971
  store i8 -1, i8* %arrayidx412, align 1, !dbg !1972
  store i32 8, i32* %str_len, align 4, !dbg !1973
  %arraydecay413 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !1974
  %273 = load i32, i32* %rsp_length, align 4, !dbg !1975
  %idx.ext414 = sext i32 %273 to i64, !dbg !1976
  %add.ptr415 = getelementptr inbounds i8, i8* %arraydecay413, i64 %idx.ext414, !dbg !1976
  %274 = load i32, i32* %str_len, align 4, !dbg !1977
  %conv416 = sext i32 %274 to i64, !dbg !1977
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr415, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.38, i32 0, i32 0), i64 %conv416, i32 1, i1 false), !dbg !1978
  %275 = load i32, i32* %str_len, align 4, !dbg !1979
  %276 = load i32, i32* %rsp_length, align 4, !dbg !1980
  %add417 = add nsw i32 %276, %275, !dbg !1980
  store i32 %add417, i32* %rsp_length, align 4, !dbg !1980
  %277 = load i32, i32* %rsp_length, align 4, !dbg !1981
  %278 = load i32, i32* %byte_count_pos, align 4, !dbg !1982
  %sub418 = sub nsw i32 %277, %278, !dbg !1983
  %sub419 = sub nsw i32 %sub418, 1, !dbg !1984
  %conv420 = trunc i32 %sub419 to i8, !dbg !1981
  %279 = load i32, i32* %byte_count_pos, align 4, !dbg !1985
  %idxprom421 = sext i32 %279 to i64, !dbg !1986
  %arrayidx422 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom421, !dbg !1986
  store i8 %conv420, i8* %arrayidx422, align 1, !dbg !1987
  br label %sw.epilog, !dbg !1988

sw.bb423:                                         ; preds = %if.end
  %280 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !1989
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %280, i32 0, i32 2, !dbg !1991
  %281 = load i32, i32* %debug, align 8, !dbg !1991
  %tobool424 = icmp ne i32 %281, 0, !dbg !1989
  br i1 %tobool424, label %if.then425, label %if.end427, !dbg !1992

if.then425:                                       ; preds = %sw.bb423
  %282 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1993
  %call426 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %282, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.39, i32 0, i32 0)), !dbg !1995
  br label %if.end427, !dbg !1996

if.end427:                                        ; preds = %if.then425, %sw.bb423
  %call428 = call i32* @__errno_location() #9, !dbg !1997
  store i32 92, i32* %call428, align 4, !dbg !1998
  store i32 -1, i32* %retval, align 4, !dbg !1999
  br label %return, !dbg !1999

sw.bb429:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %mapping_address430, metadata !2000, metadata !451), !dbg !2002
  %283 = load i16, i16* %address, align 2, !dbg !2003
  %conv431 = zext i16 %283 to i32, !dbg !2003
  %284 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2004
  %start_registers432 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %284, i32 0, i32 7, !dbg !2005
  %285 = load i32, i32* %start_registers432, align 4, !dbg !2005
  %sub433 = sub nsw i32 %conv431, %285, !dbg !2006
  store i32 %sub433, i32* %mapping_address430, align 4, !dbg !2002
  %286 = load i32, i32* %mapping_address430, align 4, !dbg !2007
  %cmp434 = icmp slt i32 %286, 0, !dbg !2009
  br i1 %cmp434, label %if.then440, label %lor.lhs.false436, !dbg !2010

lor.lhs.false436:                                 ; preds = %sw.bb429
  %287 = load i32, i32* %mapping_address430, align 4, !dbg !2011
  %288 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2012
  %nb_registers437 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %288, i32 0, i32 6, !dbg !2013
  %289 = load i32, i32* %nb_registers437, align 8, !dbg !2013
  %cmp438 = icmp sge i32 %287, %289, !dbg !2014
  br i1 %cmp438, label %if.then440, label %if.else444, !dbg !2015

if.then440:                                       ; preds = %lor.lhs.false436, %sw.bb429
  %290 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2016
  %arraydecay441 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2018
  %291 = load i16, i16* %address, align 2, !dbg !2019
  %conv442 = zext i16 %291 to i32, !dbg !2019
  %call443 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %290, %struct._sft* %sft, i32 2, i8* %arraydecay441, i32 0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i32 0, i32 0), i32 %conv442), !dbg !2020
  store i32 %call443, i32* %rsp_length, align 4, !dbg !2021
  br label %if.end485, !dbg !2022

if.else444:                                       ; preds = %lor.lhs.false436
  call void @llvm.dbg.declare(metadata i16* %data445, metadata !2023, metadata !451), !dbg !2025
  %292 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2026
  %tab_registers446 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %292, i32 0, i32 11, !dbg !2027
  %293 = load i16*, i16** %tab_registers446, align 8, !dbg !2027
  %294 = load i32, i32* %mapping_address430, align 4, !dbg !2028
  %idxprom447 = sext i32 %294 to i64, !dbg !2026
  %arrayidx448 = getelementptr inbounds i16, i16* %293, i64 %idxprom447, !dbg !2026
  %295 = load i16, i16* %arrayidx448, align 2, !dbg !2026
  store i16 %295, i16* %data445, align 2, !dbg !2025
  call void @llvm.dbg.declare(metadata i16* %and449, metadata !2029, metadata !451), !dbg !2030
  %296 = load i8*, i8** %req.addr, align 8, !dbg !2031
  %297 = load i32, i32* %offset, align 4, !dbg !2032
  %add450 = add nsw i32 %297, 3, !dbg !2033
  %idxprom451 = sext i32 %add450 to i64, !dbg !2031
  %arrayidx452 = getelementptr inbounds i8, i8* %296, i64 %idxprom451, !dbg !2031
  %298 = load i8, i8* %arrayidx452, align 1, !dbg !2031
  %conv453 = zext i8 %298 to i32, !dbg !2031
  %shl454 = shl i32 %conv453, 8, !dbg !2034
  %299 = load i8*, i8** %req.addr, align 8, !dbg !2035
  %300 = load i32, i32* %offset, align 4, !dbg !2036
  %add455 = add nsw i32 %300, 4, !dbg !2037
  %idxprom456 = sext i32 %add455 to i64, !dbg !2035
  %arrayidx457 = getelementptr inbounds i8, i8* %299, i64 %idxprom456, !dbg !2035
  %301 = load i8, i8* %arrayidx457, align 1, !dbg !2035
  %conv458 = zext i8 %301 to i32, !dbg !2035
  %add459 = add nsw i32 %shl454, %conv458, !dbg !2038
  %conv460 = trunc i32 %add459 to i16, !dbg !2039
  store i16 %conv460, i16* %and449, align 2, !dbg !2030
  call void @llvm.dbg.declare(metadata i16* %or, metadata !2040, metadata !451), !dbg !2041
  %302 = load i8*, i8** %req.addr, align 8, !dbg !2042
  %303 = load i32, i32* %offset, align 4, !dbg !2043
  %add461 = add nsw i32 %303, 5, !dbg !2044
  %idxprom462 = sext i32 %add461 to i64, !dbg !2042
  %arrayidx463 = getelementptr inbounds i8, i8* %302, i64 %idxprom462, !dbg !2042
  %304 = load i8, i8* %arrayidx463, align 1, !dbg !2042
  %conv464 = zext i8 %304 to i32, !dbg !2042
  %shl465 = shl i32 %conv464, 8, !dbg !2045
  %305 = load i8*, i8** %req.addr, align 8, !dbg !2046
  %306 = load i32, i32* %offset, align 4, !dbg !2047
  %add466 = add nsw i32 %306, 6, !dbg !2048
  %idxprom467 = sext i32 %add466 to i64, !dbg !2046
  %arrayidx468 = getelementptr inbounds i8, i8* %305, i64 %idxprom467, !dbg !2046
  %307 = load i8, i8* %arrayidx468, align 1, !dbg !2046
  %conv469 = zext i8 %307 to i32, !dbg !2046
  %add470 = add nsw i32 %shl465, %conv469, !dbg !2049
  %conv471 = trunc i32 %add470 to i16, !dbg !2050
  store i16 %conv471, i16* %or, align 2, !dbg !2041
  %308 = load i16, i16* %data445, align 2, !dbg !2051
  %conv472 = zext i16 %308 to i32, !dbg !2051
  %309 = load i16, i16* %and449, align 2, !dbg !2052
  %conv473 = zext i16 %309 to i32, !dbg !2052
  %and474 = and i32 %conv472, %conv473, !dbg !2053
  %310 = load i16, i16* %or, align 2, !dbg !2054
  %conv475 = zext i16 %310 to i32, !dbg !2054
  %311 = load i16, i16* %and449, align 2, !dbg !2055
  %conv476 = zext i16 %311 to i32, !dbg !2055
  %neg = xor i32 %conv476, -1, !dbg !2056
  %and477 = and i32 %conv475, %neg, !dbg !2057
  %or478 = or i32 %and474, %and477, !dbg !2058
  %conv479 = trunc i32 %or478 to i16, !dbg !2059
  store i16 %conv479, i16* %data445, align 2, !dbg !2060
  %312 = load i16, i16* %data445, align 2, !dbg !2061
  %313 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2062
  %tab_registers480 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %313, i32 0, i32 11, !dbg !2063
  %314 = load i16*, i16** %tab_registers480, align 8, !dbg !2063
  %315 = load i32, i32* %mapping_address430, align 4, !dbg !2064
  %idxprom481 = sext i32 %315 to i64, !dbg !2062
  %arrayidx482 = getelementptr inbounds i16, i16* %314, i64 %idxprom481, !dbg !2062
  store i16 %312, i16* %arrayidx482, align 2, !dbg !2065
  %arraydecay483 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2066
  %316 = load i8*, i8** %req.addr, align 8, !dbg !2067
  %317 = load i32, i32* %req_length.addr, align 4, !dbg !2068
  %conv484 = sext i32 %317 to i64, !dbg !2068
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay483, i8* %316, i64 %conv484, i32 1, i1 false), !dbg !2066
  %318 = load i32, i32* %req_length.addr, align 4, !dbg !2069
  store i32 %318, i32* %rsp_length, align 4, !dbg !2070
  br label %if.end485

if.end485:                                        ; preds = %if.else444, %if.then440
  br label %sw.epilog, !dbg !2071

sw.bb486:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %nb487, metadata !2072, metadata !451), !dbg !2074
  %319 = load i8*, i8** %req.addr, align 8, !dbg !2075
  %320 = load i32, i32* %offset, align 4, !dbg !2076
  %add488 = add nsw i32 %320, 3, !dbg !2077
  %idxprom489 = sext i32 %add488 to i64, !dbg !2075
  %arrayidx490 = getelementptr inbounds i8, i8* %319, i64 %idxprom489, !dbg !2075
  %321 = load i8, i8* %arrayidx490, align 1, !dbg !2075
  %conv491 = zext i8 %321 to i32, !dbg !2075
  %shl492 = shl i32 %conv491, 8, !dbg !2078
  %322 = load i8*, i8** %req.addr, align 8, !dbg !2079
  %323 = load i32, i32* %offset, align 4, !dbg !2080
  %add493 = add nsw i32 %323, 4, !dbg !2081
  %idxprom494 = sext i32 %add493 to i64, !dbg !2079
  %arrayidx495 = getelementptr inbounds i8, i8* %322, i64 %idxprom494, !dbg !2079
  %324 = load i8, i8* %arrayidx495, align 1, !dbg !2079
  %conv496 = zext i8 %324 to i32, !dbg !2079
  %add497 = add nsw i32 %shl492, %conv496, !dbg !2082
  store i32 %add497, i32* %nb487, align 4, !dbg !2074
  call void @llvm.dbg.declare(metadata i16* %address_write, metadata !2083, metadata !451), !dbg !2084
  %325 = load i8*, i8** %req.addr, align 8, !dbg !2085
  %326 = load i32, i32* %offset, align 4, !dbg !2086
  %add498 = add nsw i32 %326, 5, !dbg !2087
  %idxprom499 = sext i32 %add498 to i64, !dbg !2085
  %arrayidx500 = getelementptr inbounds i8, i8* %325, i64 %idxprom499, !dbg !2085
  %327 = load i8, i8* %arrayidx500, align 1, !dbg !2085
  %conv501 = zext i8 %327 to i32, !dbg !2085
  %shl502 = shl i32 %conv501, 8, !dbg !2088
  %328 = load i8*, i8** %req.addr, align 8, !dbg !2089
  %329 = load i32, i32* %offset, align 4, !dbg !2090
  %add503 = add nsw i32 %329, 6, !dbg !2091
  %idxprom504 = sext i32 %add503 to i64, !dbg !2089
  %arrayidx505 = getelementptr inbounds i8, i8* %328, i64 %idxprom504, !dbg !2089
  %330 = load i8, i8* %arrayidx505, align 1, !dbg !2089
  %conv506 = zext i8 %330 to i32, !dbg !2089
  %add507 = add nsw i32 %shl502, %conv506, !dbg !2092
  %conv508 = trunc i32 %add507 to i16, !dbg !2093
  store i16 %conv508, i16* %address_write, align 2, !dbg !2084
  call void @llvm.dbg.declare(metadata i32* %nb_write, metadata !2094, metadata !451), !dbg !2095
  %331 = load i8*, i8** %req.addr, align 8, !dbg !2096
  %332 = load i32, i32* %offset, align 4, !dbg !2097
  %add509 = add nsw i32 %332, 7, !dbg !2098
  %idxprom510 = sext i32 %add509 to i64, !dbg !2096
  %arrayidx511 = getelementptr inbounds i8, i8* %331, i64 %idxprom510, !dbg !2096
  %333 = load i8, i8* %arrayidx511, align 1, !dbg !2096
  %conv512 = zext i8 %333 to i32, !dbg !2096
  %shl513 = shl i32 %conv512, 8, !dbg !2099
  %334 = load i8*, i8** %req.addr, align 8, !dbg !2100
  %335 = load i32, i32* %offset, align 4, !dbg !2101
  %add514 = add nsw i32 %335, 8, !dbg !2102
  %idxprom515 = sext i32 %add514 to i64, !dbg !2100
  %arrayidx516 = getelementptr inbounds i8, i8* %334, i64 %idxprom515, !dbg !2100
  %336 = load i8, i8* %arrayidx516, align 1, !dbg !2100
  %conv517 = zext i8 %336 to i32, !dbg !2100
  %add518 = add nsw i32 %shl513, %conv517, !dbg !2103
  store i32 %add518, i32* %nb_write, align 4, !dbg !2095
  call void @llvm.dbg.declare(metadata i32* %nb_write_bytes, metadata !2104, metadata !451), !dbg !2105
  %337 = load i8*, i8** %req.addr, align 8, !dbg !2106
  %338 = load i32, i32* %offset, align 4, !dbg !2107
  %add519 = add nsw i32 %338, 9, !dbg !2108
  %idxprom520 = sext i32 %add519 to i64, !dbg !2106
  %arrayidx521 = getelementptr inbounds i8, i8* %337, i64 %idxprom520, !dbg !2106
  %339 = load i8, i8* %arrayidx521, align 1, !dbg !2106
  %conv522 = zext i8 %339 to i32, !dbg !2106
  store i32 %conv522, i32* %nb_write_bytes, align 4, !dbg !2105
  call void @llvm.dbg.declare(metadata i32* %mapping_address523, metadata !2109, metadata !451), !dbg !2110
  %340 = load i16, i16* %address, align 2, !dbg !2111
  %conv524 = zext i16 %340 to i32, !dbg !2111
  %341 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2112
  %start_registers525 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %341, i32 0, i32 7, !dbg !2113
  %342 = load i32, i32* %start_registers525, align 4, !dbg !2113
  %sub526 = sub nsw i32 %conv524, %342, !dbg !2114
  store i32 %sub526, i32* %mapping_address523, align 4, !dbg !2110
  call void @llvm.dbg.declare(metadata i32* %mapping_address_write, metadata !2115, metadata !451), !dbg !2116
  %343 = load i16, i16* %address_write, align 2, !dbg !2117
  %conv527 = zext i16 %343 to i32, !dbg !2117
  %344 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2118
  %start_registers528 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %344, i32 0, i32 7, !dbg !2119
  %345 = load i32, i32* %start_registers528, align 4, !dbg !2119
  %sub529 = sub nsw i32 %conv527, %345, !dbg !2120
  store i32 %sub529, i32* %mapping_address_write, align 4, !dbg !2116
  %346 = load i32, i32* %nb_write, align 4, !dbg !2121
  %cmp530 = icmp slt i32 %346, 1, !dbg !2123
  br i1 %cmp530, label %if.then544, label %lor.lhs.false532, !dbg !2124

lor.lhs.false532:                                 ; preds = %sw.bb486
  %347 = load i32, i32* %nb_write, align 4, !dbg !2125
  %cmp533 = icmp slt i32 121, %347, !dbg !2126
  br i1 %cmp533, label %if.then544, label %lor.lhs.false535, !dbg !2127

lor.lhs.false535:                                 ; preds = %lor.lhs.false532
  %348 = load i32, i32* %nb487, align 4, !dbg !2128
  %cmp536 = icmp slt i32 %348, 1, !dbg !2129
  br i1 %cmp536, label %if.then544, label %lor.lhs.false538, !dbg !2130

lor.lhs.false538:                                 ; preds = %lor.lhs.false535
  %349 = load i32, i32* %nb487, align 4, !dbg !2131
  %cmp539 = icmp slt i32 125, %349, !dbg !2132
  br i1 %cmp539, label %if.then544, label %lor.lhs.false541, !dbg !2133

lor.lhs.false541:                                 ; preds = %lor.lhs.false538
  %350 = load i32, i32* %nb_write_bytes, align 4, !dbg !2134
  %351 = load i32, i32* %nb_write, align 4, !dbg !2135
  %mul = mul nsw i32 %351, 2, !dbg !2136
  %cmp542 = icmp ne i32 %350, %mul, !dbg !2137
  br i1 %cmp542, label %if.then544, label %if.else547, !dbg !2138

if.then544:                                       ; preds = %lor.lhs.false541, %lor.lhs.false538, %lor.lhs.false535, %lor.lhs.false532, %sw.bb486
  %352 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2139
  %arraydecay545 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2141
  %353 = load i32, i32* %nb_write, align 4, !dbg !2142
  %354 = load i32, i32* %nb487, align 4, !dbg !2143
  %call546 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %352, %struct._sft* %sft, i32 3, i8* %arraydecay545, i32 1, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.40, i32 0, i32 0), i32 %353, i32 %354, i32 121, i32 125), !dbg !2144
  store i32 %call546, i32* %rsp_length, align 4, !dbg !2145
  br label %if.end647, !dbg !2146

if.else547:                                       ; preds = %lor.lhs.false541
  %355 = load i32, i32* %mapping_address523, align 4, !dbg !2147
  %cmp548 = icmp slt i32 %355, 0, !dbg !2149
  br i1 %cmp548, label %if.then563, label %lor.lhs.false550, !dbg !2150

lor.lhs.false550:                                 ; preds = %if.else547
  %356 = load i32, i32* %mapping_address523, align 4, !dbg !2151
  %357 = load i32, i32* %nb487, align 4, !dbg !2152
  %add551 = add nsw i32 %356, %357, !dbg !2153
  %358 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2154
  %nb_registers552 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %358, i32 0, i32 6, !dbg !2155
  %359 = load i32, i32* %nb_registers552, align 8, !dbg !2155
  %cmp553 = icmp sgt i32 %add551, %359, !dbg !2156
  br i1 %cmp553, label %if.then563, label %lor.lhs.false555, !dbg !2157

lor.lhs.false555:                                 ; preds = %lor.lhs.false550
  %360 = load i32, i32* %mapping_address523, align 4, !dbg !2158
  %cmp556 = icmp slt i32 %360, 0, !dbg !2159
  br i1 %cmp556, label %if.then563, label %lor.lhs.false558, !dbg !2160

lor.lhs.false558:                                 ; preds = %lor.lhs.false555
  %361 = load i32, i32* %mapping_address_write, align 4, !dbg !2161
  %362 = load i32, i32* %nb_write, align 4, !dbg !2162
  %add559 = add nsw i32 %361, %362, !dbg !2163
  %363 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2164
  %nb_registers560 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %363, i32 0, i32 6, !dbg !2165
  %364 = load i32, i32* %nb_registers560, align 8, !dbg !2165
  %cmp561 = icmp sgt i32 %add559, %364, !dbg !2166
  br i1 %cmp561, label %if.then563, label %if.else584, !dbg !2167

if.then563:                                       ; preds = %lor.lhs.false558, %lor.lhs.false555, %lor.lhs.false550, %if.else547
  %365 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2168
  %arraydecay564 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2170
  %366 = load i32, i32* %mapping_address523, align 4, !dbg !2171
  %cmp565 = icmp slt i32 %366, 0, !dbg !2172
  br i1 %cmp565, label %cond.true567, label %cond.false569, !dbg !2171

cond.true567:                                     ; preds = %if.then563
  %367 = load i16, i16* %address, align 2, !dbg !2173
  %conv568 = zext i16 %367 to i32, !dbg !2173
  br label %cond.end572, !dbg !2171

cond.false569:                                    ; preds = %if.then563
  %368 = load i16, i16* %address, align 2, !dbg !2174
  %conv570 = zext i16 %368 to i32, !dbg !2174
  %369 = load i32, i32* %nb487, align 4, !dbg !2175
  %add571 = add nsw i32 %conv570, %369, !dbg !2176
  br label %cond.end572, !dbg !2171

cond.end572:                                      ; preds = %cond.false569, %cond.true567
  %cond573 = phi i32 [ %conv568, %cond.true567 ], [ %add571, %cond.false569 ], !dbg !2171
  %370 = load i32, i32* %mapping_address_write, align 4, !dbg !2177
  %cmp574 = icmp slt i32 %370, 0, !dbg !2178
  br i1 %cmp574, label %cond.true576, label %cond.false578, !dbg !2177

cond.true576:                                     ; preds = %cond.end572
  %371 = load i16, i16* %address_write, align 2, !dbg !2179
  %conv577 = zext i16 %371 to i32, !dbg !2179
  br label %cond.end581, !dbg !2177

cond.false578:                                    ; preds = %cond.end572
  %372 = load i16, i16* %address_write, align 2, !dbg !2180
  %conv579 = zext i16 %372 to i32, !dbg !2180
  %373 = load i32, i32* %nb_write, align 4, !dbg !2181
  %add580 = add nsw i32 %conv579, %373, !dbg !2182
  br label %cond.end581, !dbg !2177

cond.end581:                                      ; preds = %cond.false578, %cond.true576
  %cond582 = phi i32 [ %conv577, %cond.true576 ], [ %add580, %cond.false578 ], !dbg !2177
  %call583 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %365, %struct._sft* %sft, i32 2, i8* %arraydecay564, i32 0, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.41, i32 0, i32 0), i32 %cond573, i32 %cond582), !dbg !2183
  store i32 %call583, i32* %rsp_length, align 4, !dbg !2184
  br label %if.end646, !dbg !2185

if.else584:                                       ; preds = %lor.lhs.false558
  call void @llvm.dbg.declare(metadata i32* %i585, metadata !2186, metadata !451), !dbg !2188
  call void @llvm.dbg.declare(metadata i32* %j586, metadata !2189, metadata !451), !dbg !2190
  %374 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2191
  %backend587 = getelementptr inbounds %struct._modbus, %struct._modbus* %374, i32 0, i32 7, !dbg !2192
  %375 = load %struct._modbus_backend*, %struct._modbus_backend** %backend587, align 8, !dbg !2192
  %build_response_basis588 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %375, i32 0, i32 6, !dbg !2193
  %376 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis588, align 8, !dbg !2193
  %arraydecay589 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2194
  %call590 = call i32 %376(%struct._sft* %sft, i8* %arraydecay589), !dbg !2191
  store i32 %call590, i32* %rsp_length, align 4, !dbg !2195
  %377 = load i32, i32* %nb487, align 4, !dbg !2196
  %shl591 = shl i32 %377, 1, !dbg !2197
  %conv592 = trunc i32 %shl591 to i8, !dbg !2196
  %378 = load i32, i32* %rsp_length, align 4, !dbg !2198
  %inc593 = add nsw i32 %378, 1, !dbg !2198
  store i32 %inc593, i32* %rsp_length, align 4, !dbg !2198
  %idxprom594 = sext i32 %378 to i64, !dbg !2199
  %arrayidx595 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom594, !dbg !2199
  store i8 %conv592, i8* %arrayidx595, align 1, !dbg !2200
  %379 = load i32, i32* %mapping_address_write, align 4, !dbg !2201
  store i32 %379, i32* %i585, align 4, !dbg !2203
  store i32 10, i32* %j586, align 4, !dbg !2204
  br label %for.cond596, !dbg !2205

for.cond596:                                      ; preds = %for.inc616, %if.else584
  %380 = load i32, i32* %i585, align 4, !dbg !2206
  %381 = load i32, i32* %mapping_address_write, align 4, !dbg !2208
  %382 = load i32, i32* %nb_write, align 4, !dbg !2209
  %add597 = add nsw i32 %381, %382, !dbg !2210
  %cmp598 = icmp slt i32 %380, %add597, !dbg !2211
  br i1 %cmp598, label %for.body600, label %for.end619, !dbg !2212

for.body600:                                      ; preds = %for.cond596
  %383 = load i8*, i8** %req.addr, align 8, !dbg !2213
  %384 = load i32, i32* %offset, align 4, !dbg !2215
  %385 = load i32, i32* %j586, align 4, !dbg !2216
  %add601 = add nsw i32 %384, %385, !dbg !2217
  %idxprom602 = sext i32 %add601 to i64, !dbg !2213
  %arrayidx603 = getelementptr inbounds i8, i8* %383, i64 %idxprom602, !dbg !2213
  %386 = load i8, i8* %arrayidx603, align 1, !dbg !2213
  %conv604 = zext i8 %386 to i32, !dbg !2213
  %shl605 = shl i32 %conv604, 8, !dbg !2218
  %387 = load i8*, i8** %req.addr, align 8, !dbg !2219
  %388 = load i32, i32* %offset, align 4, !dbg !2220
  %389 = load i32, i32* %j586, align 4, !dbg !2221
  %add606 = add nsw i32 %388, %389, !dbg !2222
  %add607 = add nsw i32 %add606, 1, !dbg !2223
  %idxprom608 = sext i32 %add607 to i64, !dbg !2219
  %arrayidx609 = getelementptr inbounds i8, i8* %387, i64 %idxprom608, !dbg !2219
  %390 = load i8, i8* %arrayidx609, align 1, !dbg !2219
  %conv610 = zext i8 %390 to i32, !dbg !2219
  %add611 = add nsw i32 %shl605, %conv610, !dbg !2224
  %conv612 = trunc i32 %add611 to i16, !dbg !2225
  %391 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2226
  %tab_registers613 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %391, i32 0, i32 11, !dbg !2227
  %392 = load i16*, i16** %tab_registers613, align 8, !dbg !2227
  %393 = load i32, i32* %i585, align 4, !dbg !2228
  %idxprom614 = sext i32 %393 to i64, !dbg !2226
  %arrayidx615 = getelementptr inbounds i16, i16* %392, i64 %idxprom614, !dbg !2226
  store i16 %conv612, i16* %arrayidx615, align 2, !dbg !2229
  br label %for.inc616, !dbg !2230

for.inc616:                                       ; preds = %for.body600
  %394 = load i32, i32* %i585, align 4, !dbg !2231
  %inc617 = add nsw i32 %394, 1, !dbg !2231
  store i32 %inc617, i32* %i585, align 4, !dbg !2231
  %395 = load i32, i32* %j586, align 4, !dbg !2232
  %add618 = add nsw i32 %395, 2, !dbg !2232
  store i32 %add618, i32* %j586, align 4, !dbg !2232
  br label %for.cond596, !dbg !2233, !llvm.loop !2234

for.end619:                                       ; preds = %for.cond596
  %396 = load i32, i32* %mapping_address523, align 4, !dbg !2236
  store i32 %396, i32* %i585, align 4, !dbg !2238
  br label %for.cond620, !dbg !2239

for.cond620:                                      ; preds = %for.inc643, %for.end619
  %397 = load i32, i32* %i585, align 4, !dbg !2240
  %398 = load i32, i32* %mapping_address523, align 4, !dbg !2242
  %399 = load i32, i32* %nb487, align 4, !dbg !2243
  %add621 = add nsw i32 %398, %399, !dbg !2244
  %cmp622 = icmp slt i32 %397, %add621, !dbg !2245
  br i1 %cmp622, label %for.body624, label %for.end645, !dbg !2246

for.body624:                                      ; preds = %for.cond620
  %400 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2247
  %tab_registers625 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %400, i32 0, i32 11, !dbg !2249
  %401 = load i16*, i16** %tab_registers625, align 8, !dbg !2249
  %402 = load i32, i32* %i585, align 4, !dbg !2250
  %idxprom626 = sext i32 %402 to i64, !dbg !2247
  %arrayidx627 = getelementptr inbounds i16, i16* %401, i64 %idxprom626, !dbg !2247
  %403 = load i16, i16* %arrayidx627, align 2, !dbg !2247
  %conv628 = zext i16 %403 to i32, !dbg !2247
  %shr629 = ashr i32 %conv628, 8, !dbg !2251
  %conv630 = trunc i32 %shr629 to i8, !dbg !2247
  %404 = load i32, i32* %rsp_length, align 4, !dbg !2252
  %inc631 = add nsw i32 %404, 1, !dbg !2252
  store i32 %inc631, i32* %rsp_length, align 4, !dbg !2252
  %idxprom632 = sext i32 %404 to i64, !dbg !2253
  %arrayidx633 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom632, !dbg !2253
  store i8 %conv630, i8* %arrayidx633, align 1, !dbg !2254
  %405 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !2255
  %tab_registers634 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %405, i32 0, i32 11, !dbg !2256
  %406 = load i16*, i16** %tab_registers634, align 8, !dbg !2256
  %407 = load i32, i32* %i585, align 4, !dbg !2257
  %idxprom635 = sext i32 %407 to i64, !dbg !2255
  %arrayidx636 = getelementptr inbounds i16, i16* %406, i64 %idxprom635, !dbg !2255
  %408 = load i16, i16* %arrayidx636, align 2, !dbg !2255
  %conv637 = zext i16 %408 to i32, !dbg !2255
  %and638 = and i32 %conv637, 255, !dbg !2258
  %conv639 = trunc i32 %and638 to i8, !dbg !2255
  %409 = load i32, i32* %rsp_length, align 4, !dbg !2259
  %inc640 = add nsw i32 %409, 1, !dbg !2259
  store i32 %inc640, i32* %rsp_length, align 4, !dbg !2259
  %idxprom641 = sext i32 %409 to i64, !dbg !2260
  %arrayidx642 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom641, !dbg !2260
  store i8 %conv639, i8* %arrayidx642, align 1, !dbg !2261
  br label %for.inc643, !dbg !2262

for.inc643:                                       ; preds = %for.body624
  %410 = load i32, i32* %i585, align 4, !dbg !2263
  %inc644 = add nsw i32 %410, 1, !dbg !2263
  store i32 %inc644, i32* %i585, align 4, !dbg !2263
  br label %for.cond620, !dbg !2264, !llvm.loop !2265

for.end645:                                       ; preds = %for.cond620
  br label %if.end646

if.end646:                                        ; preds = %for.end645, %cond.end581
  br label %if.end647

if.end647:                                        ; preds = %if.end646, %if.then544
  br label %sw.epilog, !dbg !2267

sw.default:                                       ; preds = %if.end
  %411 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2268
  %arraydecay648 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2269
  %412 = load i32, i32* %function, align 4, !dbg !2270
  %call649 = call i32 (%struct._modbus*, %struct._sft*, i32, i8*, i32, i8*, ...) @response_exception(%struct._modbus* %411, %struct._sft* %sft, i32 1, i8* %arraydecay648, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.42, i32 0, i32 0), i32 %412), !dbg !2271
  store i32 %call649, i32* %rsp_length, align 4, !dbg !2272
  br label %sw.epilog, !dbg !2273

sw.epilog:                                        ; preds = %sw.default, %if.end647, %if.end485, %sw.bb401, %if.end400, %if.end318, %if.end259, %if.end225, %if.end179, %if.end83
  %413 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2274
  %backend650 = getelementptr inbounds %struct._modbus, %struct._modbus* %413, i32 0, i32 7, !dbg !2275
  %414 = load %struct._modbus_backend*, %struct._modbus_backend** %backend650, align 8, !dbg !2275
  %backend_type = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %414, i32 0, i32 0, !dbg !2276
  %415 = load i32, i32* %backend_type, align 8, !dbg !2276
  %cmp651 = icmp eq i32 %415, 0, !dbg !2277
  br i1 %cmp651, label %land.lhs.true, label %cond.false656, !dbg !2278

land.lhs.true:                                    ; preds = %sw.epilog
  %416 = load i32, i32* %slave, align 4, !dbg !2279
  %cmp653 = icmp eq i32 %416, 0, !dbg !2280
  br i1 %cmp653, label %cond.true655, label %cond.false656, !dbg !2281

cond.true655:                                     ; preds = %land.lhs.true
  br label %cond.end659, !dbg !2281

cond.false656:                                    ; preds = %land.lhs.true, %sw.epilog
  %417 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2282
  %arraydecay657 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2283
  %418 = load i32, i32* %rsp_length, align 4, !dbg !2284
  %call658 = call i32 @send_msg(%struct._modbus* %417, i8* %arraydecay657, i32 %418), !dbg !2285
  br label %cond.end659, !dbg !2281

cond.end659:                                      ; preds = %cond.false656, %cond.true655
  %cond660 = phi i32 [ 0, %cond.true655 ], [ %call658, %cond.false656 ], !dbg !2281
  store i32 %cond660, i32* %retval, align 4, !dbg !2286
  br label %return, !dbg !2286

return:                                           ; preds = %cond.end659, %if.end427, %if.then
  %419 = load i32, i32* %retval, align 4, !dbg !2287
  ret i32 %419, !dbg !2287
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @response_exception(%struct._modbus* %ctx, %struct._sft* %sft, i32 %exception_code, i8* %rsp, i32 %to_flush, i8* %template, ...) #0 !dbg !2288 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  %sft.addr = alloca %struct._sft*, align 8
  %exception_code.addr = alloca i32, align 4
  %rsp.addr = alloca i8*, align 8
  %to_flush.addr = alloca i32, align 4
  %template.addr = alloca i8*, align 8
  %rsp_length = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2291, metadata !451), !dbg !2292
  store %struct._sft* %sft, %struct._sft** %sft.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sft** %sft.addr, metadata !2293, metadata !451), !dbg !2294
  store i32 %exception_code, i32* %exception_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exception_code.addr, metadata !2295, metadata !451), !dbg !2296
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !2297, metadata !451), !dbg !2298
  store i32 %to_flush, i32* %to_flush.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_flush.addr, metadata !2299, metadata !451), !dbg !2300
  store i8* %template, i8** %template.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %template.addr, metadata !2301, metadata !451), !dbg !2302
  call void @llvm.dbg.declare(metadata i32* %rsp_length, metadata !2303, metadata !451), !dbg !2304
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2305
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 2, !dbg !2307
  %1 = load i32, i32* %debug, align 8, !dbg !2307
  %tobool = icmp ne i32 %1, 0, !dbg !2305
  br i1 %tobool, label %if.then, label %if.end, !dbg !2308

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !2309, metadata !451), !dbg !2324
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0, !dbg !2325
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !2325
  call void @llvm.va_start(i8* %arraydecay1), !dbg !2325
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2326
  %3 = load i8*, i8** %template.addr, align 8, !dbg !2327
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0, !dbg !2328
  %call = call i32 @vfprintf(%struct._IO_FILE* %2, i8* %3, %struct.__va_list_tag* %arraydecay2), !dbg !2329
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0, !dbg !2330
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !2330
  call void @llvm.va_end(i8* %arraydecay34), !dbg !2330
  br label %if.end, !dbg !2331

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %to_flush.addr, align 4, !dbg !2332
  %tobool5 = icmp ne i32 %4, 0, !dbg !2332
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !2334

if.then6:                                         ; preds = %if.end
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2335
  call void @_sleep_response_timeout(%struct._modbus* %5), !dbg !2337
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2338
  %call7 = call i32 @modbus_flush(%struct._modbus* %6), !dbg !2339
  br label %if.end8, !dbg !2340

if.end8:                                          ; preds = %if.then6, %if.end
  %7 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !2341
  %function = getelementptr inbounds %struct._sft, %struct._sft* %7, i32 0, i32 1, !dbg !2342
  %8 = load i32, i32* %function, align 4, !dbg !2342
  %add = add nsw i32 %8, 128, !dbg !2343
  %9 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !2344
  %function9 = getelementptr inbounds %struct._sft, %struct._sft* %9, i32 0, i32 1, !dbg !2345
  store i32 %add, i32* %function9, align 4, !dbg !2346
  %10 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2347
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %10, i32 0, i32 7, !dbg !2348
  %11 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !2348
  %build_response_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %11, i32 0, i32 6, !dbg !2349
  %12 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis, align 8, !dbg !2349
  %13 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !2350
  %14 = load i8*, i8** %rsp.addr, align 8, !dbg !2351
  %call10 = call i32 %12(%struct._sft* %13, i8* %14), !dbg !2347
  store i32 %call10, i32* %rsp_length, align 4, !dbg !2352
  %15 = load i32, i32* %exception_code.addr, align 4, !dbg !2353
  %conv = trunc i32 %15 to i8, !dbg !2353
  %16 = load i8*, i8** %rsp.addr, align 8, !dbg !2354
  %17 = load i32, i32* %rsp_length, align 4, !dbg !2355
  %inc = add nsw i32 %17, 1, !dbg !2355
  store i32 %inc, i32* %rsp_length, align 4, !dbg !2355
  %idxprom = sext i32 %17 to i64, !dbg !2354
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 %idxprom, !dbg !2354
  store i8 %conv, i8* %arrayidx, align 1, !dbg !2356
  %18 = load i32, i32* %rsp_length, align 4, !dbg !2357
  ret i32 %18, !dbg !2358
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @response_io_status(i8* %tab_io_status, i32 %address, i32 %nb, i8* %rsp, i32 %offset) #0 !dbg !2359 {
entry:
  %tab_io_status.addr = alloca i8*, align 8
  %address.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %rsp.addr = alloca i8*, align 8
  %offset.addr = alloca i32, align 4
  %shift = alloca i32, align 4
  %one_byte = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %tab_io_status, i8** %tab_io_status.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tab_io_status.addr, metadata !2362, metadata !451), !dbg !2363
  store i32 %address, i32* %address.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %address.addr, metadata !2364, metadata !451), !dbg !2365
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !2366, metadata !451), !dbg !2367
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !2368, metadata !451), !dbg !2369
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !2370, metadata !451), !dbg !2371
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !2372, metadata !451), !dbg !2373
  store i32 0, i32* %shift, align 4, !dbg !2373
  call void @llvm.dbg.declare(metadata i32* %one_byte, metadata !2374, metadata !451), !dbg !2375
  store i32 0, i32* %one_byte, align 4, !dbg !2375
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2376, metadata !451), !dbg !2377
  %0 = load i32, i32* %address.addr, align 4, !dbg !2378
  store i32 %0, i32* %i, align 4, !dbg !2380
  br label %for.cond, !dbg !2381

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2382
  %2 = load i32, i32* %address.addr, align 4, !dbg !2384
  %3 = load i32, i32* %nb.addr, align 4, !dbg !2385
  %add = add nsw i32 %2, %3, !dbg !2386
  %cmp = icmp slt i32 %1, %add, !dbg !2387
  br i1 %cmp, label %for.body, label %for.end, !dbg !2388

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %tab_io_status.addr, align 8, !dbg !2389
  %5 = load i32, i32* %i, align 4, !dbg !2391
  %idxprom = sext i32 %5 to i64, !dbg !2389
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !2389
  %6 = load i8, i8* %arrayidx, align 1, !dbg !2389
  %conv = zext i8 %6 to i32, !dbg !2389
  %7 = load i32, i32* %shift, align 4, !dbg !2392
  %shl = shl i32 %conv, %7, !dbg !2393
  %8 = load i32, i32* %one_byte, align 4, !dbg !2394
  %or = or i32 %8, %shl, !dbg !2394
  store i32 %or, i32* %one_byte, align 4, !dbg !2394
  %9 = load i32, i32* %shift, align 4, !dbg !2395
  %cmp1 = icmp eq i32 %9, 7, !dbg !2397
  br i1 %cmp1, label %if.then, label %if.else, !dbg !2398

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %one_byte, align 4, !dbg !2399
  %conv3 = trunc i32 %10 to i8, !dbg !2399
  %11 = load i8*, i8** %rsp.addr, align 8, !dbg !2401
  %12 = load i32, i32* %offset.addr, align 4, !dbg !2402
  %inc = add nsw i32 %12, 1, !dbg !2402
  store i32 %inc, i32* %offset.addr, align 4, !dbg !2402
  %idxprom4 = sext i32 %12 to i64, !dbg !2401
  %arrayidx5 = getelementptr inbounds i8, i8* %11, i64 %idxprom4, !dbg !2401
  store i8 %conv3, i8* %arrayidx5, align 1, !dbg !2403
  store i32 0, i32* %shift, align 4, !dbg !2404
  store i32 0, i32* %one_byte, align 4, !dbg !2405
  br label %if.end, !dbg !2406

if.else:                                          ; preds = %for.body
  %13 = load i32, i32* %shift, align 4, !dbg !2407
  %inc6 = add nsw i32 %13, 1, !dbg !2407
  store i32 %inc6, i32* %shift, align 4, !dbg !2407
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !2409

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !2410
  %inc7 = add nsw i32 %14, 1, !dbg !2410
  store i32 %inc7, i32* %i, align 4, !dbg !2410
  br label %for.cond, !dbg !2411, !llvm.loop !2412

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %shift, align 4, !dbg !2414
  %cmp8 = icmp ne i32 %15, 0, !dbg !2416
  br i1 %cmp8, label %if.then10, label %if.end15, !dbg !2417

if.then10:                                        ; preds = %for.end
  %16 = load i32, i32* %one_byte, align 4, !dbg !2418
  %conv11 = trunc i32 %16 to i8, !dbg !2418
  %17 = load i8*, i8** %rsp.addr, align 8, !dbg !2419
  %18 = load i32, i32* %offset.addr, align 4, !dbg !2420
  %inc12 = add nsw i32 %18, 1, !dbg !2420
  store i32 %inc12, i32* %offset.addr, align 4, !dbg !2420
  %idxprom13 = sext i32 %18 to i64, !dbg !2419
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i64 %idxprom13, !dbg !2419
  store i8 %conv11, i8* %arrayidx14, align 1, !dbg !2421
  br label %if.end15, !dbg !2419

if.end15:                                         ; preds = %if.then10, %for.end
  %19 = load i32, i32* %offset.addr, align 4, !dbg !2422
  ret i32 %19, !dbg !2423
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

declare i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_reply_exception(%struct._modbus* %ctx, i8* %req, i32 %exception_code) #0 !dbg !2424 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %req.addr = alloca i8*, align 8
  %exception_code.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %slave = alloca i32, align 4
  %function = alloca i32, align 4
  %rsp = alloca [260 x i8], align 16
  %rsp_length = alloca i32, align 4
  %dummy_length = alloca i32, align 4
  %sft = alloca %struct._sft, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2427, metadata !451), !dbg !2428
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !2429, metadata !451), !dbg !2430
  store i32 %exception_code, i32* %exception_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exception_code.addr, metadata !2431, metadata !451), !dbg !2432
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2433, metadata !451), !dbg !2434
  call void @llvm.dbg.declare(metadata i32* %slave, metadata !2435, metadata !451), !dbg !2436
  call void @llvm.dbg.declare(metadata i32* %function, metadata !2437, metadata !451), !dbg !2438
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !2439, metadata !451), !dbg !2440
  call void @llvm.dbg.declare(metadata i32* %rsp_length, metadata !2441, metadata !451), !dbg !2442
  call void @llvm.dbg.declare(metadata i32* %dummy_length, metadata !2443, metadata !451), !dbg !2444
  store i32 99, i32* %dummy_length, align 4, !dbg !2444
  call void @llvm.dbg.declare(metadata %struct._sft* %sft, metadata !2445, metadata !451), !dbg !2446
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2447
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !2449
  br i1 %cmp, label %if.then, label %if.end, !dbg !2450

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !2451
  store i32 22, i32* %call, align 4, !dbg !2453
  store i32 -1, i32* %retval, align 4, !dbg !2454
  br label %return, !dbg !2454

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2455
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !2456
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !2456
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 1, !dbg !2457
  %3 = load i32, i32* %header_length, align 4, !dbg !2457
  store i32 %3, i32* %offset, align 4, !dbg !2458
  %4 = load i8*, i8** %req.addr, align 8, !dbg !2459
  %5 = load i32, i32* %offset, align 4, !dbg !2460
  %sub = sub nsw i32 %5, 1, !dbg !2461
  %idxprom = sext i32 %sub to i64, !dbg !2459
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !2459
  %6 = load i8, i8* %arrayidx, align 1, !dbg !2459
  %conv = zext i8 %6 to i32, !dbg !2459
  store i32 %conv, i32* %slave, align 4, !dbg !2462
  %7 = load i8*, i8** %req.addr, align 8, !dbg !2463
  %8 = load i32, i32* %offset, align 4, !dbg !2464
  %idxprom1 = sext i32 %8 to i64, !dbg !2463
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 %idxprom1, !dbg !2463
  %9 = load i8, i8* %arrayidx2, align 1, !dbg !2463
  %conv3 = zext i8 %9 to i32, !dbg !2463
  store i32 %conv3, i32* %function, align 4, !dbg !2465
  %10 = load i32, i32* %slave, align 4, !dbg !2466
  %slave4 = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 0, !dbg !2467
  store i32 %10, i32* %slave4, align 4, !dbg !2468
  %11 = load i32, i32* %function, align 4, !dbg !2469
  %add = add nsw i32 %11, 128, !dbg !2470
  %function5 = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 1, !dbg !2471
  store i32 %add, i32* %function5, align 4, !dbg !2472
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2473
  %backend6 = getelementptr inbounds %struct._modbus, %struct._modbus* %12, i32 0, i32 7, !dbg !2474
  %13 = load %struct._modbus_backend*, %struct._modbus_backend** %backend6, align 8, !dbg !2474
  %prepare_response_tid = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %13, i32 0, i32 7, !dbg !2475
  %14 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %prepare_response_tid, align 8, !dbg !2475
  %15 = load i8*, i8** %req.addr, align 8, !dbg !2476
  %call7 = call i32 %14(i8* %15, i32* %dummy_length), !dbg !2473
  %t_id = getelementptr inbounds %struct._sft, %struct._sft* %sft, i32 0, i32 2, !dbg !2477
  store i32 %call7, i32* %t_id, align 4, !dbg !2478
  %16 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2479
  %backend8 = getelementptr inbounds %struct._modbus, %struct._modbus* %16, i32 0, i32 7, !dbg !2480
  %17 = load %struct._modbus_backend*, %struct._modbus_backend** %backend8, align 8, !dbg !2480
  %build_response_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %17, i32 0, i32 6, !dbg !2481
  %18 = load i32 (%struct._sft*, i8*)*, i32 (%struct._sft*, i8*)** %build_response_basis, align 8, !dbg !2481
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2482
  %call9 = call i32 %18(%struct._sft* %sft, i8* %arraydecay), !dbg !2479
  store i32 %call9, i32* %rsp_length, align 4, !dbg !2483
  %19 = load i32, i32* %exception_code.addr, align 4, !dbg !2484
  %cmp10 = icmp ult i32 %19, 12, !dbg !2486
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !2487

if.then12:                                        ; preds = %if.end
  %20 = load i32, i32* %exception_code.addr, align 4, !dbg !2488
  %conv13 = trunc i32 %20 to i8, !dbg !2488
  %21 = load i32, i32* %rsp_length, align 4, !dbg !2490
  %inc = add nsw i32 %21, 1, !dbg !2490
  store i32 %inc, i32* %rsp_length, align 4, !dbg !2490
  %idxprom14 = sext i32 %21 to i64, !dbg !2491
  %arrayidx15 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom14, !dbg !2491
  store i8 %conv13, i8* %arrayidx15, align 1, !dbg !2492
  %22 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2493
  %arraydecay16 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2494
  %23 = load i32, i32* %rsp_length, align 4, !dbg !2495
  %call17 = call i32 @send_msg(%struct._modbus* %22, i8* %arraydecay16, i32 %23), !dbg !2496
  store i32 %call17, i32* %retval, align 4, !dbg !2497
  br label %return, !dbg !2497

if.else:                                          ; preds = %if.end
  %call18 = call i32* @__errno_location() #9, !dbg !2498
  store i32 22, i32* %call18, align 4, !dbg !2500
  store i32 -1, i32* %retval, align 4, !dbg !2501
  br label %return, !dbg !2501

return:                                           ; preds = %if.else, %if.then12, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !2502
  ret i32 %24, !dbg !2502
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_read_bits(%struct._modbus* %ctx, i32 %addr, i32 %nb, i8* %dest) #0 !dbg !2503 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2506, metadata !451), !dbg !2507
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !2508, metadata !451), !dbg !2509
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !2510, metadata !451), !dbg !2511
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !2512, metadata !451), !dbg !2513
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !2514, metadata !451), !dbg !2515
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2516
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !2518
  br i1 %cmp, label %if.then, label %if.end, !dbg !2519

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !2520
  store i32 22, i32* %call, align 4, !dbg !2522
  store i32 -1, i32* %retval, align 4, !dbg !2523
  br label %return, !dbg !2523

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !2524
  %cmp1 = icmp sgt i32 %1, 2000, !dbg !2526
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !2527

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2528
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !2531
  %3 = load i32, i32* %debug, align 8, !dbg !2531
  %tobool = icmp ne i32 %3, 0, !dbg !2528
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !2532

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2533
  %5 = load i32, i32* %nb.addr, align 4, !dbg !2535
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.43, i32 0, i32 0), i32 %5, i32 2000), !dbg !2536
  br label %if.end5, !dbg !2537

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !2538
  store i32 112345694, i32* %call6, align 4, !dbg !2539
  store i32 -1, i32* %retval, align 4, !dbg !2540
  br label %return, !dbg !2540

if.end7:                                          ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2541
  %7 = load i32, i32* %addr.addr, align 4, !dbg !2542
  %8 = load i32, i32* %nb.addr, align 4, !dbg !2543
  %9 = load i8*, i8** %dest.addr, align 8, !dbg !2544
  %call8 = call i32 @read_io_status(%struct._modbus* %6, i32 1, i32 %7, i32 %8, i8* %9), !dbg !2545
  store i32 %call8, i32* %rc, align 4, !dbg !2546
  %10 = load i32, i32* %rc, align 4, !dbg !2547
  %cmp9 = icmp eq i32 %10, -1, !dbg !2549
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !2550

if.then10:                                        ; preds = %if.end7
  store i32 -1, i32* %retval, align 4, !dbg !2551
  br label %return, !dbg !2551

if.else:                                          ; preds = %if.end7
  %11 = load i32, i32* %nb.addr, align 4, !dbg !2552
  store i32 %11, i32* %retval, align 4, !dbg !2553
  br label %return, !dbg !2553

return:                                           ; preds = %if.else, %if.then10, %if.end5, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !2554
  ret i32 %12, !dbg !2554
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @read_io_status(%struct._modbus* %ctx, i32 %function, i32 %addr, i32 %nb, i8* %dest) #0 !dbg !2555 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %function.addr = alloca i32, align 4
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %req = alloca [12 x i8], align 1
  %rsp = alloca [260 x i8], align 16
  %i = alloca i32, align 4
  %temp = alloca i32, align 4
  %bit = alloca i32, align 4
  %pos = alloca i32, align 4
  %offset = alloca i32, align 4
  %offset_end = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2556, metadata !451), !dbg !2557
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !2558, metadata !451), !dbg !2559
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !2560, metadata !451), !dbg !2561
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !2562, metadata !451), !dbg !2563
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !2564, metadata !451), !dbg !2565
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !2566, metadata !451), !dbg !2567
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !2568, metadata !451), !dbg !2569
  call void @llvm.dbg.declare(metadata [12 x i8]* %req, metadata !2570, metadata !451), !dbg !2574
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !2575, metadata !451), !dbg !2576
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2577
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 7, !dbg !2578
  %1 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !2578
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %1, i32 0, i32 5, !dbg !2579
  %2 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !2579
  %3 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2580
  %4 = load i32, i32* %function.addr, align 4, !dbg !2581
  %5 = load i32, i32* %addr.addr, align 4, !dbg !2582
  %6 = load i32, i32* %nb.addr, align 4, !dbg !2583
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !2584
  %call = call i32 %2(%struct._modbus* %3, i32 %4, i32 %5, i32 %6, i8* %arraydecay), !dbg !2577
  store i32 %call, i32* %req_length, align 4, !dbg !2585
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2586
  %arraydecay1 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !2587
  %8 = load i32, i32* %req_length, align 4, !dbg !2588
  %call2 = call i32 @send_msg(%struct._modbus* %7, i8* %arraydecay1, i32 %8), !dbg !2589
  store i32 %call2, i32* %rc, align 4, !dbg !2590
  %9 = load i32, i32* %rc, align 4, !dbg !2591
  %cmp = icmp sgt i32 %9, 0, !dbg !2593
  br i1 %cmp, label %if.then, label %if.end27, !dbg !2594

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2595, metadata !451), !dbg !2597
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !2598, metadata !451), !dbg !2599
  call void @llvm.dbg.declare(metadata i32* %bit, metadata !2600, metadata !451), !dbg !2601
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !2602, metadata !451), !dbg !2603
  store i32 0, i32* %pos, align 4, !dbg !2603
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2604, metadata !451), !dbg !2605
  call void @llvm.dbg.declare(metadata i32* %offset_end, metadata !2606, metadata !451), !dbg !2607
  %10 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2608
  %arraydecay3 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2609
  %call4 = call i32 @_modbus_receive_msg(%struct._modbus* %10, i8* %arraydecay3, i32 1), !dbg !2610
  store i32 %call4, i32* %rc, align 4, !dbg !2611
  %11 = load i32, i32* %rc, align 4, !dbg !2612
  %cmp5 = icmp eq i32 %11, -1, !dbg !2614
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !2615

if.then6:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !2616
  br label %return, !dbg !2616

if.end:                                           ; preds = %if.then
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2617
  %arraydecay7 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !2618
  %arraydecay8 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !2619
  %13 = load i32, i32* %rc, align 4, !dbg !2620
  %call9 = call i32 @check_confirmation(%struct._modbus* %12, i8* %arraydecay7, i8* %arraydecay8, i32 %13), !dbg !2621
  store i32 %call9, i32* %rc, align 4, !dbg !2622
  %14 = load i32, i32* %rc, align 4, !dbg !2623
  %cmp10 = icmp eq i32 %14, -1, !dbg !2625
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !2626

if.then11:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !2627
  br label %return, !dbg !2627

if.end12:                                         ; preds = %if.end
  %15 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2628
  %backend13 = getelementptr inbounds %struct._modbus, %struct._modbus* %15, i32 0, i32 7, !dbg !2629
  %16 = load %struct._modbus_backend*, %struct._modbus_backend** %backend13, align 8, !dbg !2629
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %16, i32 0, i32 1, !dbg !2630
  %17 = load i32, i32* %header_length, align 4, !dbg !2630
  %add = add i32 %17, 2, !dbg !2631
  store i32 %add, i32* %offset, align 4, !dbg !2632
  %18 = load i32, i32* %offset, align 4, !dbg !2633
  %19 = load i32, i32* %rc, align 4, !dbg !2634
  %add14 = add nsw i32 %18, %19, !dbg !2635
  store i32 %add14, i32* %offset_end, align 4, !dbg !2636
  %20 = load i32, i32* %offset, align 4, !dbg !2637
  store i32 %20, i32* %i, align 4, !dbg !2639
  br label %for.cond, !dbg !2640

for.cond:                                         ; preds = %for.inc, %if.end12
  %21 = load i32, i32* %i, align 4, !dbg !2641
  %22 = load i32, i32* %offset_end, align 4, !dbg !2643
  %cmp15 = icmp slt i32 %21, %22, !dbg !2644
  br i1 %cmp15, label %for.body, label %for.end26, !dbg !2645

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %i, align 4, !dbg !2646
  %idxprom = sext i32 %23 to i64, !dbg !2648
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom, !dbg !2648
  %24 = load i8, i8* %arrayidx, align 1, !dbg !2648
  %conv = zext i8 %24 to i32, !dbg !2648
  store i32 %conv, i32* %temp, align 4, !dbg !2649
  store i32 1, i32* %bit, align 4, !dbg !2650
  br label %for.cond16, !dbg !2652

for.cond16:                                       ; preds = %for.body19, %for.body
  %25 = load i32, i32* %bit, align 4, !dbg !2653
  %and = and i32 %25, 255, !dbg !2655
  %tobool = icmp ne i32 %and, 0, !dbg !2655
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2656

land.rhs:                                         ; preds = %for.cond16
  %26 = load i32, i32* %pos, align 4, !dbg !2657
  %27 = load i32, i32* %nb.addr, align 4, !dbg !2658
  %cmp17 = icmp slt i32 %26, %27, !dbg !2659
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond16
  %28 = phi i1 [ false, %for.cond16 ], [ %cmp17, %land.rhs ]
  br i1 %28, label %for.body19, label %for.end, !dbg !2660

for.body19:                                       ; preds = %land.end
  %29 = load i32, i32* %temp, align 4, !dbg !2661
  %30 = load i32, i32* %bit, align 4, !dbg !2663
  %and20 = and i32 %29, %30, !dbg !2664
  %tobool21 = icmp ne i32 %and20, 0, !dbg !2665
  %31 = zext i1 %tobool21 to i64, !dbg !2665
  %cond = select i1 %tobool21, i32 1, i32 0, !dbg !2665
  %conv22 = trunc i32 %cond to i8, !dbg !2665
  %32 = load i8*, i8** %dest.addr, align 8, !dbg !2666
  %33 = load i32, i32* %pos, align 4, !dbg !2667
  %inc = add nsw i32 %33, 1, !dbg !2667
  store i32 %inc, i32* %pos, align 4, !dbg !2667
  %idxprom23 = sext i32 %33 to i64, !dbg !2666
  %arrayidx24 = getelementptr inbounds i8, i8* %32, i64 %idxprom23, !dbg !2666
  store i8 %conv22, i8* %arrayidx24, align 1, !dbg !2668
  %34 = load i32, i32* %bit, align 4, !dbg !2669
  %shl = shl i32 %34, 1, !dbg !2670
  store i32 %shl, i32* %bit, align 4, !dbg !2671
  br label %for.cond16, !dbg !2672, !llvm.loop !2673

for.end:                                          ; preds = %land.end
  br label %for.inc, !dbg !2675

for.inc:                                          ; preds = %for.end
  %35 = load i32, i32* %i, align 4, !dbg !2676
  %inc25 = add nsw i32 %35, 1, !dbg !2676
  store i32 %inc25, i32* %i, align 4, !dbg !2676
  br label %for.cond, !dbg !2677, !llvm.loop !2678

for.end26:                                        ; preds = %for.cond
  br label %if.end27, !dbg !2680

if.end27:                                         ; preds = %for.end26, %entry
  %36 = load i32, i32* %rc, align 4, !dbg !2681
  store i32 %36, i32* %retval, align 4, !dbg !2682
  br label %return, !dbg !2682

return:                                           ; preds = %if.end27, %if.then11, %if.then6
  %37 = load i32, i32* %retval, align 4, !dbg !2683
  ret i32 %37, !dbg !2683
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_confirmation(%struct._modbus* %ctx, i8* %req, i8* %rsp, i32 %rsp_length) #0 !dbg !2684 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %req.addr = alloca i8*, align 8
  %rsp.addr = alloca i8*, align 8
  %rsp_length.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %rsp_length_computed = alloca i32, align 4
  %offset = alloca i32, align 4
  %function = alloca i32, align 4
  %exception_code = alloca i32, align 4
  %req_nb_value = alloca i32, align 4
  %rsp_nb_value = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2687, metadata !451), !dbg !2688
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !2689, metadata !451), !dbg !2690
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !2691, metadata !451), !dbg !2692
  store i32 %rsp_length, i32* %rsp_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rsp_length.addr, metadata !2693, metadata !451), !dbg !2694
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !2695, metadata !451), !dbg !2696
  call void @llvm.dbg.declare(metadata i32* %rsp_length_computed, metadata !2697, metadata !451), !dbg !2698
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2699, metadata !451), !dbg !2700
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2701
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 7, !dbg !2702
  %1 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !2702
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %1, i32 0, i32 1, !dbg !2703
  %2 = load i32, i32* %header_length, align 4, !dbg !2703
  store i32 %2, i32* %offset, align 4, !dbg !2700
  call void @llvm.dbg.declare(metadata i32* %function, metadata !2704, metadata !451), !dbg !2705
  %3 = load i8*, i8** %rsp.addr, align 8, !dbg !2706
  %4 = load i32, i32* %offset, align 4, !dbg !2707
  %idxprom = sext i32 %4 to i64, !dbg !2706
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !2706
  %5 = load i8, i8* %arrayidx, align 1, !dbg !2706
  %conv = zext i8 %5 to i32, !dbg !2706
  store i32 %conv, i32* %function, align 4, !dbg !2705
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2708
  %backend1 = getelementptr inbounds %struct._modbus, %struct._modbus* %6, i32 0, i32 7, !dbg !2710
  %7 = load %struct._modbus_backend*, %struct._modbus_backend** %backend1, align 8, !dbg !2710
  %pre_check_confirmation = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %7, i32 0, i32 13, !dbg !2711
  %8 = load i32 (%struct._modbus*, i8*, i8*, i32)*, i32 (%struct._modbus*, i8*, i8*, i32)** %pre_check_confirmation, align 8, !dbg !2711
  %tobool = icmp ne i32 (%struct._modbus*, i8*, i8*, i32)* %8, null, !dbg !2708
  br i1 %tobool, label %if.then, label %if.end10, !dbg !2712

if.then:                                          ; preds = %entry
  %9 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2713
  %backend2 = getelementptr inbounds %struct._modbus, %struct._modbus* %9, i32 0, i32 7, !dbg !2715
  %10 = load %struct._modbus_backend*, %struct._modbus_backend** %backend2, align 8, !dbg !2715
  %pre_check_confirmation3 = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %10, i32 0, i32 13, !dbg !2716
  %11 = load i32 (%struct._modbus*, i8*, i8*, i32)*, i32 (%struct._modbus*, i8*, i8*, i32)** %pre_check_confirmation3, align 8, !dbg !2716
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2717
  %13 = load i8*, i8** %req.addr, align 8, !dbg !2718
  %14 = load i8*, i8** %rsp.addr, align 8, !dbg !2719
  %15 = load i32, i32* %rsp_length.addr, align 4, !dbg !2720
  %call = call i32 %11(%struct._modbus* %12, i8* %13, i8* %14, i32 %15), !dbg !2713
  store i32 %call, i32* %rc, align 4, !dbg !2721
  %16 = load i32, i32* %rc, align 4, !dbg !2722
  %cmp = icmp eq i32 %16, -1, !dbg !2724
  br i1 %cmp, label %if.then5, label %if.end9, !dbg !2725

if.then5:                                         ; preds = %if.then
  %17 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2726
  %error_recovery = getelementptr inbounds %struct._modbus, %struct._modbus* %17, i32 0, i32 3, !dbg !2729
  %18 = load i32, i32* %error_recovery, align 4, !dbg !2729
  %and = and i32 %18, 4, !dbg !2730
  %tobool6 = icmp ne i32 %and, 0, !dbg !2730
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !2731

if.then7:                                         ; preds = %if.then5
  %19 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2732
  call void @_sleep_response_timeout(%struct._modbus* %19), !dbg !2734
  %20 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2735
  %call8 = call i32 @modbus_flush(%struct._modbus* %20), !dbg !2736
  br label %if.end, !dbg !2737

if.end:                                           ; preds = %if.then7, %if.then5
  store i32 -1, i32* %retval, align 4, !dbg !2738
  br label %return, !dbg !2738

if.end9:                                          ; preds = %if.then
  br label %if.end10, !dbg !2739

if.end10:                                         ; preds = %if.end9, %entry
  %21 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2740
  %22 = load i8*, i8** %req.addr, align 8, !dbg !2741
  %call11 = call i32 @compute_response_length_from_request(%struct._modbus* %21, i8* %22), !dbg !2742
  store i32 %call11, i32* %rsp_length_computed, align 4, !dbg !2743
  %23 = load i32, i32* %function, align 4, !dbg !2744
  %cmp12 = icmp sge i32 %23, 128, !dbg !2746
  br i1 %cmp12, label %if.then14, label %if.end41, !dbg !2747

if.then14:                                        ; preds = %if.end10
  %24 = load i32, i32* %rsp_length.addr, align 4, !dbg !2748
  %25 = load i32, i32* %offset, align 4, !dbg !2751
  %add = add nsw i32 %25, 2, !dbg !2752
  %26 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2753
  %backend15 = getelementptr inbounds %struct._modbus, %struct._modbus* %26, i32 0, i32 7, !dbg !2754
  %27 = load %struct._modbus_backend*, %struct._modbus_backend** %backend15, align 8, !dbg !2754
  %checksum_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %27, i32 0, i32 2, !dbg !2755
  %28 = load i32, i32* %checksum_length, align 8, !dbg !2755
  %add16 = add nsw i32 %add, %28, !dbg !2756
  %cmp17 = icmp eq i32 %24, %add16, !dbg !2757
  br i1 %cmp17, label %land.lhs.true, label %if.else39, !dbg !2758

land.lhs.true:                                    ; preds = %if.then14
  %29 = load i8*, i8** %req.addr, align 8, !dbg !2759
  %30 = load i32, i32* %offset, align 4, !dbg !2760
  %idxprom19 = sext i32 %30 to i64, !dbg !2759
  %arrayidx20 = getelementptr inbounds i8, i8* %29, i64 %idxprom19, !dbg !2759
  %31 = load i8, i8* %arrayidx20, align 1, !dbg !2759
  %conv21 = zext i8 %31 to i32, !dbg !2759
  %32 = load i8*, i8** %rsp.addr, align 8, !dbg !2761
  %33 = load i32, i32* %offset, align 4, !dbg !2762
  %idxprom22 = sext i32 %33 to i64, !dbg !2761
  %arrayidx23 = getelementptr inbounds i8, i8* %32, i64 %idxprom22, !dbg !2761
  %34 = load i8, i8* %arrayidx23, align 1, !dbg !2761
  %conv24 = zext i8 %34 to i32, !dbg !2761
  %sub = sub nsw i32 %conv24, 128, !dbg !2763
  %cmp25 = icmp eq i32 %conv21, %sub, !dbg !2764
  br i1 %cmp25, label %if.then27, label %if.else39, !dbg !2765

if.then27:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %exception_code, metadata !2766, metadata !451), !dbg !2768
  %35 = load i8*, i8** %rsp.addr, align 8, !dbg !2769
  %36 = load i32, i32* %offset, align 4, !dbg !2770
  %add28 = add nsw i32 %36, 1, !dbg !2771
  %idxprom29 = sext i32 %add28 to i64, !dbg !2769
  %arrayidx30 = getelementptr inbounds i8, i8* %35, i64 %idxprom29, !dbg !2769
  %37 = load i8, i8* %arrayidx30, align 1, !dbg !2769
  %conv31 = zext i8 %37 to i32, !dbg !2769
  store i32 %conv31, i32* %exception_code, align 4, !dbg !2768
  %38 = load i32, i32* %exception_code, align 4, !dbg !2772
  %cmp32 = icmp slt i32 %38, 12, !dbg !2774
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !2775

if.then34:                                        ; preds = %if.then27
  %39 = load i32, i32* %exception_code, align 4, !dbg !2776
  %add35 = add nsw i32 112345678, %39, !dbg !2778
  %call36 = call i32* @__errno_location() #9, !dbg !2779
  store i32 %add35, i32* %call36, align 4, !dbg !2780
  br label %if.end38, !dbg !2781

if.else:                                          ; preds = %if.then27
  %call37 = call i32* @__errno_location() #9, !dbg !2782
  store i32 112345692, i32* %call37, align 4, !dbg !2784
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then34
  %40 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2785
  call void @_error_print(%struct._modbus* %40, i8* null), !dbg !2786
  store i32 -1, i32* %retval, align 4, !dbg !2787
  br label %return, !dbg !2787

if.else39:                                        ; preds = %land.lhs.true, %if.then14
  %call40 = call i32* @__errno_location() #9, !dbg !2788
  store i32 112345692, i32* %call40, align 4, !dbg !2790
  %41 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2791
  call void @_error_print(%struct._modbus* %41, i8* null), !dbg !2792
  store i32 -1, i32* %retval, align 4, !dbg !2793
  br label %return, !dbg !2793

if.end41:                                         ; preds = %if.end10
  %42 = load i32, i32* %rsp_length.addr, align 4, !dbg !2794
  %43 = load i32, i32* %rsp_length_computed, align 4, !dbg !2796
  %cmp42 = icmp eq i32 %42, %43, !dbg !2797
  br i1 %cmp42, label %land.lhs.true46, label %lor.lhs.false, !dbg !2798

lor.lhs.false:                                    ; preds = %if.end41
  %44 = load i32, i32* %rsp_length_computed, align 4, !dbg !2799
  %cmp44 = icmp eq i32 %44, -1, !dbg !2800
  br i1 %cmp44, label %land.lhs.true46, label %if.else144, !dbg !2801

land.lhs.true46:                                  ; preds = %lor.lhs.false, %if.end41
  %45 = load i32, i32* %function, align 4, !dbg !2802
  %cmp47 = icmp slt i32 %45, 128, !dbg !2803
  br i1 %cmp47, label %if.then49, label %if.else144, !dbg !2804

if.then49:                                        ; preds = %land.lhs.true46
  call void @llvm.dbg.declare(metadata i32* %req_nb_value, metadata !2805, metadata !451), !dbg !2807
  call void @llvm.dbg.declare(metadata i32* %rsp_nb_value, metadata !2808, metadata !451), !dbg !2809
  %46 = load i32, i32* %function, align 4, !dbg !2810
  %47 = load i8*, i8** %req.addr, align 8, !dbg !2812
  %48 = load i32, i32* %offset, align 4, !dbg !2813
  %idxprom50 = sext i32 %48 to i64, !dbg !2812
  %arrayidx51 = getelementptr inbounds i8, i8* %47, i64 %idxprom50, !dbg !2812
  %49 = load i8, i8* %arrayidx51, align 1, !dbg !2812
  %conv52 = zext i8 %49 to i32, !dbg !2812
  %cmp53 = icmp ne i32 %46, %conv52, !dbg !2814
  br i1 %cmp53, label %if.then55, label %if.end70, !dbg !2815

if.then55:                                        ; preds = %if.then49
  %50 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2816
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %50, i32 0, i32 2, !dbg !2819
  %51 = load i32, i32* %debug, align 8, !dbg !2819
  %tobool56 = icmp ne i32 %51, 0, !dbg !2816
  br i1 %tobool56, label %if.then57, label %if.end62, !dbg !2820

if.then57:                                        ; preds = %if.then55
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2821
  %53 = load i32, i32* %function, align 4, !dbg !2823
  %54 = load i8*, i8** %req.addr, align 8, !dbg !2824
  %55 = load i32, i32* %offset, align 4, !dbg !2825
  %idxprom58 = sext i32 %55 to i64, !dbg !2824
  %arrayidx59 = getelementptr inbounds i8, i8* %54, i64 %idxprom58, !dbg !2824
  %56 = load i8, i8* %arrayidx59, align 1, !dbg !2824
  %conv60 = zext i8 %56 to i32, !dbg !2824
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.51, i32 0, i32 0), i32 %53, i32 %conv60), !dbg !2826
  br label %if.end62, !dbg !2827

if.end62:                                         ; preds = %if.then57, %if.then55
  %57 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2828
  %error_recovery63 = getelementptr inbounds %struct._modbus, %struct._modbus* %57, i32 0, i32 3, !dbg !2830
  %58 = load i32, i32* %error_recovery63, align 4, !dbg !2830
  %and64 = and i32 %58, 4, !dbg !2831
  %tobool65 = icmp ne i32 %and64, 0, !dbg !2831
  br i1 %tobool65, label %if.then66, label %if.end68, !dbg !2832

if.then66:                                        ; preds = %if.end62
  %59 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2833
  call void @_sleep_response_timeout(%struct._modbus* %59), !dbg !2835
  %60 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2836
  %call67 = call i32 @modbus_flush(%struct._modbus* %60), !dbg !2837
  br label %if.end68, !dbg !2838

if.end68:                                         ; preds = %if.then66, %if.end62
  %call69 = call i32* @__errno_location() #9, !dbg !2839
  store i32 112345691, i32* %call69, align 4, !dbg !2840
  store i32 -1, i32* %retval, align 4, !dbg !2841
  br label %return, !dbg !2841

if.end70:                                         ; preds = %if.then49
  %61 = load i32, i32* %function, align 4, !dbg !2842
  switch i32 %61, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 23, label %sw.bb86
    i32 3, label %sw.bb86
    i32 4, label %sw.bb86
    i32 15, label %sw.bb102
    i32 16, label %sw.bb102
    i32 17, label %sw.bb122
  ], !dbg !2843

sw.bb:                                            ; preds = %if.end70, %if.end70
  %62 = load i8*, i8** %req.addr, align 8, !dbg !2844
  %63 = load i32, i32* %offset, align 4, !dbg !2846
  %add71 = add nsw i32 %63, 3, !dbg !2847
  %idxprom72 = sext i32 %add71 to i64, !dbg !2844
  %arrayidx73 = getelementptr inbounds i8, i8* %62, i64 %idxprom72, !dbg !2844
  %64 = load i8, i8* %arrayidx73, align 1, !dbg !2844
  %conv74 = zext i8 %64 to i32, !dbg !2844
  %shl = shl i32 %conv74, 8, !dbg !2848
  %65 = load i8*, i8** %req.addr, align 8, !dbg !2849
  %66 = load i32, i32* %offset, align 4, !dbg !2850
  %add75 = add nsw i32 %66, 4, !dbg !2851
  %idxprom76 = sext i32 %add75 to i64, !dbg !2849
  %arrayidx77 = getelementptr inbounds i8, i8* %65, i64 %idxprom76, !dbg !2849
  %67 = load i8, i8* %arrayidx77, align 1, !dbg !2849
  %conv78 = zext i8 %67 to i32, !dbg !2849
  %add79 = add nsw i32 %shl, %conv78, !dbg !2852
  store i32 %add79, i32* %req_nb_value, align 4, !dbg !2853
  %68 = load i32, i32* %req_nb_value, align 4, !dbg !2854
  %div = sdiv i32 %68, 8, !dbg !2855
  %69 = load i32, i32* %req_nb_value, align 4, !dbg !2856
  %rem = srem i32 %69, 8, !dbg !2857
  %tobool80 = icmp ne i32 %rem, 0, !dbg !2858
  %70 = zext i1 %tobool80 to i64, !dbg !2858
  %cond = select i1 %tobool80, i32 1, i32 0, !dbg !2858
  %add81 = add nsw i32 %div, %cond, !dbg !2859
  store i32 %add81, i32* %req_nb_value, align 4, !dbg !2860
  %71 = load i8*, i8** %rsp.addr, align 8, !dbg !2861
  %72 = load i32, i32* %offset, align 4, !dbg !2862
  %add82 = add nsw i32 %72, 1, !dbg !2863
  %idxprom83 = sext i32 %add82 to i64, !dbg !2861
  %arrayidx84 = getelementptr inbounds i8, i8* %71, i64 %idxprom83, !dbg !2861
  %73 = load i8, i8* %arrayidx84, align 1, !dbg !2861
  %conv85 = zext i8 %73 to i32, !dbg !2861
  store i32 %conv85, i32* %rsp_nb_value, align 4, !dbg !2864
  br label %sw.epilog, !dbg !2865

sw.bb86:                                          ; preds = %if.end70, %if.end70, %if.end70
  %74 = load i8*, i8** %req.addr, align 8, !dbg !2866
  %75 = load i32, i32* %offset, align 4, !dbg !2867
  %add87 = add nsw i32 %75, 3, !dbg !2868
  %idxprom88 = sext i32 %add87 to i64, !dbg !2866
  %arrayidx89 = getelementptr inbounds i8, i8* %74, i64 %idxprom88, !dbg !2866
  %76 = load i8, i8* %arrayidx89, align 1, !dbg !2866
  %conv90 = zext i8 %76 to i32, !dbg !2866
  %shl91 = shl i32 %conv90, 8, !dbg !2869
  %77 = load i8*, i8** %req.addr, align 8, !dbg !2870
  %78 = load i32, i32* %offset, align 4, !dbg !2871
  %add92 = add nsw i32 %78, 4, !dbg !2872
  %idxprom93 = sext i32 %add92 to i64, !dbg !2870
  %arrayidx94 = getelementptr inbounds i8, i8* %77, i64 %idxprom93, !dbg !2870
  %79 = load i8, i8* %arrayidx94, align 1, !dbg !2870
  %conv95 = zext i8 %79 to i32, !dbg !2870
  %add96 = add nsw i32 %shl91, %conv95, !dbg !2873
  store i32 %add96, i32* %req_nb_value, align 4, !dbg !2874
  %80 = load i8*, i8** %rsp.addr, align 8, !dbg !2875
  %81 = load i32, i32* %offset, align 4, !dbg !2876
  %add97 = add nsw i32 %81, 1, !dbg !2877
  %idxprom98 = sext i32 %add97 to i64, !dbg !2875
  %arrayidx99 = getelementptr inbounds i8, i8* %80, i64 %idxprom98, !dbg !2875
  %82 = load i8, i8* %arrayidx99, align 1, !dbg !2875
  %conv100 = zext i8 %82 to i32, !dbg !2875
  %div101 = sdiv i32 %conv100, 2, !dbg !2878
  store i32 %div101, i32* %rsp_nb_value, align 4, !dbg !2879
  br label %sw.epilog, !dbg !2880

sw.bb102:                                         ; preds = %if.end70, %if.end70
  %83 = load i8*, i8** %req.addr, align 8, !dbg !2881
  %84 = load i32, i32* %offset, align 4, !dbg !2882
  %add103 = add nsw i32 %84, 3, !dbg !2883
  %idxprom104 = sext i32 %add103 to i64, !dbg !2881
  %arrayidx105 = getelementptr inbounds i8, i8* %83, i64 %idxprom104, !dbg !2881
  %85 = load i8, i8* %arrayidx105, align 1, !dbg !2881
  %conv106 = zext i8 %85 to i32, !dbg !2881
  %shl107 = shl i32 %conv106, 8, !dbg !2884
  %86 = load i8*, i8** %req.addr, align 8, !dbg !2885
  %87 = load i32, i32* %offset, align 4, !dbg !2886
  %add108 = add nsw i32 %87, 4, !dbg !2887
  %idxprom109 = sext i32 %add108 to i64, !dbg !2885
  %arrayidx110 = getelementptr inbounds i8, i8* %86, i64 %idxprom109, !dbg !2885
  %88 = load i8, i8* %arrayidx110, align 1, !dbg !2885
  %conv111 = zext i8 %88 to i32, !dbg !2885
  %add112 = add nsw i32 %shl107, %conv111, !dbg !2888
  store i32 %add112, i32* %req_nb_value, align 4, !dbg !2889
  %89 = load i8*, i8** %rsp.addr, align 8, !dbg !2890
  %90 = load i32, i32* %offset, align 4, !dbg !2891
  %add113 = add nsw i32 %90, 3, !dbg !2892
  %idxprom114 = sext i32 %add113 to i64, !dbg !2890
  %arrayidx115 = getelementptr inbounds i8, i8* %89, i64 %idxprom114, !dbg !2890
  %91 = load i8, i8* %arrayidx115, align 1, !dbg !2890
  %conv116 = zext i8 %91 to i32, !dbg !2890
  %shl117 = shl i32 %conv116, 8, !dbg !2893
  %92 = load i8*, i8** %rsp.addr, align 8, !dbg !2894
  %93 = load i32, i32* %offset, align 4, !dbg !2895
  %add118 = add nsw i32 %93, 4, !dbg !2896
  %idxprom119 = sext i32 %add118 to i64, !dbg !2894
  %arrayidx120 = getelementptr inbounds i8, i8* %92, i64 %idxprom119, !dbg !2894
  %94 = load i8, i8* %arrayidx120, align 1, !dbg !2894
  %conv121 = zext i8 %94 to i32, !dbg !2894
  %or = or i32 %shl117, %conv121, !dbg !2897
  store i32 %or, i32* %rsp_nb_value, align 4, !dbg !2898
  br label %sw.epilog, !dbg !2899

sw.bb122:                                         ; preds = %if.end70
  %95 = load i8*, i8** %rsp.addr, align 8, !dbg !2900
  %96 = load i32, i32* %offset, align 4, !dbg !2901
  %add123 = add nsw i32 %96, 1, !dbg !2902
  %idxprom124 = sext i32 %add123 to i64, !dbg !2900
  %arrayidx125 = getelementptr inbounds i8, i8* %95, i64 %idxprom124, !dbg !2900
  %97 = load i8, i8* %arrayidx125, align 1, !dbg !2900
  %conv126 = zext i8 %97 to i32, !dbg !2900
  store i32 %conv126, i32* %rsp_nb_value, align 4, !dbg !2903
  store i32 %conv126, i32* %req_nb_value, align 4, !dbg !2904
  br label %sw.epilog, !dbg !2905

sw.default:                                       ; preds = %if.end70
  store i32 1, i32* %rsp_nb_value, align 4, !dbg !2906
  store i32 1, i32* %req_nb_value, align 4, !dbg !2907
  br label %sw.epilog, !dbg !2908

sw.epilog:                                        ; preds = %sw.default, %sw.bb122, %sw.bb102, %sw.bb86, %sw.bb
  %98 = load i32, i32* %req_nb_value, align 4, !dbg !2909
  %99 = load i32, i32* %rsp_nb_value, align 4, !dbg !2911
  %cmp127 = icmp eq i32 %98, %99, !dbg !2912
  br i1 %cmp127, label %if.then129, label %if.else130, !dbg !2913

if.then129:                                       ; preds = %sw.epilog
  %100 = load i32, i32* %rsp_nb_value, align 4, !dbg !2914
  store i32 %100, i32* %rc, align 4, !dbg !2916
  br label %if.end143, !dbg !2917

if.else130:                                       ; preds = %sw.epilog
  %101 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2918
  %debug131 = getelementptr inbounds %struct._modbus, %struct._modbus* %101, i32 0, i32 2, !dbg !2921
  %102 = load i32, i32* %debug131, align 8, !dbg !2921
  %tobool132 = icmp ne i32 %102, 0, !dbg !2918
  br i1 %tobool132, label %if.then133, label %if.end135, !dbg !2922

if.then133:                                       ; preds = %if.else130
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2923
  %104 = load i32, i32* %rsp_nb_value, align 4, !dbg !2925
  %105 = load i32, i32* %req_nb_value, align 4, !dbg !2926
  %call134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.52, i32 0, i32 0), i32 %104, i32 %105), !dbg !2927
  br label %if.end135, !dbg !2928

if.end135:                                        ; preds = %if.then133, %if.else130
  %106 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2929
  %error_recovery136 = getelementptr inbounds %struct._modbus, %struct._modbus* %106, i32 0, i32 3, !dbg !2931
  %107 = load i32, i32* %error_recovery136, align 4, !dbg !2931
  %and137 = and i32 %107, 4, !dbg !2932
  %tobool138 = icmp ne i32 %and137, 0, !dbg !2932
  br i1 %tobool138, label %if.then139, label %if.end141, !dbg !2933

if.then139:                                       ; preds = %if.end135
  %108 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2934
  call void @_sleep_response_timeout(%struct._modbus* %108), !dbg !2936
  %109 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2937
  %call140 = call i32 @modbus_flush(%struct._modbus* %109), !dbg !2938
  br label %if.end141, !dbg !2939

if.end141:                                        ; preds = %if.then139, %if.end135
  %call142 = call i32* @__errno_location() #9, !dbg !2940
  store i32 112345691, i32* %call142, align 4, !dbg !2941
  store i32 -1, i32* %rc, align 4, !dbg !2942
  br label %if.end143

if.end143:                                        ; preds = %if.end141, %if.then129
  br label %if.end157, !dbg !2943

if.else144:                                       ; preds = %land.lhs.true46, %lor.lhs.false
  %110 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2944
  %debug145 = getelementptr inbounds %struct._modbus, %struct._modbus* %110, i32 0, i32 2, !dbg !2947
  %111 = load i32, i32* %debug145, align 8, !dbg !2947
  %tobool146 = icmp ne i32 %111, 0, !dbg !2944
  br i1 %tobool146, label %if.then147, label %if.end149, !dbg !2948

if.then147:                                       ; preds = %if.else144
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2949
  %113 = load i32, i32* %rsp_length.addr, align 4, !dbg !2951
  %114 = load i32, i32* %rsp_length_computed, align 4, !dbg !2952
  %call148 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.53, i32 0, i32 0), i32 %113, i32 %114), !dbg !2953
  br label %if.end149, !dbg !2954

if.end149:                                        ; preds = %if.then147, %if.else144
  %115 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2955
  %error_recovery150 = getelementptr inbounds %struct._modbus, %struct._modbus* %115, i32 0, i32 3, !dbg !2957
  %116 = load i32, i32* %error_recovery150, align 4, !dbg !2957
  %and151 = and i32 %116, 4, !dbg !2958
  %tobool152 = icmp ne i32 %and151, 0, !dbg !2958
  br i1 %tobool152, label %if.then153, label %if.end155, !dbg !2959

if.then153:                                       ; preds = %if.end149
  %117 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2960
  call void @_sleep_response_timeout(%struct._modbus* %117), !dbg !2962
  %118 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2963
  %call154 = call i32 @modbus_flush(%struct._modbus* %118), !dbg !2964
  br label %if.end155, !dbg !2965

if.end155:                                        ; preds = %if.then153, %if.end149
  %call156 = call i32* @__errno_location() #9, !dbg !2966
  store i32 112345691, i32* %call156, align 4, !dbg !2967
  store i32 -1, i32* %rc, align 4, !dbg !2968
  br label %if.end157

if.end157:                                        ; preds = %if.end155, %if.end143
  %119 = load i32, i32* %rc, align 4, !dbg !2969
  store i32 %119, i32* %retval, align 4, !dbg !2970
  br label %return, !dbg !2970

return:                                           ; preds = %if.end157, %if.end68, %if.else39, %if.end38, %if.end
  %120 = load i32, i32* %retval, align 4, !dbg !2971
  ret i32 %120, !dbg !2971
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_response_length_from_request(%struct._modbus* %ctx, i8* %req) #0 !dbg !2972 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %req.addr = alloca i8*, align 8
  %length = alloca i32, align 4
  %offset = alloca i32, align 4
  %nb = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !2975, metadata !451), !dbg !2976
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !2977, metadata !451), !dbg !2978
  call void @llvm.dbg.declare(metadata i32* %length, metadata !2979, metadata !451), !dbg !2980
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !2981, metadata !451), !dbg !2982
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !2983
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 7, !dbg !2984
  %1 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !2984
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %1, i32 0, i32 1, !dbg !2985
  %2 = load i32, i32* %header_length, align 4, !dbg !2985
  store i32 %2, i32* %offset, align 4, !dbg !2982
  %3 = load i8*, i8** %req.addr, align 8, !dbg !2986
  %4 = load i32, i32* %offset, align 4, !dbg !2987
  %idxprom = sext i32 %4 to i64, !dbg !2986
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !2986
  %5 = load i8, i8* %arrayidx, align 1, !dbg !2986
  %conv = zext i8 %5 to i32, !dbg !2986
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 23, label %sw.bb10
    i32 3, label %sw.bb10
    i32 4, label %sw.bb10
    i32 7, label %sw.bb22
    i32 17, label %sw.bb23
    i32 22, label %sw.bb24
  ], !dbg !2988

sw.bb:                                            ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata i32* %nb, metadata !2989, metadata !451), !dbg !2992
  %6 = load i8*, i8** %req.addr, align 8, !dbg !2993
  %7 = load i32, i32* %offset, align 4, !dbg !2994
  %add = add nsw i32 %7, 3, !dbg !2995
  %idxprom1 = sext i32 %add to i64, !dbg !2993
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 %idxprom1, !dbg !2993
  %8 = load i8, i8* %arrayidx2, align 1, !dbg !2993
  %conv3 = zext i8 %8 to i32, !dbg !2993
  %shl = shl i32 %conv3, 8, !dbg !2996
  %9 = load i8*, i8** %req.addr, align 8, !dbg !2997
  %10 = load i32, i32* %offset, align 4, !dbg !2998
  %add4 = add nsw i32 %10, 4, !dbg !2999
  %idxprom5 = sext i32 %add4 to i64, !dbg !2997
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 %idxprom5, !dbg !2997
  %11 = load i8, i8* %arrayidx6, align 1, !dbg !2997
  %conv7 = zext i8 %11 to i32, !dbg !2997
  %or = or i32 %shl, %conv7, !dbg !3000
  store i32 %or, i32* %nb, align 4, !dbg !2992
  %12 = load i32, i32* %nb, align 4, !dbg !3001
  %div = sdiv i32 %12, 8, !dbg !3002
  %add8 = add nsw i32 2, %div, !dbg !3003
  %13 = load i32, i32* %nb, align 4, !dbg !3004
  %rem = srem i32 %13, 8, !dbg !3005
  %tobool = icmp ne i32 %rem, 0, !dbg !3006
  %14 = zext i1 %tobool to i64, !dbg !3006
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !3006
  %add9 = add nsw i32 %add8, %cond, !dbg !3007
  store i32 %add9, i32* %length, align 4, !dbg !3008
  br label %sw.epilog, !dbg !3009

sw.bb10:                                          ; preds = %entry, %entry, %entry
  %15 = load i8*, i8** %req.addr, align 8, !dbg !3010
  %16 = load i32, i32* %offset, align 4, !dbg !3011
  %add11 = add nsw i32 %16, 3, !dbg !3012
  %idxprom12 = sext i32 %add11 to i64, !dbg !3010
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom12, !dbg !3010
  %17 = load i8, i8* %arrayidx13, align 1, !dbg !3010
  %conv14 = zext i8 %17 to i32, !dbg !3010
  %shl15 = shl i32 %conv14, 8, !dbg !3013
  %18 = load i8*, i8** %req.addr, align 8, !dbg !3014
  %19 = load i32, i32* %offset, align 4, !dbg !3015
  %add16 = add nsw i32 %19, 4, !dbg !3016
  %idxprom17 = sext i32 %add16 to i64, !dbg !3014
  %arrayidx18 = getelementptr inbounds i8, i8* %18, i64 %idxprom17, !dbg !3014
  %20 = load i8, i8* %arrayidx18, align 1, !dbg !3014
  %conv19 = zext i8 %20 to i32, !dbg !3014
  %or20 = or i32 %shl15, %conv19, !dbg !3017
  %mul = mul nsw i32 2, %or20, !dbg !3018
  %add21 = add nsw i32 2, %mul, !dbg !3019
  store i32 %add21, i32* %length, align 4, !dbg !3020
  br label %sw.epilog, !dbg !3021

sw.bb22:                                          ; preds = %entry
  store i32 3, i32* %length, align 4, !dbg !3022
  br label %sw.epilog, !dbg !3023

sw.bb23:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3024
  br label %return, !dbg !3024

sw.bb24:                                          ; preds = %entry
  store i32 7, i32* %length, align 4, !dbg !3025
  br label %sw.epilog, !dbg !3026

sw.default:                                       ; preds = %entry
  store i32 5, i32* %length, align 4, !dbg !3027
  br label %sw.epilog, !dbg !3028

sw.epilog:                                        ; preds = %sw.default, %sw.bb24, %sw.bb22, %sw.bb10, %sw.bb
  %21 = load i32, i32* %offset, align 4, !dbg !3029
  %22 = load i32, i32* %length, align 4, !dbg !3030
  %add25 = add nsw i32 %21, %22, !dbg !3031
  %23 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3032
  %backend26 = getelementptr inbounds %struct._modbus, %struct._modbus* %23, i32 0, i32 7, !dbg !3033
  %24 = load %struct._modbus_backend*, %struct._modbus_backend** %backend26, align 8, !dbg !3033
  %checksum_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %24, i32 0, i32 2, !dbg !3034
  %25 = load i32, i32* %checksum_length, align 8, !dbg !3034
  %add27 = add i32 %add25, %25, !dbg !3035
  store i32 %add27, i32* %retval, align 4, !dbg !3036
  br label %return, !dbg !3036

return:                                           ; preds = %sw.epilog, %sw.bb23
  %26 = load i32, i32* %retval, align 4, !dbg !3037
  ret i32 %26, !dbg !3037
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_read_input_bits(%struct._modbus* %ctx, i32 %addr, i32 %nb, i8* %dest) #0 !dbg !3038 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3039, metadata !451), !dbg !3040
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3041, metadata !451), !dbg !3042
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3043, metadata !451), !dbg !3044
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !3045, metadata !451), !dbg !3046
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3047, metadata !451), !dbg !3048
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3049
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3051
  br i1 %cmp, label %if.then, label %if.end, !dbg !3052

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3053
  store i32 22, i32* %call, align 4, !dbg !3055
  store i32 -1, i32* %retval, align 4, !dbg !3056
  br label %return, !dbg !3056

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !3057
  %cmp1 = icmp sgt i32 %1, 2000, !dbg !3059
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !3060

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3061
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !3064
  %3 = load i32, i32* %debug, align 8, !dbg !3064
  %tobool = icmp ne i32 %3, 0, !dbg !3061
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !3065

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3066
  %5 = load i32, i32* %nb.addr, align 4, !dbg !3068
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.44, i32 0, i32 0), i32 %5, i32 2000), !dbg !3069
  br label %if.end5, !dbg !3070

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !3071
  store i32 112345694, i32* %call6, align 4, !dbg !3072
  store i32 -1, i32* %retval, align 4, !dbg !3073
  br label %return, !dbg !3073

if.end7:                                          ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3074
  %7 = load i32, i32* %addr.addr, align 4, !dbg !3075
  %8 = load i32, i32* %nb.addr, align 4, !dbg !3076
  %9 = load i8*, i8** %dest.addr, align 8, !dbg !3077
  %call8 = call i32 @read_io_status(%struct._modbus* %6, i32 2, i32 %7, i32 %8, i8* %9), !dbg !3078
  store i32 %call8, i32* %rc, align 4, !dbg !3079
  %10 = load i32, i32* %rc, align 4, !dbg !3080
  %cmp9 = icmp eq i32 %10, -1, !dbg !3082
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !3083

if.then10:                                        ; preds = %if.end7
  store i32 -1, i32* %retval, align 4, !dbg !3084
  br label %return, !dbg !3084

if.else:                                          ; preds = %if.end7
  %11 = load i32, i32* %nb.addr, align 4, !dbg !3085
  store i32 %11, i32* %retval, align 4, !dbg !3086
  br label %return, !dbg !3086

return:                                           ; preds = %if.else, %if.then10, %if.end5, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !3087
  ret i32 %12, !dbg !3087
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_read_registers(%struct._modbus* %ctx, i32 %addr, i32 %nb, i16* %dest) #0 !dbg !3088 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i16*, align 8
  %status = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3091, metadata !451), !dbg !3092
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3093, metadata !451), !dbg !3094
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3095, metadata !451), !dbg !3096
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !3097, metadata !451), !dbg !3098
  call void @llvm.dbg.declare(metadata i32* %status, metadata !3099, metadata !451), !dbg !3100
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3101
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3103
  br i1 %cmp, label %if.then, label %if.end, !dbg !3104

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3105
  store i32 22, i32* %call, align 4, !dbg !3107
  store i32 -1, i32* %retval, align 4, !dbg !3108
  br label %return, !dbg !3108

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !3109
  %cmp1 = icmp sgt i32 %1, 125, !dbg !3111
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !3112

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3113
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !3116
  %3 = load i32, i32* %debug, align 8, !dbg !3116
  %tobool = icmp ne i32 %3, 0, !dbg !3113
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !3117

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3118
  %5 = load i32, i32* %nb.addr, align 4, !dbg !3120
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.45, i32 0, i32 0), i32 %5, i32 125), !dbg !3121
  br label %if.end5, !dbg !3122

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !3123
  store i32 112345694, i32* %call6, align 4, !dbg !3124
  store i32 -1, i32* %retval, align 4, !dbg !3125
  br label %return, !dbg !3125

if.end7:                                          ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3126
  %7 = load i32, i32* %addr.addr, align 4, !dbg !3127
  %8 = load i32, i32* %nb.addr, align 4, !dbg !3128
  %9 = load i16*, i16** %dest.addr, align 8, !dbg !3129
  %call8 = call i32 @read_registers(%struct._modbus* %6, i32 3, i32 %7, i32 %8, i16* %9), !dbg !3130
  store i32 %call8, i32* %status, align 4, !dbg !3131
  %10 = load i32, i32* %status, align 4, !dbg !3132
  store i32 %10, i32* %retval, align 4, !dbg !3133
  br label %return, !dbg !3133

return:                                           ; preds = %if.end7, %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !3134
  ret i32 %11, !dbg !3134
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @read_registers(%struct._modbus* %ctx, i32 %function, i32 %addr, i32 %nb, i16* %dest) #0 !dbg !3135 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %function.addr = alloca i32, align 4
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i16*, align 8
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %req = alloca [12 x i8], align 1
  %rsp = alloca [260 x i8], align 16
  %offset = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3138, metadata !451), !dbg !3139
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !3140, metadata !451), !dbg !3141
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3142, metadata !451), !dbg !3143
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3144, metadata !451), !dbg !3145
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !3146, metadata !451), !dbg !3147
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3148, metadata !451), !dbg !3149
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3150, metadata !451), !dbg !3151
  call void @llvm.dbg.declare(metadata [12 x i8]* %req, metadata !3152, metadata !451), !dbg !3153
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3154, metadata !451), !dbg !3155
  %0 = load i32, i32* %nb.addr, align 4, !dbg !3156
  %cmp = icmp sgt i32 %0, 125, !dbg !3158
  br i1 %cmp, label %if.then, label %if.end3, !dbg !3159

if.then:                                          ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3160
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 2, !dbg !3163
  %2 = load i32, i32* %debug, align 8, !dbg !3163
  %tobool = icmp ne i32 %2, 0, !dbg !3160
  br i1 %tobool, label %if.then1, label %if.end, !dbg !3164

if.then1:                                         ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3165
  %4 = load i32, i32* %nb.addr, align 4, !dbg !3167
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.45, i32 0, i32 0), i32 %4, i32 125), !dbg !3168
  br label %if.end, !dbg !3169

if.end:                                           ; preds = %if.then1, %if.then
  %call2 = call i32* @__errno_location() #9, !dbg !3170
  store i32 112345694, i32* %call2, align 4, !dbg !3171
  store i32 -1, i32* %retval, align 4, !dbg !3172
  br label %return, !dbg !3172

if.end3:                                          ; preds = %entry
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3173
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 7, !dbg !3174
  %6 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3174
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %6, i32 0, i32 5, !dbg !3175
  %7 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3175
  %8 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3176
  %9 = load i32, i32* %function.addr, align 4, !dbg !3177
  %10 = load i32, i32* %addr.addr, align 4, !dbg !3178
  %11 = load i32, i32* %nb.addr, align 4, !dbg !3179
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3180
  %call4 = call i32 %7(%struct._modbus* %8, i32 %9, i32 %10, i32 %11, i8* %arraydecay), !dbg !3173
  store i32 %call4, i32* %req_length, align 4, !dbg !3181
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3182
  %arraydecay5 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3183
  %13 = load i32, i32* %req_length, align 4, !dbg !3184
  %call6 = call i32 @send_msg(%struct._modbus* %12, i8* %arraydecay5, i32 %13), !dbg !3185
  store i32 %call6, i32* %rc, align 4, !dbg !3186
  %14 = load i32, i32* %rc, align 4, !dbg !3187
  %cmp7 = icmp sgt i32 %14, 0, !dbg !3189
  br i1 %cmp7, label %if.then8, label %if.end33, !dbg !3190

if.then8:                                         ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3191, metadata !451), !dbg !3193
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3194, metadata !451), !dbg !3195
  %15 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3196
  %arraydecay9 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3197
  %call10 = call i32 @_modbus_receive_msg(%struct._modbus* %15, i8* %arraydecay9, i32 1), !dbg !3198
  store i32 %call10, i32* %rc, align 4, !dbg !3199
  %16 = load i32, i32* %rc, align 4, !dbg !3200
  %cmp11 = icmp eq i32 %16, -1, !dbg !3202
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !3203

if.then12:                                        ; preds = %if.then8
  store i32 -1, i32* %retval, align 4, !dbg !3204
  br label %return, !dbg !3204

if.end13:                                         ; preds = %if.then8
  %17 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3205
  %arraydecay14 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3206
  %arraydecay15 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3207
  %18 = load i32, i32* %rc, align 4, !dbg !3208
  %call16 = call i32 @check_confirmation(%struct._modbus* %17, i8* %arraydecay14, i8* %arraydecay15, i32 %18), !dbg !3209
  store i32 %call16, i32* %rc, align 4, !dbg !3210
  %19 = load i32, i32* %rc, align 4, !dbg !3211
  %cmp17 = icmp eq i32 %19, -1, !dbg !3213
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !3214

if.then18:                                        ; preds = %if.end13
  store i32 -1, i32* %retval, align 4, !dbg !3215
  br label %return, !dbg !3215

if.end19:                                         ; preds = %if.end13
  %20 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3216
  %backend20 = getelementptr inbounds %struct._modbus, %struct._modbus* %20, i32 0, i32 7, !dbg !3217
  %21 = load %struct._modbus_backend*, %struct._modbus_backend** %backend20, align 8, !dbg !3217
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %21, i32 0, i32 1, !dbg !3218
  %22 = load i32, i32* %header_length, align 4, !dbg !3218
  store i32 %22, i32* %offset, align 4, !dbg !3219
  store i32 0, i32* %i, align 4, !dbg !3220
  br label %for.cond, !dbg !3222

for.cond:                                         ; preds = %for.inc, %if.end19
  %23 = load i32, i32* %i, align 4, !dbg !3223
  %24 = load i32, i32* %rc, align 4, !dbg !3225
  %cmp21 = icmp slt i32 %23, %24, !dbg !3226
  br i1 %cmp21, label %for.body, label %for.end, !dbg !3227

for.body:                                         ; preds = %for.cond
  %25 = load i32, i32* %offset, align 4, !dbg !3228
  %add = add nsw i32 %25, 2, !dbg !3230
  %26 = load i32, i32* %i, align 4, !dbg !3231
  %shl = shl i32 %26, 1, !dbg !3232
  %add22 = add nsw i32 %add, %shl, !dbg !3233
  %idxprom = sext i32 %add22 to i64, !dbg !3234
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom, !dbg !3234
  %27 = load i8, i8* %arrayidx, align 1, !dbg !3234
  %conv = zext i8 %27 to i32, !dbg !3234
  %shl23 = shl i32 %conv, 8, !dbg !3235
  %28 = load i32, i32* %offset, align 4, !dbg !3236
  %add24 = add nsw i32 %28, 3, !dbg !3237
  %29 = load i32, i32* %i, align 4, !dbg !3238
  %shl25 = shl i32 %29, 1, !dbg !3239
  %add26 = add nsw i32 %add24, %shl25, !dbg !3240
  %idxprom27 = sext i32 %add26 to i64, !dbg !3241
  %arrayidx28 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom27, !dbg !3241
  %30 = load i8, i8* %arrayidx28, align 1, !dbg !3241
  %conv29 = zext i8 %30 to i32, !dbg !3241
  %or = or i32 %shl23, %conv29, !dbg !3242
  %conv30 = trunc i32 %or to i16, !dbg !3243
  %31 = load i16*, i16** %dest.addr, align 8, !dbg !3244
  %32 = load i32, i32* %i, align 4, !dbg !3245
  %idxprom31 = sext i32 %32 to i64, !dbg !3244
  %arrayidx32 = getelementptr inbounds i16, i16* %31, i64 %idxprom31, !dbg !3244
  store i16 %conv30, i16* %arrayidx32, align 2, !dbg !3246
  br label %for.inc, !dbg !3247

for.inc:                                          ; preds = %for.body
  %33 = load i32, i32* %i, align 4, !dbg !3248
  %inc = add nsw i32 %33, 1, !dbg !3248
  store i32 %inc, i32* %i, align 4, !dbg !3248
  br label %for.cond, !dbg !3249, !llvm.loop !3250

for.end:                                          ; preds = %for.cond
  br label %if.end33, !dbg !3252

if.end33:                                         ; preds = %for.end, %if.end3
  %34 = load i32, i32* %rc, align 4, !dbg !3253
  store i32 %34, i32* %retval, align 4, !dbg !3254
  br label %return, !dbg !3254

return:                                           ; preds = %if.end33, %if.then18, %if.then12, %if.end
  %35 = load i32, i32* %retval, align 4, !dbg !3255
  ret i32 %35, !dbg !3255
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_read_input_registers(%struct._modbus* %ctx, i32 %addr, i32 %nb, i16* %dest) #0 !dbg !3256 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %dest.addr = alloca i16*, align 8
  %status = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3257, metadata !451), !dbg !3258
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3259, metadata !451), !dbg !3260
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3261, metadata !451), !dbg !3262
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !3263, metadata !451), !dbg !3264
  call void @llvm.dbg.declare(metadata i32* %status, metadata !3265, metadata !451), !dbg !3266
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3267
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3269
  br i1 %cmp, label %if.then, label %if.end, !dbg !3270

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3271
  store i32 22, i32* %call, align 4, !dbg !3273
  store i32 -1, i32* %retval, align 4, !dbg !3274
  br label %return, !dbg !3274

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !3275
  %cmp1 = icmp sgt i32 %1, 125, !dbg !3277
  br i1 %cmp1, label %if.then2, label %if.end5, !dbg !3278

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3279
  %3 = load i32, i32* %nb.addr, align 4, !dbg !3281
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.46, i32 0, i32 0), i32 %3, i32 125), !dbg !3282
  %call4 = call i32* @__errno_location() #9, !dbg !3283
  store i32 112345694, i32* %call4, align 4, !dbg !3284
  store i32 -1, i32* %retval, align 4, !dbg !3285
  br label %return, !dbg !3285

if.end5:                                          ; preds = %if.end
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3286
  %5 = load i32, i32* %addr.addr, align 4, !dbg !3287
  %6 = load i32, i32* %nb.addr, align 4, !dbg !3288
  %7 = load i16*, i16** %dest.addr, align 8, !dbg !3289
  %call6 = call i32 @read_registers(%struct._modbus* %4, i32 4, i32 %5, i32 %6, i16* %7), !dbg !3290
  store i32 %call6, i32* %status, align 4, !dbg !3291
  %8 = load i32, i32* %status, align 4, !dbg !3292
  store i32 %8, i32* %retval, align 4, !dbg !3293
  br label %return, !dbg !3293

return:                                           ; preds = %if.end5, %if.then2, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3294
  ret i32 %9, !dbg !3294
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_write_bit(%struct._modbus* %ctx, i32 %addr, i32 %status) #0 !dbg !3295 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %status.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3298, metadata !451), !dbg !3299
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3300, metadata !451), !dbg !3301
  store i32 %status, i32* %status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !3302, metadata !451), !dbg !3303
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3304
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3306
  br i1 %cmp, label %if.then, label %if.end, !dbg !3307

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3308
  store i32 22, i32* %call, align 4, !dbg !3310
  store i32 -1, i32* %retval, align 4, !dbg !3311
  br label %return, !dbg !3311

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3312
  %2 = load i32, i32* %addr.addr, align 4, !dbg !3313
  %3 = load i32, i32* %status.addr, align 4, !dbg !3314
  %tobool = icmp ne i32 %3, 0, !dbg !3314
  %4 = zext i1 %tobool to i64, !dbg !3314
  %cond = select i1 %tobool, i32 65280, i32 0, !dbg !3314
  %call1 = call i32 @write_single(%struct._modbus* %1, i32 5, i32 %2, i32 %cond), !dbg !3315
  store i32 %call1, i32* %retval, align 4, !dbg !3316
  br label %return, !dbg !3316

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !3317
  ret i32 %5, !dbg !3317
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @write_single(%struct._modbus* %ctx, i32 %function, i32 %addr, i32 %value) #0 !dbg !3318 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %function.addr = alloca i32, align 4
  %addr.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %req = alloca [12 x i8], align 1
  %rsp = alloca [260 x i8], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3321, metadata !451), !dbg !3322
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !3323, metadata !451), !dbg !3324
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3325, metadata !451), !dbg !3326
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !3327, metadata !451), !dbg !3328
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3329, metadata !451), !dbg !3330
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3331, metadata !451), !dbg !3332
  call void @llvm.dbg.declare(metadata [12 x i8]* %req, metadata !3333, metadata !451), !dbg !3334
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3335
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3337
  br i1 %cmp, label %if.then, label %if.end, !dbg !3338

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3339
  store i32 22, i32* %call, align 4, !dbg !3341
  store i32 -1, i32* %retval, align 4, !dbg !3342
  br label %return, !dbg !3342

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3343
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !3344
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3344
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 5, !dbg !3345
  %3 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3345
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3346
  %5 = load i32, i32* %function.addr, align 4, !dbg !3347
  %6 = load i32, i32* %addr.addr, align 4, !dbg !3348
  %7 = load i32, i32* %value.addr, align 4, !dbg !3349
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3350
  %call1 = call i32 %3(%struct._modbus* %4, i32 %5, i32 %6, i32 %7, i8* %arraydecay), !dbg !3343
  store i32 %call1, i32* %req_length, align 4, !dbg !3351
  %8 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3352
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3353
  %9 = load i32, i32* %req_length, align 4, !dbg !3354
  %call3 = call i32 @send_msg(%struct._modbus* %8, i8* %arraydecay2, i32 %9), !dbg !3355
  store i32 %call3, i32* %rc, align 4, !dbg !3356
  %10 = load i32, i32* %rc, align 4, !dbg !3357
  %cmp4 = icmp sgt i32 %10, 0, !dbg !3359
  br i1 %cmp4, label %if.then5, label %if.end14, !dbg !3360

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3361, metadata !451), !dbg !3363
  %11 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3364
  %arraydecay6 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3365
  %call7 = call i32 @_modbus_receive_msg(%struct._modbus* %11, i8* %arraydecay6, i32 1), !dbg !3366
  store i32 %call7, i32* %rc, align 4, !dbg !3367
  %12 = load i32, i32* %rc, align 4, !dbg !3368
  %cmp8 = icmp eq i32 %12, -1, !dbg !3370
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3371

if.then9:                                         ; preds = %if.then5
  store i32 -1, i32* %retval, align 4, !dbg !3372
  br label %return, !dbg !3372

if.end10:                                         ; preds = %if.then5
  %13 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3373
  %arraydecay11 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3374
  %arraydecay12 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3375
  %14 = load i32, i32* %rc, align 4, !dbg !3376
  %call13 = call i32 @check_confirmation(%struct._modbus* %13, i8* %arraydecay11, i8* %arraydecay12, i32 %14), !dbg !3377
  store i32 %call13, i32* %rc, align 4, !dbg !3378
  br label %if.end14, !dbg !3379

if.end14:                                         ; preds = %if.end10, %if.end
  %15 = load i32, i32* %rc, align 4, !dbg !3380
  store i32 %15, i32* %retval, align 4, !dbg !3381
  br label %return, !dbg !3381

return:                                           ; preds = %if.end14, %if.then9, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !3382
  ret i32 %16, !dbg !3382
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_write_register(%struct._modbus* %ctx, i32 %addr, i32 %value) #0 !dbg !3383 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3384, metadata !451), !dbg !3385
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3386, metadata !451), !dbg !3387
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !3388, metadata !451), !dbg !3389
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3390
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3392
  br i1 %cmp, label %if.then, label %if.end, !dbg !3393

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3394
  store i32 22, i32* %call, align 4, !dbg !3396
  store i32 -1, i32* %retval, align 4, !dbg !3397
  br label %return, !dbg !3397

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3398
  %2 = load i32, i32* %addr.addr, align 4, !dbg !3399
  %3 = load i32, i32* %value.addr, align 4, !dbg !3400
  %call1 = call i32 @write_single(%struct._modbus* %1, i32 6, i32 %2, i32 %3), !dbg !3401
  store i32 %call1, i32* %retval, align 4, !dbg !3402
  br label %return, !dbg !3402

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !3403
  ret i32 %4, !dbg !3403
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_write_bits(%struct._modbus* %ctx, i32 %addr, i32 %nb, i8* %src) #0 !dbg !3404 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %src.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  %i = alloca i32, align 4
  %byte_count = alloca i32, align 4
  %req_length = alloca i32, align 4
  %bit_check = alloca i32, align 4
  %pos = alloca i32, align 4
  %req = alloca [260 x i8], align 16
  %bit = alloca i32, align 4
  %rsp = alloca [260 x i8], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3407, metadata !451), !dbg !3408
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3409, metadata !451), !dbg !3410
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3411, metadata !451), !dbg !3412
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3413, metadata !451), !dbg !3414
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3415, metadata !451), !dbg !3416
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3417, metadata !451), !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %byte_count, metadata !3419, metadata !451), !dbg !3420
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3421, metadata !451), !dbg !3422
  call void @llvm.dbg.declare(metadata i32* %bit_check, metadata !3423, metadata !451), !dbg !3424
  store i32 0, i32* %bit_check, align 4, !dbg !3424
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !3425, metadata !451), !dbg !3426
  store i32 0, i32* %pos, align 4, !dbg !3426
  call void @llvm.dbg.declare(metadata [260 x i8]* %req, metadata !3427, metadata !451), !dbg !3428
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3429
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3431
  br i1 %cmp, label %if.then, label %if.end, !dbg !3432

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3433
  store i32 22, i32* %call, align 4, !dbg !3435
  store i32 -1, i32* %retval, align 4, !dbg !3436
  br label %return, !dbg !3436

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !3437
  %cmp1 = icmp sgt i32 %1, 1968, !dbg !3439
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !3440

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3441
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !3444
  %3 = load i32, i32* %debug, align 8, !dbg !3444
  %tobool = icmp ne i32 %3, 0, !dbg !3441
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !3445

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3446
  %5 = load i32, i32* %nb.addr, align 4, !dbg !3448
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.47, i32 0, i32 0), i32 %5, i32 1968), !dbg !3449
  br label %if.end5, !dbg !3450

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !3451
  store i32 112345694, i32* %call6, align 4, !dbg !3452
  store i32 -1, i32* %retval, align 4, !dbg !3453
  br label %return, !dbg !3453

if.end7:                                          ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3454
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %6, i32 0, i32 7, !dbg !3455
  %7 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3455
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %7, i32 0, i32 5, !dbg !3456
  %8 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3456
  %9 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3457
  %10 = load i32, i32* %addr.addr, align 4, !dbg !3458
  %11 = load i32, i32* %nb.addr, align 4, !dbg !3459
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3460
  %call8 = call i32 %8(%struct._modbus* %9, i32 15, i32 %10, i32 %11, i8* %arraydecay), !dbg !3454
  store i32 %call8, i32* %req_length, align 4, !dbg !3461
  %12 = load i32, i32* %nb.addr, align 4, !dbg !3462
  %div = sdiv i32 %12, 8, !dbg !3463
  %13 = load i32, i32* %nb.addr, align 4, !dbg !3464
  %rem = srem i32 %13, 8, !dbg !3465
  %tobool9 = icmp ne i32 %rem, 0, !dbg !3466
  %14 = zext i1 %tobool9 to i64, !dbg !3466
  %cond = select i1 %tobool9, i32 1, i32 0, !dbg !3466
  %add = add nsw i32 %div, %cond, !dbg !3467
  store i32 %add, i32* %byte_count, align 4, !dbg !3468
  %15 = load i32, i32* %byte_count, align 4, !dbg !3469
  %conv = trunc i32 %15 to i8, !dbg !3469
  %16 = load i32, i32* %req_length, align 4, !dbg !3470
  %inc = add nsw i32 %16, 1, !dbg !3470
  store i32 %inc, i32* %req_length, align 4, !dbg !3470
  %idxprom = sext i32 %16 to i64, !dbg !3471
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom, !dbg !3471
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3472
  store i32 0, i32* %i, align 4, !dbg !3473
  br label %for.cond, !dbg !3475

for.cond:                                         ; preds = %for.inc, %if.end7
  %17 = load i32, i32* %i, align 4, !dbg !3476
  %18 = load i32, i32* %byte_count, align 4, !dbg !3478
  %cmp10 = icmp slt i32 %17, %18, !dbg !3479
  br i1 %cmp10, label %for.body, label %for.end, !dbg !3480

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %bit, metadata !3481, metadata !451), !dbg !3483
  store i32 1, i32* %bit, align 4, !dbg !3484
  %19 = load i32, i32* %req_length, align 4, !dbg !3485
  %idxprom12 = sext i32 %19 to i64, !dbg !3486
  %arrayidx13 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom12, !dbg !3486
  store i8 0, i8* %arrayidx13, align 1, !dbg !3487
  br label %while.cond, !dbg !3488

while.cond:                                       ; preds = %if.end32, %for.body
  %20 = load i32, i32* %bit, align 4, !dbg !3489
  %and = and i32 %20, 255, !dbg !3490
  %tobool14 = icmp ne i32 %and, 0, !dbg !3490
  br i1 %tobool14, label %land.rhs, label %land.end, !dbg !3491

land.rhs:                                         ; preds = %while.cond
  %21 = load i32, i32* %bit_check, align 4, !dbg !3492
  %inc15 = add nsw i32 %21, 1, !dbg !3492
  store i32 %inc15, i32* %bit_check, align 4, !dbg !3492
  %22 = load i32, i32* %nb.addr, align 4, !dbg !3493
  %cmp16 = icmp slt i32 %21, %22, !dbg !3494
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %23 = phi i1 [ false, %while.cond ], [ %cmp16, %land.rhs ]
  br i1 %23, label %while.body, label %while.end, !dbg !3488

while.body:                                       ; preds = %land.end
  %24 = load i8*, i8** %src.addr, align 8, !dbg !3495
  %25 = load i32, i32* %pos, align 4, !dbg !3498
  %inc18 = add nsw i32 %25, 1, !dbg !3498
  store i32 %inc18, i32* %pos, align 4, !dbg !3498
  %idxprom19 = sext i32 %25 to i64, !dbg !3495
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %idxprom19, !dbg !3495
  %26 = load i8, i8* %arrayidx20, align 1, !dbg !3495
  %tobool21 = icmp ne i8 %26, 0, !dbg !3495
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !3499

if.then22:                                        ; preds = %while.body
  %27 = load i32, i32* %bit, align 4, !dbg !3500
  %28 = load i32, i32* %req_length, align 4, !dbg !3501
  %idxprom23 = sext i32 %28 to i64, !dbg !3502
  %arrayidx24 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom23, !dbg !3502
  %29 = load i8, i8* %arrayidx24, align 1, !dbg !3503
  %conv25 = zext i8 %29 to i32, !dbg !3503
  %or = or i32 %conv25, %27, !dbg !3503
  %conv26 = trunc i32 %or to i8, !dbg !3503
  store i8 %conv26, i8* %arrayidx24, align 1, !dbg !3503
  br label %if.end32, !dbg !3502

if.else:                                          ; preds = %while.body
  %30 = load i32, i32* %bit, align 4, !dbg !3504
  %neg = xor i32 %30, -1, !dbg !3505
  %31 = load i32, i32* %req_length, align 4, !dbg !3506
  %idxprom27 = sext i32 %31 to i64, !dbg !3507
  %arrayidx28 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom27, !dbg !3507
  %32 = load i8, i8* %arrayidx28, align 1, !dbg !3508
  %conv29 = zext i8 %32 to i32, !dbg !3508
  %and30 = and i32 %conv29, %neg, !dbg !3508
  %conv31 = trunc i32 %and30 to i8, !dbg !3508
  store i8 %conv31, i8* %arrayidx28, align 1, !dbg !3508
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then22
  %33 = load i32, i32* %bit, align 4, !dbg !3509
  %shl = shl i32 %33, 1, !dbg !3510
  store i32 %shl, i32* %bit, align 4, !dbg !3511
  br label %while.cond, !dbg !3488, !llvm.loop !3512

while.end:                                        ; preds = %land.end
  %34 = load i32, i32* %req_length, align 4, !dbg !3514
  %inc33 = add nsw i32 %34, 1, !dbg !3514
  store i32 %inc33, i32* %req_length, align 4, !dbg !3514
  br label %for.inc, !dbg !3515

for.inc:                                          ; preds = %while.end
  %35 = load i32, i32* %i, align 4, !dbg !3516
  %inc34 = add nsw i32 %35, 1, !dbg !3516
  store i32 %inc34, i32* %i, align 4, !dbg !3516
  br label %for.cond, !dbg !3517, !llvm.loop !3518

for.end:                                          ; preds = %for.cond
  %36 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3520
  %arraydecay35 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3521
  %37 = load i32, i32* %req_length, align 4, !dbg !3522
  %call36 = call i32 @send_msg(%struct._modbus* %36, i8* %arraydecay35, i32 %37), !dbg !3523
  store i32 %call36, i32* %rc, align 4, !dbg !3524
  %38 = load i32, i32* %rc, align 4, !dbg !3525
  %cmp37 = icmp sgt i32 %38, 0, !dbg !3527
  br i1 %cmp37, label %if.then39, label %if.end49, !dbg !3528

if.then39:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3529, metadata !451), !dbg !3531
  %39 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3532
  %arraydecay40 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3533
  %call41 = call i32 @_modbus_receive_msg(%struct._modbus* %39, i8* %arraydecay40, i32 1), !dbg !3534
  store i32 %call41, i32* %rc, align 4, !dbg !3535
  %40 = load i32, i32* %rc, align 4, !dbg !3536
  %cmp42 = icmp eq i32 %40, -1, !dbg !3538
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !3539

if.then44:                                        ; preds = %if.then39
  store i32 -1, i32* %retval, align 4, !dbg !3540
  br label %return, !dbg !3540

if.end45:                                         ; preds = %if.then39
  %41 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3541
  %arraydecay46 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3542
  %arraydecay47 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3543
  %42 = load i32, i32* %rc, align 4, !dbg !3544
  %call48 = call i32 @check_confirmation(%struct._modbus* %41, i8* %arraydecay46, i8* %arraydecay47, i32 %42), !dbg !3545
  store i32 %call48, i32* %rc, align 4, !dbg !3546
  br label %if.end49, !dbg !3547

if.end49:                                         ; preds = %if.end45, %for.end
  %43 = load i32, i32* %rc, align 4, !dbg !3548
  store i32 %43, i32* %retval, align 4, !dbg !3549
  br label %return, !dbg !3549

return:                                           ; preds = %if.end49, %if.then44, %if.end5, %if.then
  %44 = load i32, i32* %retval, align 4, !dbg !3550
  ret i32 %44, !dbg !3550
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_write_registers(%struct._modbus* %ctx, i32 %addr, i32 %nb, i16* %src) #0 !dbg !3551 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %src.addr = alloca i16*, align 8
  %rc = alloca i32, align 4
  %i = alloca i32, align 4
  %req_length = alloca i32, align 4
  %byte_count = alloca i32, align 4
  %req = alloca [260 x i8], align 16
  %rsp = alloca [260 x i8], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3556, metadata !451), !dbg !3557
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3558, metadata !451), !dbg !3559
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !3560, metadata !451), !dbg !3561
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !3562, metadata !451), !dbg !3563
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3564, metadata !451), !dbg !3565
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3566, metadata !451), !dbg !3567
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3568, metadata !451), !dbg !3569
  call void @llvm.dbg.declare(metadata i32* %byte_count, metadata !3570, metadata !451), !dbg !3571
  call void @llvm.dbg.declare(metadata [260 x i8]* %req, metadata !3572, metadata !451), !dbg !3573
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3574
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3576
  br i1 %cmp, label %if.then, label %if.end, !dbg !3577

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3578
  store i32 22, i32* %call, align 4, !dbg !3580
  store i32 -1, i32* %retval, align 4, !dbg !3581
  br label %return, !dbg !3581

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nb.addr, align 4, !dbg !3582
  %cmp1 = icmp sgt i32 %1, 123, !dbg !3584
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !3585

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3586
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !3589
  %3 = load i32, i32* %debug, align 8, !dbg !3589
  %tobool = icmp ne i32 %3, 0, !dbg !3586
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !3590

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3591
  %5 = load i32, i32* %nb.addr, align 4, !dbg !3593
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.48, i32 0, i32 0), i32 %5, i32 123), !dbg !3594
  br label %if.end5, !dbg !3595

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !3596
  store i32 112345694, i32* %call6, align 4, !dbg !3597
  store i32 -1, i32* %retval, align 4, !dbg !3598
  br label %return, !dbg !3598

if.end7:                                          ; preds = %if.end
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3599
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %6, i32 0, i32 7, !dbg !3600
  %7 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3600
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %7, i32 0, i32 5, !dbg !3601
  %8 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3601
  %9 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3602
  %10 = load i32, i32* %addr.addr, align 4, !dbg !3603
  %11 = load i32, i32* %nb.addr, align 4, !dbg !3604
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3605
  %call8 = call i32 %8(%struct._modbus* %9, i32 16, i32 %10, i32 %11, i8* %arraydecay), !dbg !3599
  store i32 %call8, i32* %req_length, align 4, !dbg !3606
  %12 = load i32, i32* %nb.addr, align 4, !dbg !3607
  %mul = mul nsw i32 %12, 2, !dbg !3608
  store i32 %mul, i32* %byte_count, align 4, !dbg !3609
  %13 = load i32, i32* %byte_count, align 4, !dbg !3610
  %conv = trunc i32 %13 to i8, !dbg !3610
  %14 = load i32, i32* %req_length, align 4, !dbg !3611
  %inc = add nsw i32 %14, 1, !dbg !3611
  store i32 %inc, i32* %req_length, align 4, !dbg !3611
  %idxprom = sext i32 %14 to i64, !dbg !3612
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom, !dbg !3612
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3613
  store i32 0, i32* %i, align 4, !dbg !3614
  br label %for.cond, !dbg !3616

for.cond:                                         ; preds = %for.inc, %if.end7
  %15 = load i32, i32* %i, align 4, !dbg !3617
  %16 = load i32, i32* %nb.addr, align 4, !dbg !3619
  %cmp9 = icmp slt i32 %15, %16, !dbg !3620
  br i1 %cmp9, label %for.body, label %for.end, !dbg !3621

for.body:                                         ; preds = %for.cond
  %17 = load i16*, i16** %src.addr, align 8, !dbg !3622
  %18 = load i32, i32* %i, align 4, !dbg !3624
  %idxprom11 = sext i32 %18 to i64, !dbg !3622
  %arrayidx12 = getelementptr inbounds i16, i16* %17, i64 %idxprom11, !dbg !3622
  %19 = load i16, i16* %arrayidx12, align 2, !dbg !3622
  %conv13 = zext i16 %19 to i32, !dbg !3622
  %shr = ashr i32 %conv13, 8, !dbg !3625
  %conv14 = trunc i32 %shr to i8, !dbg !3622
  %20 = load i32, i32* %req_length, align 4, !dbg !3626
  %inc15 = add nsw i32 %20, 1, !dbg !3626
  store i32 %inc15, i32* %req_length, align 4, !dbg !3626
  %idxprom16 = sext i32 %20 to i64, !dbg !3627
  %arrayidx17 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom16, !dbg !3627
  store i8 %conv14, i8* %arrayidx17, align 1, !dbg !3628
  %21 = load i16*, i16** %src.addr, align 8, !dbg !3629
  %22 = load i32, i32* %i, align 4, !dbg !3630
  %idxprom18 = sext i32 %22 to i64, !dbg !3629
  %arrayidx19 = getelementptr inbounds i16, i16* %21, i64 %idxprom18, !dbg !3629
  %23 = load i16, i16* %arrayidx19, align 2, !dbg !3629
  %conv20 = zext i16 %23 to i32, !dbg !3629
  %and = and i32 %conv20, 255, !dbg !3631
  %conv21 = trunc i32 %and to i8, !dbg !3629
  %24 = load i32, i32* %req_length, align 4, !dbg !3632
  %inc22 = add nsw i32 %24, 1, !dbg !3632
  store i32 %inc22, i32* %req_length, align 4, !dbg !3632
  %idxprom23 = sext i32 %24 to i64, !dbg !3633
  %arrayidx24 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom23, !dbg !3633
  store i8 %conv21, i8* %arrayidx24, align 1, !dbg !3634
  br label %for.inc, !dbg !3635

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !dbg !3636
  %inc25 = add nsw i32 %25, 1, !dbg !3636
  store i32 %inc25, i32* %i, align 4, !dbg !3636
  br label %for.cond, !dbg !3637, !llvm.loop !3638

for.end:                                          ; preds = %for.cond
  %26 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3640
  %arraydecay26 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3641
  %27 = load i32, i32* %req_length, align 4, !dbg !3642
  %call27 = call i32 @send_msg(%struct._modbus* %26, i8* %arraydecay26, i32 %27), !dbg !3643
  store i32 %call27, i32* %rc, align 4, !dbg !3644
  %28 = load i32, i32* %rc, align 4, !dbg !3645
  %cmp28 = icmp sgt i32 %28, 0, !dbg !3647
  br i1 %cmp28, label %if.then30, label %if.end40, !dbg !3648

if.then30:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3649, metadata !451), !dbg !3651
  %29 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3652
  %arraydecay31 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3653
  %call32 = call i32 @_modbus_receive_msg(%struct._modbus* %29, i8* %arraydecay31, i32 1), !dbg !3654
  store i32 %call32, i32* %rc, align 4, !dbg !3655
  %30 = load i32, i32* %rc, align 4, !dbg !3656
  %cmp33 = icmp eq i32 %30, -1, !dbg !3658
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !3659

if.then35:                                        ; preds = %if.then30
  store i32 -1, i32* %retval, align 4, !dbg !3660
  br label %return, !dbg !3660

if.end36:                                         ; preds = %if.then30
  %31 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3661
  %arraydecay37 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3662
  %arraydecay38 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3663
  %32 = load i32, i32* %rc, align 4, !dbg !3664
  %call39 = call i32 @check_confirmation(%struct._modbus* %31, i8* %arraydecay37, i8* %arraydecay38, i32 %32), !dbg !3665
  store i32 %call39, i32* %rc, align 4, !dbg !3666
  br label %if.end40, !dbg !3667

if.end40:                                         ; preds = %if.end36, %for.end
  %33 = load i32, i32* %rc, align 4, !dbg !3668
  store i32 %33, i32* %retval, align 4, !dbg !3669
  br label %return, !dbg !3669

return:                                           ; preds = %if.end40, %if.then35, %if.end5, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !3670
  ret i32 %34, !dbg !3670
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_mask_write_register(%struct._modbus* %ctx, i32 %addr, i16 zeroext %and_mask, i16 zeroext %or_mask) #0 !dbg !3671 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %addr.addr = alloca i32, align 4
  %and_mask.addr = alloca i16, align 2
  %or_mask.addr = alloca i16, align 2
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %req = alloca [14 x i8], align 1
  %rsp = alloca [260 x i8], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3674, metadata !451), !dbg !3675
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !3676, metadata !451), !dbg !3677
  store i16 %and_mask, i16* %and_mask.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %and_mask.addr, metadata !3678, metadata !451), !dbg !3679
  store i16 %or_mask, i16* %or_mask.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %or_mask.addr, metadata !3680, metadata !451), !dbg !3681
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3682, metadata !451), !dbg !3683
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3684, metadata !451), !dbg !3685
  call void @llvm.dbg.declare(metadata [14 x i8]* %req, metadata !3686, metadata !451), !dbg !3688
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3689
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 7, !dbg !3690
  %1 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3690
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %1, i32 0, i32 5, !dbg !3691
  %2 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3691
  %3 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3692
  %4 = load i32, i32* %addr.addr, align 4, !dbg !3693
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %req, i32 0, i32 0, !dbg !3694
  %call = call i32 %2(%struct._modbus* %3, i32 22, i32 %4, i32 0, i8* %arraydecay), !dbg !3689
  store i32 %call, i32* %req_length, align 4, !dbg !3695
  %5 = load i32, i32* %req_length, align 4, !dbg !3696
  %sub = sub nsw i32 %5, 2, !dbg !3696
  store i32 %sub, i32* %req_length, align 4, !dbg !3696
  %6 = load i16, i16* %and_mask.addr, align 2, !dbg !3697
  %conv = zext i16 %6 to i32, !dbg !3697
  %shr = ashr i32 %conv, 8, !dbg !3698
  %conv1 = trunc i32 %shr to i8, !dbg !3697
  %7 = load i32, i32* %req_length, align 4, !dbg !3699
  %inc = add nsw i32 %7, 1, !dbg !3699
  store i32 %inc, i32* %req_length, align 4, !dbg !3699
  %idxprom = sext i32 %7 to i64, !dbg !3700
  %arrayidx = getelementptr inbounds [14 x i8], [14 x i8]* %req, i64 0, i64 %idxprom, !dbg !3700
  store i8 %conv1, i8* %arrayidx, align 1, !dbg !3701
  %8 = load i16, i16* %and_mask.addr, align 2, !dbg !3702
  %conv2 = zext i16 %8 to i32, !dbg !3702
  %and = and i32 %conv2, 255, !dbg !3703
  %conv3 = trunc i32 %and to i8, !dbg !3702
  %9 = load i32, i32* %req_length, align 4, !dbg !3704
  %inc4 = add nsw i32 %9, 1, !dbg !3704
  store i32 %inc4, i32* %req_length, align 4, !dbg !3704
  %idxprom5 = sext i32 %9 to i64, !dbg !3705
  %arrayidx6 = getelementptr inbounds [14 x i8], [14 x i8]* %req, i64 0, i64 %idxprom5, !dbg !3705
  store i8 %conv3, i8* %arrayidx6, align 1, !dbg !3706
  %10 = load i16, i16* %or_mask.addr, align 2, !dbg !3707
  %conv7 = zext i16 %10 to i32, !dbg !3707
  %shr8 = ashr i32 %conv7, 8, !dbg !3708
  %conv9 = trunc i32 %shr8 to i8, !dbg !3707
  %11 = load i32, i32* %req_length, align 4, !dbg !3709
  %inc10 = add nsw i32 %11, 1, !dbg !3709
  store i32 %inc10, i32* %req_length, align 4, !dbg !3709
  %idxprom11 = sext i32 %11 to i64, !dbg !3710
  %arrayidx12 = getelementptr inbounds [14 x i8], [14 x i8]* %req, i64 0, i64 %idxprom11, !dbg !3710
  store i8 %conv9, i8* %arrayidx12, align 1, !dbg !3711
  %12 = load i16, i16* %or_mask.addr, align 2, !dbg !3712
  %conv13 = zext i16 %12 to i32, !dbg !3712
  %and14 = and i32 %conv13, 255, !dbg !3713
  %conv15 = trunc i32 %and14 to i8, !dbg !3712
  %13 = load i32, i32* %req_length, align 4, !dbg !3714
  %inc16 = add nsw i32 %13, 1, !dbg !3714
  store i32 %inc16, i32* %req_length, align 4, !dbg !3714
  %idxprom17 = sext i32 %13 to i64, !dbg !3715
  %arrayidx18 = getelementptr inbounds [14 x i8], [14 x i8]* %req, i64 0, i64 %idxprom17, !dbg !3715
  store i8 %conv15, i8* %arrayidx18, align 1, !dbg !3716
  %14 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3717
  %arraydecay19 = getelementptr inbounds [14 x i8], [14 x i8]* %req, i32 0, i32 0, !dbg !3718
  %15 = load i32, i32* %req_length, align 4, !dbg !3719
  %call20 = call i32 @send_msg(%struct._modbus* %14, i8* %arraydecay19, i32 %15), !dbg !3720
  store i32 %call20, i32* %rc, align 4, !dbg !3721
  %16 = load i32, i32* %rc, align 4, !dbg !3722
  %cmp = icmp sgt i32 %16, 0, !dbg !3724
  br i1 %cmp, label %if.then, label %if.end30, !dbg !3725

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3726, metadata !451), !dbg !3728
  %17 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3729
  %arraydecay22 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3730
  %call23 = call i32 @_modbus_receive_msg(%struct._modbus* %17, i8* %arraydecay22, i32 1), !dbg !3731
  store i32 %call23, i32* %rc, align 4, !dbg !3732
  %18 = load i32, i32* %rc, align 4, !dbg !3733
  %cmp24 = icmp eq i32 %18, -1, !dbg !3735
  br i1 %cmp24, label %if.then26, label %if.end, !dbg !3736

if.then26:                                        ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !3737
  br label %return, !dbg !3737

if.end:                                           ; preds = %if.then
  %19 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3738
  %arraydecay27 = getelementptr inbounds [14 x i8], [14 x i8]* %req, i32 0, i32 0, !dbg !3739
  %arraydecay28 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3740
  %20 = load i32, i32* %rc, align 4, !dbg !3741
  %call29 = call i32 @check_confirmation(%struct._modbus* %19, i8* %arraydecay27, i8* %arraydecay28, i32 %20), !dbg !3742
  store i32 %call29, i32* %rc, align 4, !dbg !3743
  br label %if.end30, !dbg !3744

if.end30:                                         ; preds = %if.end, %entry
  %21 = load i32, i32* %rc, align 4, !dbg !3745
  store i32 %21, i32* %retval, align 4, !dbg !3746
  br label %return, !dbg !3746

return:                                           ; preds = %if.end30, %if.then26
  %22 = load i32, i32* %retval, align 4, !dbg !3747
  ret i32 %22, !dbg !3747
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_write_and_read_registers(%struct._modbus* %ctx, i32 %write_addr, i32 %write_nb, i16* %src, i32 %read_addr, i32 %read_nb, i16* %dest) #0 !dbg !3748 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %write_addr.addr = alloca i32, align 4
  %write_nb.addr = alloca i32, align 4
  %src.addr = alloca i16*, align 8
  %read_addr.addr = alloca i32, align 4
  %read_nb.addr = alloca i32, align 4
  %dest.addr = alloca i16*, align 8
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %i = alloca i32, align 4
  %byte_count = alloca i32, align 4
  %req = alloca [260 x i8], align 16
  %rsp = alloca [260 x i8], align 16
  %offset = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3751, metadata !451), !dbg !3752
  store i32 %write_addr, i32* %write_addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %write_addr.addr, metadata !3753, metadata !451), !dbg !3754
  store i32 %write_nb, i32* %write_nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %write_nb.addr, metadata !3755, metadata !451), !dbg !3756
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !3757, metadata !451), !dbg !3758
  store i32 %read_addr, i32* %read_addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %read_addr.addr, metadata !3759, metadata !451), !dbg !3760
  store i32 %read_nb, i32* %read_nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %read_nb.addr, metadata !3761, metadata !451), !dbg !3762
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !3763, metadata !451), !dbg !3764
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3765, metadata !451), !dbg !3766
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3767, metadata !451), !dbg !3768
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3769, metadata !451), !dbg !3770
  call void @llvm.dbg.declare(metadata i32* %byte_count, metadata !3771, metadata !451), !dbg !3772
  call void @llvm.dbg.declare(metadata [260 x i8]* %req, metadata !3773, metadata !451), !dbg !3774
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3775, metadata !451), !dbg !3776
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3777
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3779
  br i1 %cmp, label %if.then, label %if.end, !dbg !3780

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !3781
  store i32 22, i32* %call, align 4, !dbg !3783
  store i32 -1, i32* %retval, align 4, !dbg !3784
  br label %return, !dbg !3784

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %write_nb.addr, align 4, !dbg !3785
  %cmp1 = icmp sgt i32 %1, 121, !dbg !3787
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !3788

if.then2:                                         ; preds = %if.end
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3789
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !3792
  %3 = load i32, i32* %debug, align 8, !dbg !3792
  %tobool = icmp ne i32 %3, 0, !dbg !3789
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !3793

if.then3:                                         ; preds = %if.then2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3794
  %5 = load i32, i32* %write_nb.addr, align 4, !dbg !3796
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.49, i32 0, i32 0), i32 %5, i32 121), !dbg !3797
  br label %if.end5, !dbg !3798

if.end5:                                          ; preds = %if.then3, %if.then2
  %call6 = call i32* @__errno_location() #9, !dbg !3799
  store i32 112345694, i32* %call6, align 4, !dbg !3800
  store i32 -1, i32* %retval, align 4, !dbg !3801
  br label %return, !dbg !3801

if.end7:                                          ; preds = %if.end
  %6 = load i32, i32* %read_nb.addr, align 4, !dbg !3802
  %cmp8 = icmp sgt i32 %6, 125, !dbg !3804
  br i1 %cmp8, label %if.then9, label %if.end16, !dbg !3805

if.then9:                                         ; preds = %if.end7
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3806
  %debug10 = getelementptr inbounds %struct._modbus, %struct._modbus* %7, i32 0, i32 2, !dbg !3809
  %8 = load i32, i32* %debug10, align 8, !dbg !3809
  %tobool11 = icmp ne i32 %8, 0, !dbg !3806
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !3810

if.then12:                                        ; preds = %if.then9
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3811
  %10 = load i32, i32* %read_nb.addr, align 4, !dbg !3813
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.45, i32 0, i32 0), i32 %10, i32 125), !dbg !3814
  br label %if.end14, !dbg !3815

if.end14:                                         ; preds = %if.then12, %if.then9
  %call15 = call i32* @__errno_location() #9, !dbg !3816
  store i32 112345694, i32* %call15, align 4, !dbg !3817
  store i32 -1, i32* %retval, align 4, !dbg !3818
  br label %return, !dbg !3818

if.end16:                                         ; preds = %if.end7
  %11 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3819
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %11, i32 0, i32 7, !dbg !3820
  %12 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3820
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %12, i32 0, i32 5, !dbg !3821
  %13 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3821
  %14 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3822
  %15 = load i32, i32* %read_addr.addr, align 4, !dbg !3823
  %16 = load i32, i32* %read_nb.addr, align 4, !dbg !3824
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3825
  %call17 = call i32 %13(%struct._modbus* %14, i32 23, i32 %15, i32 %16, i8* %arraydecay), !dbg !3819
  store i32 %call17, i32* %req_length, align 4, !dbg !3826
  %17 = load i32, i32* %write_addr.addr, align 4, !dbg !3827
  %shr = ashr i32 %17, 8, !dbg !3828
  %conv = trunc i32 %shr to i8, !dbg !3827
  %18 = load i32, i32* %req_length, align 4, !dbg !3829
  %inc = add nsw i32 %18, 1, !dbg !3829
  store i32 %inc, i32* %req_length, align 4, !dbg !3829
  %idxprom = sext i32 %18 to i64, !dbg !3830
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom, !dbg !3830
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3831
  %19 = load i32, i32* %write_addr.addr, align 4, !dbg !3832
  %and = and i32 %19, 255, !dbg !3833
  %conv18 = trunc i32 %and to i8, !dbg !3832
  %20 = load i32, i32* %req_length, align 4, !dbg !3834
  %inc19 = add nsw i32 %20, 1, !dbg !3834
  store i32 %inc19, i32* %req_length, align 4, !dbg !3834
  %idxprom20 = sext i32 %20 to i64, !dbg !3835
  %arrayidx21 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom20, !dbg !3835
  store i8 %conv18, i8* %arrayidx21, align 1, !dbg !3836
  %21 = load i32, i32* %write_nb.addr, align 4, !dbg !3837
  %shr22 = ashr i32 %21, 8, !dbg !3838
  %conv23 = trunc i32 %shr22 to i8, !dbg !3837
  %22 = load i32, i32* %req_length, align 4, !dbg !3839
  %inc24 = add nsw i32 %22, 1, !dbg !3839
  store i32 %inc24, i32* %req_length, align 4, !dbg !3839
  %idxprom25 = sext i32 %22 to i64, !dbg !3840
  %arrayidx26 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom25, !dbg !3840
  store i8 %conv23, i8* %arrayidx26, align 1, !dbg !3841
  %23 = load i32, i32* %write_nb.addr, align 4, !dbg !3842
  %and27 = and i32 %23, 255, !dbg !3843
  %conv28 = trunc i32 %and27 to i8, !dbg !3842
  %24 = load i32, i32* %req_length, align 4, !dbg !3844
  %inc29 = add nsw i32 %24, 1, !dbg !3844
  store i32 %inc29, i32* %req_length, align 4, !dbg !3844
  %idxprom30 = sext i32 %24 to i64, !dbg !3845
  %arrayidx31 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom30, !dbg !3845
  store i8 %conv28, i8* %arrayidx31, align 1, !dbg !3846
  %25 = load i32, i32* %write_nb.addr, align 4, !dbg !3847
  %mul = mul nsw i32 %25, 2, !dbg !3848
  store i32 %mul, i32* %byte_count, align 4, !dbg !3849
  %26 = load i32, i32* %byte_count, align 4, !dbg !3850
  %conv32 = trunc i32 %26 to i8, !dbg !3850
  %27 = load i32, i32* %req_length, align 4, !dbg !3851
  %inc33 = add nsw i32 %27, 1, !dbg !3851
  store i32 %inc33, i32* %req_length, align 4, !dbg !3851
  %idxprom34 = sext i32 %27 to i64, !dbg !3852
  %arrayidx35 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom34, !dbg !3852
  store i8 %conv32, i8* %arrayidx35, align 1, !dbg !3853
  store i32 0, i32* %i, align 4, !dbg !3854
  br label %for.cond, !dbg !3856

for.cond:                                         ; preds = %for.inc, %if.end16
  %28 = load i32, i32* %i, align 4, !dbg !3857
  %29 = load i32, i32* %write_nb.addr, align 4, !dbg !3859
  %cmp36 = icmp slt i32 %28, %29, !dbg !3860
  br i1 %cmp36, label %for.body, label %for.end, !dbg !3861

for.body:                                         ; preds = %for.cond
  %30 = load i16*, i16** %src.addr, align 8, !dbg !3862
  %31 = load i32, i32* %i, align 4, !dbg !3864
  %idxprom38 = sext i32 %31 to i64, !dbg !3862
  %arrayidx39 = getelementptr inbounds i16, i16* %30, i64 %idxprom38, !dbg !3862
  %32 = load i16, i16* %arrayidx39, align 2, !dbg !3862
  %conv40 = zext i16 %32 to i32, !dbg !3862
  %shr41 = ashr i32 %conv40, 8, !dbg !3865
  %conv42 = trunc i32 %shr41 to i8, !dbg !3862
  %33 = load i32, i32* %req_length, align 4, !dbg !3866
  %inc43 = add nsw i32 %33, 1, !dbg !3866
  store i32 %inc43, i32* %req_length, align 4, !dbg !3866
  %idxprom44 = sext i32 %33 to i64, !dbg !3867
  %arrayidx45 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom44, !dbg !3867
  store i8 %conv42, i8* %arrayidx45, align 1, !dbg !3868
  %34 = load i16*, i16** %src.addr, align 8, !dbg !3869
  %35 = load i32, i32* %i, align 4, !dbg !3870
  %idxprom46 = sext i32 %35 to i64, !dbg !3869
  %arrayidx47 = getelementptr inbounds i16, i16* %34, i64 %idxprom46, !dbg !3869
  %36 = load i16, i16* %arrayidx47, align 2, !dbg !3869
  %conv48 = zext i16 %36 to i32, !dbg !3869
  %and49 = and i32 %conv48, 255, !dbg !3871
  %conv50 = trunc i32 %and49 to i8, !dbg !3869
  %37 = load i32, i32* %req_length, align 4, !dbg !3872
  %inc51 = add nsw i32 %37, 1, !dbg !3872
  store i32 %inc51, i32* %req_length, align 4, !dbg !3872
  %idxprom52 = sext i32 %37 to i64, !dbg !3873
  %arrayidx53 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i64 0, i64 %idxprom52, !dbg !3873
  store i8 %conv50, i8* %arrayidx53, align 1, !dbg !3874
  br label %for.inc, !dbg !3875

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4, !dbg !3876
  %inc54 = add nsw i32 %38, 1, !dbg !3876
  store i32 %inc54, i32* %i, align 4, !dbg !3876
  br label %for.cond, !dbg !3877, !llvm.loop !3878

for.end:                                          ; preds = %for.cond
  %39 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3880
  %arraydecay55 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3881
  %40 = load i32, i32* %req_length, align 4, !dbg !3882
  %call56 = call i32 @send_msg(%struct._modbus* %39, i8* %arraydecay55, i32 %40), !dbg !3883
  store i32 %call56, i32* %rc, align 4, !dbg !3884
  %41 = load i32, i32* %rc, align 4, !dbg !3885
  %cmp57 = icmp sgt i32 %41, 0, !dbg !3887
  br i1 %cmp57, label %if.then59, label %if.end95, !dbg !3888

if.then59:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3889, metadata !451), !dbg !3891
  %42 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3892
  %arraydecay60 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3893
  %call61 = call i32 @_modbus_receive_msg(%struct._modbus* %42, i8* %arraydecay60, i32 1), !dbg !3894
  store i32 %call61, i32* %rc, align 4, !dbg !3895
  %43 = load i32, i32* %rc, align 4, !dbg !3896
  %cmp62 = icmp eq i32 %43, -1, !dbg !3898
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !3899

if.then64:                                        ; preds = %if.then59
  store i32 -1, i32* %retval, align 4, !dbg !3900
  br label %return, !dbg !3900

if.end65:                                         ; preds = %if.then59
  %44 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3901
  %arraydecay66 = getelementptr inbounds [260 x i8], [260 x i8]* %req, i32 0, i32 0, !dbg !3902
  %arraydecay67 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !3903
  %45 = load i32, i32* %rc, align 4, !dbg !3904
  %call68 = call i32 @check_confirmation(%struct._modbus* %44, i8* %arraydecay66, i8* %arraydecay67, i32 %45), !dbg !3905
  store i32 %call68, i32* %rc, align 4, !dbg !3906
  %46 = load i32, i32* %rc, align 4, !dbg !3907
  %cmp69 = icmp eq i32 %46, -1, !dbg !3909
  br i1 %cmp69, label %if.then71, label %if.end72, !dbg !3910

if.then71:                                        ; preds = %if.end65
  store i32 -1, i32* %retval, align 4, !dbg !3911
  br label %return, !dbg !3911

if.end72:                                         ; preds = %if.end65
  %47 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3912
  %backend73 = getelementptr inbounds %struct._modbus, %struct._modbus* %47, i32 0, i32 7, !dbg !3913
  %48 = load %struct._modbus_backend*, %struct._modbus_backend** %backend73, align 8, !dbg !3913
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %48, i32 0, i32 1, !dbg !3914
  %49 = load i32, i32* %header_length, align 4, !dbg !3914
  store i32 %49, i32* %offset, align 4, !dbg !3915
  store i32 0, i32* %i, align 4, !dbg !3916
  br label %for.cond74, !dbg !3918

for.cond74:                                       ; preds = %for.inc92, %if.end72
  %50 = load i32, i32* %i, align 4, !dbg !3919
  %51 = load i32, i32* %rc, align 4, !dbg !3921
  %cmp75 = icmp slt i32 %50, %51, !dbg !3922
  br i1 %cmp75, label %for.body77, label %for.end94, !dbg !3923

for.body77:                                       ; preds = %for.cond74
  %52 = load i32, i32* %offset, align 4, !dbg !3924
  %add = add nsw i32 %52, 2, !dbg !3926
  %53 = load i32, i32* %i, align 4, !dbg !3927
  %shl = shl i32 %53, 1, !dbg !3928
  %add78 = add nsw i32 %add, %shl, !dbg !3929
  %idxprom79 = sext i32 %add78 to i64, !dbg !3930
  %arrayidx80 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom79, !dbg !3930
  %54 = load i8, i8* %arrayidx80, align 1, !dbg !3930
  %conv81 = zext i8 %54 to i32, !dbg !3930
  %shl82 = shl i32 %conv81, 8, !dbg !3931
  %55 = load i32, i32* %offset, align 4, !dbg !3932
  %add83 = add nsw i32 %55, 3, !dbg !3933
  %56 = load i32, i32* %i, align 4, !dbg !3934
  %shl84 = shl i32 %56, 1, !dbg !3935
  %add85 = add nsw i32 %add83, %shl84, !dbg !3936
  %idxprom86 = sext i32 %add85 to i64, !dbg !3937
  %arrayidx87 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom86, !dbg !3937
  %57 = load i8, i8* %arrayidx87, align 1, !dbg !3937
  %conv88 = zext i8 %57 to i32, !dbg !3937
  %or = or i32 %shl82, %conv88, !dbg !3938
  %conv89 = trunc i32 %or to i16, !dbg !3939
  %58 = load i16*, i16** %dest.addr, align 8, !dbg !3940
  %59 = load i32, i32* %i, align 4, !dbg !3941
  %idxprom90 = sext i32 %59 to i64, !dbg !3940
  %arrayidx91 = getelementptr inbounds i16, i16* %58, i64 %idxprom90, !dbg !3940
  store i16 %conv89, i16* %arrayidx91, align 2, !dbg !3942
  br label %for.inc92, !dbg !3943

for.inc92:                                        ; preds = %for.body77
  %60 = load i32, i32* %i, align 4, !dbg !3944
  %inc93 = add nsw i32 %60, 1, !dbg !3944
  store i32 %inc93, i32* %i, align 4, !dbg !3944
  br label %for.cond74, !dbg !3945, !llvm.loop !3946

for.end94:                                        ; preds = %for.cond74
  br label %if.end95, !dbg !3948

if.end95:                                         ; preds = %for.end94, %for.end
  %61 = load i32, i32* %rc, align 4, !dbg !3949
  store i32 %61, i32* %retval, align 4, !dbg !3950
  br label %return, !dbg !3950

return:                                           ; preds = %if.end95, %if.then71, %if.then64, %if.end14, %if.end5, %if.then
  %62 = load i32, i32* %retval, align 4, !dbg !3951
  ret i32 %62, !dbg !3951
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_report_slave_id(%struct._modbus* %ctx, i32 %max_dest, i8* %dest) #0 !dbg !3952 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %max_dest.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  %req_length = alloca i32, align 4
  %req = alloca [12 x i8], align 1
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  %rsp = alloca [260 x i8], align 16
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !3955, metadata !451), !dbg !3956
  store i32 %max_dest, i32* %max_dest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_dest.addr, metadata !3957, metadata !451), !dbg !3958
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !3959, metadata !451), !dbg !3960
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3961, metadata !451), !dbg !3962
  call void @llvm.dbg.declare(metadata i32* %req_length, metadata !3963, metadata !451), !dbg !3964
  call void @llvm.dbg.declare(metadata [12 x i8]* %req, metadata !3965, metadata !451), !dbg !3966
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3967
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !3969
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3970

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %max_dest.addr, align 4, !dbg !3971
  %cmp1 = icmp sle i32 %1, 0, !dbg !3972
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3973

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #9, !dbg !3974
  store i32 22, i32* %call, align 4, !dbg !3976
  store i32 -1, i32* %retval, align 4, !dbg !3977
  br label %return, !dbg !3977

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3978
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 7, !dbg !3979
  %3 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !3979
  %build_request_basis = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %3, i32 0, i32 5, !dbg !3980
  %4 = load i32 (%struct._modbus*, i32, i32, i32, i8*)*, i32 (%struct._modbus*, i32, i32, i32, i8*)** %build_request_basis, align 8, !dbg !3980
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3981
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3982
  %call2 = call i32 %4(%struct._modbus* %5, i32 17, i32 0, i32 0, i8* %arraydecay), !dbg !3978
  store i32 %call2, i32* %req_length, align 4, !dbg !3983
  %6 = load i32, i32* %req_length, align 4, !dbg !3984
  %sub = sub nsw i32 %6, 4, !dbg !3984
  store i32 %sub, i32* %req_length, align 4, !dbg !3984
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !3985
  %arraydecay3 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !3986
  %8 = load i32, i32* %req_length, align 4, !dbg !3987
  %call4 = call i32 @send_msg(%struct._modbus* %7, i8* %arraydecay3, i32 %8), !dbg !3988
  store i32 %call4, i32* %rc, align 4, !dbg !3989
  %9 = load i32, i32* %rc, align 4, !dbg !3990
  %cmp5 = icmp sgt i32 %9, 0, !dbg !3992
  br i1 %cmp5, label %if.then6, label %if.end24, !dbg !3993

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3994, metadata !451), !dbg !3996
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3997, metadata !451), !dbg !3998
  call void @llvm.dbg.declare(metadata [260 x i8]* %rsp, metadata !3999, metadata !451), !dbg !4000
  %10 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4001
  %arraydecay7 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !4002
  %call8 = call i32 @_modbus_receive_msg(%struct._modbus* %10, i8* %arraydecay7, i32 1), !dbg !4003
  store i32 %call8, i32* %rc, align 4, !dbg !4004
  %11 = load i32, i32* %rc, align 4, !dbg !4005
  %cmp9 = icmp eq i32 %11, -1, !dbg !4007
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !4008

if.then10:                                        ; preds = %if.then6
  store i32 -1, i32* %retval, align 4, !dbg !4009
  br label %return, !dbg !4009

if.end11:                                         ; preds = %if.then6
  %12 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4010
  %arraydecay12 = getelementptr inbounds [12 x i8], [12 x i8]* %req, i32 0, i32 0, !dbg !4011
  %arraydecay13 = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i32 0, i32 0, !dbg !4012
  %13 = load i32, i32* %rc, align 4, !dbg !4013
  %call14 = call i32 @check_confirmation(%struct._modbus* %12, i8* %arraydecay12, i8* %arraydecay13, i32 %13), !dbg !4014
  store i32 %call14, i32* %rc, align 4, !dbg !4015
  %14 = load i32, i32* %rc, align 4, !dbg !4016
  %cmp15 = icmp eq i32 %14, -1, !dbg !4018
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !4019

if.then16:                                        ; preds = %if.end11
  store i32 -1, i32* %retval, align 4, !dbg !4020
  br label %return, !dbg !4020

if.end17:                                         ; preds = %if.end11
  %15 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4021
  %backend18 = getelementptr inbounds %struct._modbus, %struct._modbus* %15, i32 0, i32 7, !dbg !4022
  %16 = load %struct._modbus_backend*, %struct._modbus_backend** %backend18, align 8, !dbg !4022
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %16, i32 0, i32 1, !dbg !4023
  %17 = load i32, i32* %header_length, align 4, !dbg !4023
  %add = add i32 %17, 2, !dbg !4024
  store i32 %add, i32* %offset, align 4, !dbg !4025
  store i32 0, i32* %i, align 4, !dbg !4026
  br label %for.cond, !dbg !4028

for.cond:                                         ; preds = %for.inc, %if.end17
  %18 = load i32, i32* %i, align 4, !dbg !4029
  %19 = load i32, i32* %rc, align 4, !dbg !4031
  %cmp19 = icmp slt i32 %18, %19, !dbg !4032
  br i1 %cmp19, label %land.rhs, label %land.end, !dbg !4033

land.rhs:                                         ; preds = %for.cond
  %20 = load i32, i32* %i, align 4, !dbg !4034
  %21 = load i32, i32* %max_dest.addr, align 4, !dbg !4035
  %cmp20 = icmp slt i32 %20, %21, !dbg !4036
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp20, %land.rhs ]
  br i1 %22, label %for.body, label %for.end, !dbg !4037

for.body:                                         ; preds = %land.end
  %23 = load i32, i32* %offset, align 4, !dbg !4038
  %24 = load i32, i32* %i, align 4, !dbg !4040
  %add21 = add nsw i32 %23, %24, !dbg !4041
  %idxprom = sext i32 %add21 to i64, !dbg !4042
  %arrayidx = getelementptr inbounds [260 x i8], [260 x i8]* %rsp, i64 0, i64 %idxprom, !dbg !4042
  %25 = load i8, i8* %arrayidx, align 1, !dbg !4042
  %26 = load i8*, i8** %dest.addr, align 8, !dbg !4043
  %27 = load i32, i32* %i, align 4, !dbg !4044
  %idxprom22 = sext i32 %27 to i64, !dbg !4043
  %arrayidx23 = getelementptr inbounds i8, i8* %26, i64 %idxprom22, !dbg !4043
  store i8 %25, i8* %arrayidx23, align 1, !dbg !4045
  br label %for.inc, !dbg !4046

for.inc:                                          ; preds = %for.body
  %28 = load i32, i32* %i, align 4, !dbg !4047
  %inc = add nsw i32 %28, 1, !dbg !4047
  store i32 %inc, i32* %i, align 4, !dbg !4047
  br label %for.cond, !dbg !4048, !llvm.loop !4049

for.end:                                          ; preds = %land.end
  br label %if.end24, !dbg !4051

if.end24:                                         ; preds = %for.end, %if.end
  %29 = load i32, i32* %rc, align 4, !dbg !4052
  store i32 %29, i32* %retval, align 4, !dbg !4053
  br label %return, !dbg !4053

return:                                           ; preds = %if.end24, %if.then16, %if.then10, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !4054
  ret i32 %30, !dbg !4054
}

; Function Attrs: noinline nounwind uwtable
define void @_modbus_init_common(%struct._modbus* %ctx) #0 !dbg !4055 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4056, metadata !451), !dbg !4057
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4058
  %slave = getelementptr inbounds %struct._modbus, %struct._modbus* %0, i32 0, i32 0, !dbg !4059
  store i32 -1, i32* %slave, align 8, !dbg !4060
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4061
  %s = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 1, !dbg !4062
  store i32 -1, i32* %s, align 4, !dbg !4063
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4064
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !4065
  store i32 0, i32* %debug, align 8, !dbg !4066
  %3 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4067
  %error_recovery = getelementptr inbounds %struct._modbus, %struct._modbus* %3, i32 0, i32 3, !dbg !4068
  store i32 0, i32* %error_recovery, align 4, !dbg !4069
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4070
  %response_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %4, i32 0, i32 4, !dbg !4071
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout, i32 0, i32 0, !dbg !4072
  store i64 0, i64* %tv_sec, align 8, !dbg !4073
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4074
  %response_timeout1 = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 4, !dbg !4075
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout1, i32 0, i32 1, !dbg !4076
  store i64 500000, i64* %tv_usec, align 8, !dbg !4077
  %6 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4078
  %byte_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %6, i32 0, i32 5, !dbg !4079
  %tv_sec2 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout, i32 0, i32 0, !dbg !4080
  store i64 0, i64* %tv_sec2, align 8, !dbg !4081
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4082
  %byte_timeout3 = getelementptr inbounds %struct._modbus, %struct._modbus* %7, i32 0, i32 5, !dbg !4083
  %tv_usec4 = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout3, i32 0, i32 1, !dbg !4084
  store i64 500000, i64* %tv_usec4, align 8, !dbg !4085
  %8 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4086
  %indication_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %8, i32 0, i32 6, !dbg !4087
  %tv_sec5 = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout, i32 0, i32 0, !dbg !4088
  store i64 0, i64* %tv_sec5, align 8, !dbg !4089
  %9 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4090
  %indication_timeout6 = getelementptr inbounds %struct._modbus, %struct._modbus* %9, i32 0, i32 6, !dbg !4091
  %tv_usec7 = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout6, i32 0, i32 1, !dbg !4092
  store i64 0, i64* %tv_usec7, align 8, !dbg !4093
  ret void, !dbg !4094
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_slave(%struct._modbus* %ctx, i32 %slave) #0 !dbg !4095 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %slave.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4096, metadata !451), !dbg !4097
  store i32 %slave, i32* %slave.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %slave.addr, metadata !4098, metadata !451), !dbg !4099
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4100
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4102
  br i1 %cmp, label %if.then, label %if.end, !dbg !4103

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4104
  store i32 22, i32* %call, align 4, !dbg !4106
  store i32 -1, i32* %retval, align 4, !dbg !4107
  br label %return, !dbg !4107

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4108
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !4109
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !4109
  %set_slave = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 4, !dbg !4110
  %3 = load i32 (%struct._modbus*, i32)*, i32 (%struct._modbus*, i32)** %set_slave, align 8, !dbg !4110
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4111
  %5 = load i32, i32* %slave.addr, align 4, !dbg !4112
  %call1 = call i32 %3(%struct._modbus* %4, i32 %5), !dbg !4108
  store i32 %call1, i32* %retval, align 4, !dbg !4113
  br label %return, !dbg !4113

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4114
  ret i32 %6, !dbg !4114
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_slave(%struct._modbus* %ctx) #0 !dbg !4115 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4116, metadata !451), !dbg !4117
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4118
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4120
  br i1 %cmp, label %if.then, label %if.end, !dbg !4121

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4122
  store i32 22, i32* %call, align 4, !dbg !4124
  store i32 -1, i32* %retval, align 4, !dbg !4125
  br label %return, !dbg !4125

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4126
  %slave = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 0, !dbg !4127
  %2 = load i32, i32* %slave, align 8, !dbg !4127
  store i32 %2, i32* %retval, align 4, !dbg !4128
  br label %return, !dbg !4128

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4129
  ret i32 %3, !dbg !4129
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_error_recovery(%struct._modbus* %ctx, i32 %error_recovery) #0 !dbg !4130 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %error_recovery.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4134, metadata !451), !dbg !4135
  store i32 %error_recovery, i32* %error_recovery.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %error_recovery.addr, metadata !4136, metadata !451), !dbg !4137
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4138
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4140
  br i1 %cmp, label %if.then, label %if.end, !dbg !4141

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4142
  store i32 22, i32* %call, align 4, !dbg !4144
  store i32 -1, i32* %retval, align 4, !dbg !4145
  br label %return, !dbg !4145

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %error_recovery.addr, align 4, !dbg !4146
  %conv = trunc i32 %1 to i8, !dbg !4147
  %conv1 = zext i8 %conv to i32, !dbg !4147
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4148
  %error_recovery2 = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 3, !dbg !4149
  store i32 %conv1, i32* %error_recovery2, align 4, !dbg !4150
  store i32 0, i32* %retval, align 4, !dbg !4151
  br label %return, !dbg !4151

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4152
  ret i32 %3, !dbg !4152
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_socket(%struct._modbus* %ctx, i32 %s) #0 !dbg !4153 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %s.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4154, metadata !451), !dbg !4155
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !4156, metadata !451), !dbg !4157
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4158
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4160
  br i1 %cmp, label %if.then, label %if.end, !dbg !4161

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4162
  store i32 22, i32* %call, align 4, !dbg !4164
  store i32 -1, i32* %retval, align 4, !dbg !4165
  br label %return, !dbg !4165

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %s.addr, align 4, !dbg !4166
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4167
  %s1 = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 1, !dbg !4168
  store i32 %1, i32* %s1, align 4, !dbg !4169
  store i32 0, i32* %retval, align 4, !dbg !4170
  br label %return, !dbg !4170

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4171
  ret i32 %3, !dbg !4171
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_socket(%struct._modbus* %ctx) #0 !dbg !4172 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4173, metadata !451), !dbg !4174
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4175
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4177
  br i1 %cmp, label %if.then, label %if.end, !dbg !4178

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4179
  store i32 22, i32* %call, align 4, !dbg !4181
  store i32 -1, i32* %retval, align 4, !dbg !4182
  br label %return, !dbg !4182

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4183
  %s = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 1, !dbg !4184
  %2 = load i32, i32* %s, align 4, !dbg !4184
  store i32 %2, i32* %retval, align 4, !dbg !4185
  br label %return, !dbg !4185

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4186
  ret i32 %3, !dbg !4186
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_response_timeout(%struct._modbus* %ctx, i32* %to_sec, i32* %to_usec) #0 !dbg !4187 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32*, align 8
  %to_usec.addr = alloca i32*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4191, metadata !451), !dbg !4192
  store i32* %to_sec, i32** %to_sec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_sec.addr, metadata !4193, metadata !451), !dbg !4194
  store i32* %to_usec, i32** %to_usec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_usec.addr, metadata !4195, metadata !451), !dbg !4196
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4197
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4199
  br i1 %cmp, label %if.then, label %if.end, !dbg !4200

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4201
  store i32 22, i32* %call, align 4, !dbg !4203
  store i32 -1, i32* %retval, align 4, !dbg !4204
  br label %return, !dbg !4204

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4205
  %response_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 4, !dbg !4206
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout, i32 0, i32 0, !dbg !4207
  %2 = load i64, i64* %tv_sec, align 8, !dbg !4207
  %conv = trunc i64 %2 to i32, !dbg !4205
  %3 = load i32*, i32** %to_sec.addr, align 8, !dbg !4208
  store i32 %conv, i32* %3, align 4, !dbg !4209
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4210
  %response_timeout1 = getelementptr inbounds %struct._modbus, %struct._modbus* %4, i32 0, i32 4, !dbg !4211
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout1, i32 0, i32 1, !dbg !4212
  %5 = load i64, i64* %tv_usec, align 8, !dbg !4212
  %conv2 = trunc i64 %5 to i32, !dbg !4210
  %6 = load i32*, i32** %to_usec.addr, align 8, !dbg !4213
  store i32 %conv2, i32* %6, align 4, !dbg !4214
  store i32 0, i32* %retval, align 4, !dbg !4215
  br label %return, !dbg !4215

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !4216
  ret i32 %7, !dbg !4216
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_response_timeout(%struct._modbus* %ctx, i32 %to_sec, i32 %to_usec) #0 !dbg !4217 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32, align 4
  %to_usec.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4220, metadata !451), !dbg !4221
  store i32 %to_sec, i32* %to_sec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_sec.addr, metadata !4222, metadata !451), !dbg !4223
  store i32 %to_usec, i32* %to_usec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_usec.addr, metadata !4224, metadata !451), !dbg !4225
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4226
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4228
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4229

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %to_sec.addr, align 4, !dbg !4230
  %cmp1 = icmp eq i32 %1, 0, !dbg !4231
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false3, !dbg !4232

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i32, i32* %to_usec.addr, align 4, !dbg !4233
  %cmp2 = icmp eq i32 %2, 0, !dbg !4234
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !4235

lor.lhs.false3:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %3 = load i32, i32* %to_usec.addr, align 4, !dbg !4236
  %cmp4 = icmp ugt i32 %3, 999999, !dbg !4237
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4238

if.then:                                          ; preds = %lor.lhs.false3, %land.lhs.true, %entry
  %call = call i32* @__errno_location() #9, !dbg !4239
  store i32 22, i32* %call, align 4, !dbg !4241
  store i32 -1, i32* %retval, align 4, !dbg !4242
  br label %return, !dbg !4242

if.end:                                           ; preds = %lor.lhs.false3
  %4 = load i32, i32* %to_sec.addr, align 4, !dbg !4243
  %conv = zext i32 %4 to i64, !dbg !4243
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4244
  %response_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 4, !dbg !4245
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout, i32 0, i32 0, !dbg !4246
  store i64 %conv, i64* %tv_sec, align 8, !dbg !4247
  %6 = load i32, i32* %to_usec.addr, align 4, !dbg !4248
  %conv5 = zext i32 %6 to i64, !dbg !4248
  %7 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4249
  %response_timeout6 = getelementptr inbounds %struct._modbus, %struct._modbus* %7, i32 0, i32 4, !dbg !4250
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %response_timeout6, i32 0, i32 1, !dbg !4251
  store i64 %conv5, i64* %tv_usec, align 8, !dbg !4252
  store i32 0, i32* %retval, align 4, !dbg !4253
  br label %return, !dbg !4253

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !4254
  ret i32 %8, !dbg !4254
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_byte_timeout(%struct._modbus* %ctx, i32* %to_sec, i32* %to_usec) #0 !dbg !4255 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32*, align 8
  %to_usec.addr = alloca i32*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4256, metadata !451), !dbg !4257
  store i32* %to_sec, i32** %to_sec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_sec.addr, metadata !4258, metadata !451), !dbg !4259
  store i32* %to_usec, i32** %to_usec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_usec.addr, metadata !4260, metadata !451), !dbg !4261
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4262
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4264
  br i1 %cmp, label %if.then, label %if.end, !dbg !4265

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4266
  store i32 22, i32* %call, align 4, !dbg !4268
  store i32 -1, i32* %retval, align 4, !dbg !4269
  br label %return, !dbg !4269

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4270
  %byte_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 5, !dbg !4271
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout, i32 0, i32 0, !dbg !4272
  %2 = load i64, i64* %tv_sec, align 8, !dbg !4272
  %conv = trunc i64 %2 to i32, !dbg !4270
  %3 = load i32*, i32** %to_sec.addr, align 8, !dbg !4273
  store i32 %conv, i32* %3, align 4, !dbg !4274
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4275
  %byte_timeout1 = getelementptr inbounds %struct._modbus, %struct._modbus* %4, i32 0, i32 5, !dbg !4276
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout1, i32 0, i32 1, !dbg !4277
  %5 = load i64, i64* %tv_usec, align 8, !dbg !4277
  %conv2 = trunc i64 %5 to i32, !dbg !4275
  %6 = load i32*, i32** %to_usec.addr, align 8, !dbg !4278
  store i32 %conv2, i32* %6, align 4, !dbg !4279
  store i32 0, i32* %retval, align 4, !dbg !4280
  br label %return, !dbg !4280

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !4281
  ret i32 %7, !dbg !4281
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_byte_timeout(%struct._modbus* %ctx, i32 %to_sec, i32 %to_usec) #0 !dbg !4282 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32, align 4
  %to_usec.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4283, metadata !451), !dbg !4284
  store i32 %to_sec, i32* %to_sec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_sec.addr, metadata !4285, metadata !451), !dbg !4286
  store i32 %to_usec, i32* %to_usec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_usec.addr, metadata !4287, metadata !451), !dbg !4288
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4289
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4291
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4292

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %to_usec.addr, align 4, !dbg !4293
  %cmp1 = icmp ugt i32 %1, 999999, !dbg !4294
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4295

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #9, !dbg !4296
  store i32 22, i32* %call, align 4, !dbg !4298
  store i32 -1, i32* %retval, align 4, !dbg !4299
  br label %return, !dbg !4299

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %to_sec.addr, align 4, !dbg !4300
  %conv = zext i32 %2 to i64, !dbg !4300
  %3 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4301
  %byte_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %3, i32 0, i32 5, !dbg !4302
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout, i32 0, i32 0, !dbg !4303
  store i64 %conv, i64* %tv_sec, align 8, !dbg !4304
  %4 = load i32, i32* %to_usec.addr, align 4, !dbg !4305
  %conv2 = zext i32 %4 to i64, !dbg !4305
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4306
  %byte_timeout3 = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 5, !dbg !4307
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %byte_timeout3, i32 0, i32 1, !dbg !4308
  store i64 %conv2, i64* %tv_usec, align 8, !dbg !4309
  store i32 0, i32* %retval, align 4, !dbg !4310
  br label %return, !dbg !4310

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4311
  ret i32 %6, !dbg !4311
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_indication_timeout(%struct._modbus* %ctx, i32* %to_sec, i32* %to_usec) #0 !dbg !4312 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32*, align 8
  %to_usec.addr = alloca i32*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4313, metadata !451), !dbg !4314
  store i32* %to_sec, i32** %to_sec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_sec.addr, metadata !4315, metadata !451), !dbg !4316
  store i32* %to_usec, i32** %to_usec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %to_usec.addr, metadata !4317, metadata !451), !dbg !4318
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4319
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4321
  br i1 %cmp, label %if.then, label %if.end, !dbg !4322

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4323
  store i32 22, i32* %call, align 4, !dbg !4325
  store i32 -1, i32* %retval, align 4, !dbg !4326
  br label %return, !dbg !4326

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4327
  %indication_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 6, !dbg !4328
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout, i32 0, i32 0, !dbg !4329
  %2 = load i64, i64* %tv_sec, align 8, !dbg !4329
  %conv = trunc i64 %2 to i32, !dbg !4327
  %3 = load i32*, i32** %to_sec.addr, align 8, !dbg !4330
  store i32 %conv, i32* %3, align 4, !dbg !4331
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4332
  %indication_timeout1 = getelementptr inbounds %struct._modbus, %struct._modbus* %4, i32 0, i32 6, !dbg !4333
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout1, i32 0, i32 1, !dbg !4334
  %5 = load i64, i64* %tv_usec, align 8, !dbg !4334
  %conv2 = trunc i64 %5 to i32, !dbg !4332
  %6 = load i32*, i32** %to_usec.addr, align 8, !dbg !4335
  store i32 %conv2, i32* %6, align 4, !dbg !4336
  store i32 0, i32* %retval, align 4, !dbg !4337
  br label %return, !dbg !4337

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !4338
  ret i32 %7, !dbg !4338
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_indication_timeout(%struct._modbus* %ctx, i32 %to_sec, i32 %to_usec) #0 !dbg !4339 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %to_sec.addr = alloca i32, align 4
  %to_usec.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4340, metadata !451), !dbg !4341
  store i32 %to_sec, i32* %to_sec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_sec.addr, metadata !4342, metadata !451), !dbg !4343
  store i32 %to_usec, i32* %to_usec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_usec.addr, metadata !4344, metadata !451), !dbg !4345
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4346
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4348
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4349

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %to_usec.addr, align 4, !dbg !4350
  %cmp1 = icmp ugt i32 %1, 999999, !dbg !4351
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4352

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #9, !dbg !4353
  store i32 22, i32* %call, align 4, !dbg !4355
  store i32 -1, i32* %retval, align 4, !dbg !4356
  br label %return, !dbg !4356

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %to_sec.addr, align 4, !dbg !4357
  %conv = zext i32 %2 to i64, !dbg !4357
  %3 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4358
  %indication_timeout = getelementptr inbounds %struct._modbus, %struct._modbus* %3, i32 0, i32 6, !dbg !4359
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout, i32 0, i32 0, !dbg !4360
  store i64 %conv, i64* %tv_sec, align 8, !dbg !4361
  %4 = load i32, i32* %to_usec.addr, align 4, !dbg !4362
  %conv2 = zext i32 %4 to i64, !dbg !4362
  %5 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4363
  %indication_timeout3 = getelementptr inbounds %struct._modbus, %struct._modbus* %5, i32 0, i32 6, !dbg !4364
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %indication_timeout3, i32 0, i32 1, !dbg !4365
  store i64 %conv2, i64* %tv_usec, align 8, !dbg !4366
  store i32 0, i32* %retval, align 4, !dbg !4367
  br label %return, !dbg !4367

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4368
  ret i32 %6, !dbg !4368
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_get_header_length(%struct._modbus* %ctx) #0 !dbg !4369 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4370, metadata !451), !dbg !4371
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4372
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4374
  br i1 %cmp, label %if.then, label %if.end, !dbg !4375

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4376
  store i32 22, i32* %call, align 4, !dbg !4378
  store i32 -1, i32* %retval, align 4, !dbg !4379
  br label %return, !dbg !4379

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4380
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !4381
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !4381
  %header_length = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 1, !dbg !4382
  %3 = load i32, i32* %header_length, align 4, !dbg !4382
  store i32 %3, i32* %retval, align 4, !dbg !4383
  br label %return, !dbg !4383

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !4384
  ret i32 %4, !dbg !4384
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_free(%struct._modbus* %ctx) #0 !dbg !4385 {
entry:
  %ctx.addr = alloca %struct._modbus*, align 8
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4386, metadata !451), !dbg !4387
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4388
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4390
  br i1 %cmp, label %if.then, label %if.end, !dbg !4391

if.then:                                          ; preds = %entry
  br label %return, !dbg !4392

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4393
  %backend = getelementptr inbounds %struct._modbus, %struct._modbus* %1, i32 0, i32 7, !dbg !4394
  %2 = load %struct._modbus_backend*, %struct._modbus_backend** %backend, align 8, !dbg !4394
  %free = getelementptr inbounds %struct._modbus_backend, %struct._modbus_backend* %2, i32 0, i32 18, !dbg !4395
  %3 = load void (%struct._modbus*)*, void (%struct._modbus*)** %free, align 8, !dbg !4395
  %4 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4396
  call void %3(%struct._modbus* %4), !dbg !4393
  br label %return, !dbg !4397

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4397
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_set_debug(%struct._modbus* %ctx, i32 %flag) #0 !dbg !4398 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus*, align 8
  %flag.addr = alloca i32, align 4
  store %struct._modbus* %ctx, %struct._modbus** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus** %ctx.addr, metadata !4399, metadata !451), !dbg !4400
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !4401, metadata !451), !dbg !4402
  %0 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4403
  %cmp = icmp eq %struct._modbus* %0, null, !dbg !4405
  br i1 %cmp, label %if.then, label %if.end, !dbg !4406

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !4407
  store i32 22, i32* %call, align 4, !dbg !4409
  store i32 -1, i32* %retval, align 4, !dbg !4410
  br label %return, !dbg !4410

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %flag.addr, align 4, !dbg !4411
  %2 = load %struct._modbus*, %struct._modbus** %ctx.addr, align 8, !dbg !4412
  %debug = getelementptr inbounds %struct._modbus, %struct._modbus* %2, i32 0, i32 2, !dbg !4413
  store i32 %1, i32* %debug, align 8, !dbg !4414
  store i32 0, i32* %retval, align 4, !dbg !4415
  br label %return, !dbg !4415

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4416
  ret i32 %3, !dbg !4416
}

; Function Attrs: noinline nounwind uwtable
define %struct.modbus_mapping_t* @modbus_mapping_new_start_address(i32 %start_bits, i32 %nb_bits, i32 %start_input_bits, i32 %nb_input_bits, i32 %start_registers, i32 %nb_registers, i32 %start_input_registers, i32 %nb_input_registers) #0 !dbg !4417 {
entry:
  %retval = alloca %struct.modbus_mapping_t*, align 8
  %start_bits.addr = alloca i32, align 4
  %nb_bits.addr = alloca i32, align 4
  %start_input_bits.addr = alloca i32, align 4
  %nb_input_bits.addr = alloca i32, align 4
  %start_registers.addr = alloca i32, align 4
  %nb_registers.addr = alloca i32, align 4
  %start_input_registers.addr = alloca i32, align 4
  %nb_input_registers.addr = alloca i32, align 4
  %mb_mapping = alloca %struct.modbus_mapping_t*, align 8
  store i32 %start_bits, i32* %start_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bits.addr, metadata !4420, metadata !451), !dbg !4421
  store i32 %nb_bits, i32* %nb_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_bits.addr, metadata !4422, metadata !451), !dbg !4423
  store i32 %start_input_bits, i32* %start_input_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_input_bits.addr, metadata !4424, metadata !451), !dbg !4425
  store i32 %nb_input_bits, i32* %nb_input_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_input_bits.addr, metadata !4426, metadata !451), !dbg !4427
  store i32 %start_registers, i32* %start_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_registers.addr, metadata !4428, metadata !451), !dbg !4429
  store i32 %nb_registers, i32* %nb_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_registers.addr, metadata !4430, metadata !451), !dbg !4431
  store i32 %start_input_registers, i32* %start_input_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_input_registers.addr, metadata !4432, metadata !451), !dbg !4433
  store i32 %nb_input_registers, i32* %nb_input_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_input_registers.addr, metadata !4434, metadata !451), !dbg !4435
  call void @llvm.dbg.declare(metadata %struct.modbus_mapping_t** %mb_mapping, metadata !4436, metadata !451), !dbg !4437
  %call = call noalias i8* @malloc(i64 64) #6, !dbg !4438
  %0 = bitcast i8* %call to %struct.modbus_mapping_t*, !dbg !4439
  store %struct.modbus_mapping_t* %0, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4440
  %1 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4441
  %cmp = icmp eq %struct.modbus_mapping_t* %1, null, !dbg !4443
  br i1 %cmp, label %if.then, label %if.end, !dbg !4444

if.then:                                          ; preds = %entry
  store %struct.modbus_mapping_t* null, %struct.modbus_mapping_t** %retval, align 8, !dbg !4445
  br label %return, !dbg !4445

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %nb_bits.addr, align 4, !dbg !4447
  %3 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4448
  %nb_bits1 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %3, i32 0, i32 0, !dbg !4449
  store i32 %2, i32* %nb_bits1, align 8, !dbg !4450
  %4 = load i32, i32* %start_bits.addr, align 4, !dbg !4451
  %5 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4452
  %start_bits2 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %5, i32 0, i32 1, !dbg !4453
  store i32 %4, i32* %start_bits2, align 4, !dbg !4454
  %6 = load i32, i32* %nb_bits.addr, align 4, !dbg !4455
  %cmp3 = icmp eq i32 %6, 0, !dbg !4457
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !4458

if.then4:                                         ; preds = %if.end
  %7 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4459
  %tab_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %7, i32 0, i32 8, !dbg !4461
  store i8* null, i8** %tab_bits, align 8, !dbg !4462
  br label %if.end15, !dbg !4463

if.else:                                          ; preds = %if.end
  %8 = load i32, i32* %nb_bits.addr, align 4, !dbg !4464
  %conv = zext i32 %8 to i64, !dbg !4464
  %mul = mul i64 %conv, 1, !dbg !4466
  %call5 = call noalias i8* @malloc(i64 %mul) #6, !dbg !4467
  %9 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4468
  %tab_bits6 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %9, i32 0, i32 8, !dbg !4469
  store i8* %call5, i8** %tab_bits6, align 8, !dbg !4470
  %10 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4471
  %tab_bits7 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %10, i32 0, i32 8, !dbg !4473
  %11 = load i8*, i8** %tab_bits7, align 8, !dbg !4473
  %cmp8 = icmp eq i8* %11, null, !dbg !4474
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !4475

if.then10:                                        ; preds = %if.else
  %12 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4476
  %13 = bitcast %struct.modbus_mapping_t* %12 to i8*, !dbg !4476
  call void @free(i8* %13) #6, !dbg !4478
  store %struct.modbus_mapping_t* null, %struct.modbus_mapping_t** %retval, align 8, !dbg !4479
  br label %return, !dbg !4479

if.end11:                                         ; preds = %if.else
  %14 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4480
  %tab_bits12 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %14, i32 0, i32 8, !dbg !4481
  %15 = load i8*, i8** %tab_bits12, align 8, !dbg !4481
  %16 = load i32, i32* %nb_bits.addr, align 4, !dbg !4482
  %conv13 = zext i32 %16 to i64, !dbg !4482
  %mul14 = mul i64 %conv13, 1, !dbg !4483
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 %mul14, i32 1, i1 false), !dbg !4484
  br label %if.end15

if.end15:                                         ; preds = %if.end11, %if.then4
  %17 = load i32, i32* %nb_input_bits.addr, align 4, !dbg !4485
  %18 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4486
  %nb_input_bits16 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %18, i32 0, i32 2, !dbg !4487
  store i32 %17, i32* %nb_input_bits16, align 8, !dbg !4488
  %19 = load i32, i32* %start_input_bits.addr, align 4, !dbg !4489
  %20 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4490
  %start_input_bits17 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %20, i32 0, i32 3, !dbg !4491
  store i32 %19, i32* %start_input_bits17, align 4, !dbg !4492
  %21 = load i32, i32* %nb_input_bits.addr, align 4, !dbg !4493
  %cmp18 = icmp eq i32 %21, 0, !dbg !4495
  br i1 %cmp18, label %if.then20, label %if.else21, !dbg !4496

if.then20:                                        ; preds = %if.end15
  %22 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4497
  %tab_input_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %22, i32 0, i32 9, !dbg !4499
  store i8* null, i8** %tab_input_bits, align 8, !dbg !4500
  br label %if.end35, !dbg !4501

if.else21:                                        ; preds = %if.end15
  %23 = load i32, i32* %nb_input_bits.addr, align 4, !dbg !4502
  %conv22 = zext i32 %23 to i64, !dbg !4502
  %mul23 = mul i64 %conv22, 1, !dbg !4504
  %call24 = call noalias i8* @malloc(i64 %mul23) #6, !dbg !4505
  %24 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4506
  %tab_input_bits25 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %24, i32 0, i32 9, !dbg !4507
  store i8* %call24, i8** %tab_input_bits25, align 8, !dbg !4508
  %25 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4509
  %tab_input_bits26 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %25, i32 0, i32 9, !dbg !4511
  %26 = load i8*, i8** %tab_input_bits26, align 8, !dbg !4511
  %cmp27 = icmp eq i8* %26, null, !dbg !4512
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !4513

if.then29:                                        ; preds = %if.else21
  %27 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4514
  %tab_bits30 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %27, i32 0, i32 8, !dbg !4516
  %28 = load i8*, i8** %tab_bits30, align 8, !dbg !4516
  call void @free(i8* %28) #6, !dbg !4517
  %29 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4518
  %30 = bitcast %struct.modbus_mapping_t* %29 to i8*, !dbg !4518
  call void @free(i8* %30) #6, !dbg !4519
  store %struct.modbus_mapping_t* null, %struct.modbus_mapping_t** %retval, align 8, !dbg !4520
  br label %return, !dbg !4520

if.end31:                                         ; preds = %if.else21
  %31 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4521
  %tab_input_bits32 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %31, i32 0, i32 9, !dbg !4522
  %32 = load i8*, i8** %tab_input_bits32, align 8, !dbg !4522
  %33 = load i32, i32* %nb_input_bits.addr, align 4, !dbg !4523
  %conv33 = zext i32 %33 to i64, !dbg !4523
  %mul34 = mul i64 %conv33, 1, !dbg !4524
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 %mul34, i32 1, i1 false), !dbg !4525
  br label %if.end35

if.end35:                                         ; preds = %if.end31, %if.then20
  %34 = load i32, i32* %nb_registers.addr, align 4, !dbg !4526
  %35 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4527
  %nb_registers36 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %35, i32 0, i32 6, !dbg !4528
  store i32 %34, i32* %nb_registers36, align 8, !dbg !4529
  %36 = load i32, i32* %start_registers.addr, align 4, !dbg !4530
  %37 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4531
  %start_registers37 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %37, i32 0, i32 7, !dbg !4532
  store i32 %36, i32* %start_registers37, align 4, !dbg !4533
  %38 = load i32, i32* %nb_registers.addr, align 4, !dbg !4534
  %cmp38 = icmp eq i32 %38, 0, !dbg !4536
  br i1 %cmp38, label %if.then40, label %if.else41, !dbg !4537

if.then40:                                        ; preds = %if.end35
  %39 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4538
  %tab_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %39, i32 0, i32 11, !dbg !4540
  store i16* null, i16** %tab_registers, align 8, !dbg !4541
  br label %if.end56, !dbg !4542

if.else41:                                        ; preds = %if.end35
  %40 = load i32, i32* %nb_registers.addr, align 4, !dbg !4543
  %conv42 = zext i32 %40 to i64, !dbg !4543
  %mul43 = mul i64 %conv42, 2, !dbg !4545
  %call44 = call noalias i8* @malloc(i64 %mul43) #6, !dbg !4546
  %41 = bitcast i8* %call44 to i16*, !dbg !4547
  %42 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4548
  %tab_registers45 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %42, i32 0, i32 11, !dbg !4549
  store i16* %41, i16** %tab_registers45, align 8, !dbg !4550
  %43 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4551
  %tab_registers46 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %43, i32 0, i32 11, !dbg !4553
  %44 = load i16*, i16** %tab_registers46, align 8, !dbg !4553
  %cmp47 = icmp eq i16* %44, null, !dbg !4554
  br i1 %cmp47, label %if.then49, label %if.end52, !dbg !4555

if.then49:                                        ; preds = %if.else41
  %45 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4556
  %tab_input_bits50 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %45, i32 0, i32 9, !dbg !4558
  %46 = load i8*, i8** %tab_input_bits50, align 8, !dbg !4558
  call void @free(i8* %46) #6, !dbg !4559
  %47 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4560
  %tab_bits51 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %47, i32 0, i32 8, !dbg !4561
  %48 = load i8*, i8** %tab_bits51, align 8, !dbg !4561
  call void @free(i8* %48) #6, !dbg !4562
  %49 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4563
  %50 = bitcast %struct.modbus_mapping_t* %49 to i8*, !dbg !4563
  call void @free(i8* %50) #6, !dbg !4564
  store %struct.modbus_mapping_t* null, %struct.modbus_mapping_t** %retval, align 8, !dbg !4565
  br label %return, !dbg !4565

if.end52:                                         ; preds = %if.else41
  %51 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4566
  %tab_registers53 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %51, i32 0, i32 11, !dbg !4567
  %52 = load i16*, i16** %tab_registers53, align 8, !dbg !4567
  %53 = bitcast i16* %52 to i8*, !dbg !4568
  %54 = load i32, i32* %nb_registers.addr, align 4, !dbg !4569
  %conv54 = zext i32 %54 to i64, !dbg !4569
  %mul55 = mul i64 %conv54, 2, !dbg !4570
  call void @llvm.memset.p0i8.i64(i8* %53, i8 0, i64 %mul55, i32 2, i1 false), !dbg !4568
  br label %if.end56

if.end56:                                         ; preds = %if.end52, %if.then40
  %55 = load i32, i32* %nb_input_registers.addr, align 4, !dbg !4571
  %56 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4572
  %nb_input_registers57 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %56, i32 0, i32 4, !dbg !4573
  store i32 %55, i32* %nb_input_registers57, align 8, !dbg !4574
  %57 = load i32, i32* %start_input_registers.addr, align 4, !dbg !4575
  %58 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4576
  %start_input_registers58 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %58, i32 0, i32 5, !dbg !4577
  store i32 %57, i32* %start_input_registers58, align 4, !dbg !4578
  %59 = load i32, i32* %nb_input_registers.addr, align 4, !dbg !4579
  %cmp59 = icmp eq i32 %59, 0, !dbg !4581
  br i1 %cmp59, label %if.then61, label %if.else62, !dbg !4582

if.then61:                                        ; preds = %if.end56
  %60 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4583
  %tab_input_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %60, i32 0, i32 10, !dbg !4585
  store i16* null, i16** %tab_input_registers, align 8, !dbg !4586
  br label %if.end78, !dbg !4587

if.else62:                                        ; preds = %if.end56
  %61 = load i32, i32* %nb_input_registers.addr, align 4, !dbg !4588
  %conv63 = zext i32 %61 to i64, !dbg !4588
  %mul64 = mul i64 %conv63, 2, !dbg !4590
  %call65 = call noalias i8* @malloc(i64 %mul64) #6, !dbg !4591
  %62 = bitcast i8* %call65 to i16*, !dbg !4592
  %63 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4593
  %tab_input_registers66 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %63, i32 0, i32 10, !dbg !4594
  store i16* %62, i16** %tab_input_registers66, align 8, !dbg !4595
  %64 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4596
  %tab_input_registers67 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %64, i32 0, i32 10, !dbg !4598
  %65 = load i16*, i16** %tab_input_registers67, align 8, !dbg !4598
  %cmp68 = icmp eq i16* %65, null, !dbg !4599
  br i1 %cmp68, label %if.then70, label %if.end74, !dbg !4600

if.then70:                                        ; preds = %if.else62
  %66 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4601
  %tab_registers71 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %66, i32 0, i32 11, !dbg !4603
  %67 = load i16*, i16** %tab_registers71, align 8, !dbg !4603
  %68 = bitcast i16* %67 to i8*, !dbg !4601
  call void @free(i8* %68) #6, !dbg !4604
  %69 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4605
  %tab_input_bits72 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %69, i32 0, i32 9, !dbg !4606
  %70 = load i8*, i8** %tab_input_bits72, align 8, !dbg !4606
  call void @free(i8* %70) #6, !dbg !4607
  %71 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4608
  %tab_bits73 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %71, i32 0, i32 8, !dbg !4609
  %72 = load i8*, i8** %tab_bits73, align 8, !dbg !4609
  call void @free(i8* %72) #6, !dbg !4610
  %73 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4611
  %74 = bitcast %struct.modbus_mapping_t* %73 to i8*, !dbg !4611
  call void @free(i8* %74) #6, !dbg !4612
  store %struct.modbus_mapping_t* null, %struct.modbus_mapping_t** %retval, align 8, !dbg !4613
  br label %return, !dbg !4613

if.end74:                                         ; preds = %if.else62
  %75 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4614
  %tab_input_registers75 = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %75, i32 0, i32 10, !dbg !4615
  %76 = load i16*, i16** %tab_input_registers75, align 8, !dbg !4615
  %77 = bitcast i16* %76 to i8*, !dbg !4616
  %78 = load i32, i32* %nb_input_registers.addr, align 4, !dbg !4617
  %conv76 = zext i32 %78 to i64, !dbg !4617
  %mul77 = mul i64 %conv76, 2, !dbg !4618
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 %mul77, i32 2, i1 false), !dbg !4616
  br label %if.end78

if.end78:                                         ; preds = %if.end74, %if.then61
  %79 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping, align 8, !dbg !4619
  store %struct.modbus_mapping_t* %79, %struct.modbus_mapping_t** %retval, align 8, !dbg !4620
  br label %return, !dbg !4620

return:                                           ; preds = %if.end78, %if.then70, %if.then49, %if.then29, %if.then10, %if.then
  %80 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %retval, align 8, !dbg !4621
  ret %struct.modbus_mapping_t* %80, !dbg !4621
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #5

; Function Attrs: noinline nounwind uwtable
define %struct.modbus_mapping_t* @modbus_mapping_new(i32 %nb_bits, i32 %nb_input_bits, i32 %nb_registers, i32 %nb_input_registers) #0 !dbg !4622 {
entry:
  %nb_bits.addr = alloca i32, align 4
  %nb_input_bits.addr = alloca i32, align 4
  %nb_registers.addr = alloca i32, align 4
  %nb_input_registers.addr = alloca i32, align 4
  store i32 %nb_bits, i32* %nb_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_bits.addr, metadata !4625, metadata !451), !dbg !4626
  store i32 %nb_input_bits, i32* %nb_input_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_input_bits.addr, metadata !4627, metadata !451), !dbg !4628
  store i32 %nb_registers, i32* %nb_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_registers.addr, metadata !4629, metadata !451), !dbg !4630
  store i32 %nb_input_registers, i32* %nb_input_registers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_input_registers.addr, metadata !4631, metadata !451), !dbg !4632
  %0 = load i32, i32* %nb_bits.addr, align 4, !dbg !4633
  %1 = load i32, i32* %nb_input_bits.addr, align 4, !dbg !4634
  %2 = load i32, i32* %nb_registers.addr, align 4, !dbg !4635
  %3 = load i32, i32* %nb_input_registers.addr, align 4, !dbg !4636
  %call = call %struct.modbus_mapping_t* @modbus_mapping_new_start_address(i32 0, i32 %0, i32 0, i32 %1, i32 0, i32 %2, i32 0, i32 %3), !dbg !4637
  ret %struct.modbus_mapping_t* %call, !dbg !4638
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_mapping_free(%struct.modbus_mapping_t* %mb_mapping) #0 !dbg !4639 {
entry:
  %mb_mapping.addr = alloca %struct.modbus_mapping_t*, align 8
  store %struct.modbus_mapping_t* %mb_mapping, %struct.modbus_mapping_t** %mb_mapping.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.modbus_mapping_t** %mb_mapping.addr, metadata !4642, metadata !451), !dbg !4643
  %0 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4644
  %cmp = icmp eq %struct.modbus_mapping_t* %0, null, !dbg !4646
  br i1 %cmp, label %if.then, label %if.end, !dbg !4647

if.then:                                          ; preds = %entry
  br label %return, !dbg !4648

if.end:                                           ; preds = %entry
  %1 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4650
  %tab_input_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %1, i32 0, i32 10, !dbg !4651
  %2 = load i16*, i16** %tab_input_registers, align 8, !dbg !4651
  %3 = bitcast i16* %2 to i8*, !dbg !4650
  call void @free(i8* %3) #6, !dbg !4652
  %4 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4653
  %tab_registers = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %4, i32 0, i32 11, !dbg !4654
  %5 = load i16*, i16** %tab_registers, align 8, !dbg !4654
  %6 = bitcast i16* %5 to i8*, !dbg !4653
  call void @free(i8* %6) #6, !dbg !4655
  %7 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4656
  %tab_input_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %7, i32 0, i32 9, !dbg !4657
  %8 = load i8*, i8** %tab_input_bits, align 8, !dbg !4657
  call void @free(i8* %8) #6, !dbg !4658
  %9 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4659
  %tab_bits = getelementptr inbounds %struct.modbus_mapping_t, %struct.modbus_mapping_t* %9, i32 0, i32 8, !dbg !4660
  %10 = load i8*, i8** %tab_bits, align 8, !dbg !4660
  call void @free(i8* %10) #6, !dbg !4661
  %11 = load %struct.modbus_mapping_t*, %struct.modbus_mapping_t** %mb_mapping.addr, align 8, !dbg !4662
  %12 = bitcast %struct.modbus_mapping_t* %11 to i8*, !dbg !4662
  call void @free(i8* %12) #6, !dbg !4663
  br label %return, !dbg !4664

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4664
}

; Function Attrs: noinline nounwind uwtable
define i64 @strlcpy(i8* %dest, i8* %src, i64 %dest_size) #0 !dbg !4665 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %dest_size.addr = alloca i64, align 8
  %d = alloca i8*, align 8
  %s = alloca i8*, align 8
  %n = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !4671, metadata !451), !dbg !4672
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4673, metadata !451), !dbg !4674
  store i64 %dest_size, i64* %dest_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dest_size.addr, metadata !4675, metadata !451), !dbg !4676
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4677, metadata !451), !dbg !4678
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !4679
  store i8* %0, i8** %d, align 8, !dbg !4678
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4680, metadata !451), !dbg !4681
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4682
  store i8* %1, i8** %s, align 8, !dbg !4681
  call void @llvm.dbg.declare(metadata i64* %n, metadata !4683, metadata !451), !dbg !4684
  %2 = load i64, i64* %dest_size.addr, align 8, !dbg !4685
  store i64 %2, i64* %n, align 8, !dbg !4684
  %3 = load i64, i64* %n, align 8, !dbg !4686
  %cmp = icmp ne i64 %3, 0, !dbg !4688
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !4689

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %n, align 8, !dbg !4690
  %dec = add i64 %4, -1, !dbg !4690
  store i64 %dec, i64* %n, align 8, !dbg !4690
  %cmp1 = icmp ne i64 %dec, 0, !dbg !4691
  br i1 %cmp1, label %if.then, label %if.end9, !dbg !4692

if.then:                                          ; preds = %land.lhs.true
  br label %do.body, !dbg !4693, !llvm.loop !4695

do.body:                                          ; preds = %do.cond, %if.then
  %5 = load i8*, i8** %s, align 8, !dbg !4697
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !4697
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !4697
  %6 = load i8, i8* %5, align 1, !dbg !4700
  %7 = load i8*, i8** %d, align 8, !dbg !4701
  %incdec.ptr2 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !4701
  store i8* %incdec.ptr2, i8** %d, align 8, !dbg !4701
  store i8 %6, i8* %7, align 1, !dbg !4702
  %conv = sext i8 %6 to i32, !dbg !4703
  %cmp3 = icmp eq i32 %conv, 0, !dbg !4704
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !4705

if.then5:                                         ; preds = %do.body
  br label %do.end, !dbg !4706

if.end:                                           ; preds = %do.body
  br label %do.cond, !dbg !4707

do.cond:                                          ; preds = %if.end
  %8 = load i64, i64* %n, align 8, !dbg !4708
  %dec6 = add i64 %8, -1, !dbg !4708
  store i64 %dec6, i64* %n, align 8, !dbg !4708
  %cmp7 = icmp ne i64 %dec6, 0, !dbg !4709
  br i1 %cmp7, label %do.body, label %do.end, !dbg !4707, !llvm.loop !4695

do.end:                                           ; preds = %do.cond, %if.then5
  br label %if.end9, !dbg !4710

if.end9:                                          ; preds = %do.end, %land.lhs.true, %entry
  %9 = load i64, i64* %n, align 8, !dbg !4711
  %cmp10 = icmp eq i64 %9, 0, !dbg !4713
  br i1 %cmp10, label %if.then12, label %if.end18, !dbg !4714

if.then12:                                        ; preds = %if.end9
  %10 = load i64, i64* %dest_size.addr, align 8, !dbg !4715
  %cmp13 = icmp ne i64 %10, 0, !dbg !4718
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !4719

if.then15:                                        ; preds = %if.then12
  %11 = load i8*, i8** %d, align 8, !dbg !4720
  store i8 0, i8* %11, align 1, !dbg !4721
  br label %if.end16, !dbg !4722

if.end16:                                         ; preds = %if.then15, %if.then12
  br label %while.cond, !dbg !4723

while.cond:                                       ; preds = %while.body, %if.end16
  %12 = load i8*, i8** %s, align 8, !dbg !4724
  %incdec.ptr17 = getelementptr inbounds i8, i8* %12, i32 1, !dbg !4724
  store i8* %incdec.ptr17, i8** %s, align 8, !dbg !4724
  %13 = load i8, i8* %12, align 1, !dbg !4725
  %tobool = icmp ne i8 %13, 0, !dbg !4723
  br i1 %tobool, label %while.body, label %while.end, !dbg !4723

while.body:                                       ; preds = %while.cond
  br label %while.cond, !dbg !4723, !llvm.loop !4726

while.end:                                        ; preds = %while.cond
  br label %if.end18, !dbg !4728

if.end18:                                         ; preds = %while.end, %if.end9
  %14 = load i8*, i8** %s, align 8, !dbg !4729
  %15 = load i8*, i8** %src.addr, align 8, !dbg !4730
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64, !dbg !4731
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64, !dbg !4731
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4731
  %sub = sub nsw i64 %sub.ptr.sub, 1, !dbg !4732
  ret i64 %sub, !dbg !4733
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_bits_from_byte(i8* %dest, i32 %idx, i8 zeroext %value) #0 !dbg !4734 {
entry:
  %dest.addr = alloca i8*, align 8
  %idx.addr = alloca i32, align 4
  %value.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !4737, metadata !451), !dbg !4738
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !4739, metadata !451), !dbg !4740
  store i8 %value, i8* %value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %value.addr, metadata !4741, metadata !451), !dbg !4742
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4743, metadata !451), !dbg !4744
  store i32 0, i32* %i, align 4, !dbg !4745
  br label %for.cond, !dbg !4747

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4748
  %cmp = icmp slt i32 %0, 8, !dbg !4750
  br i1 %cmp, label %for.body, label %for.end, !dbg !4751

for.body:                                         ; preds = %for.cond
  %1 = load i8, i8* %value.addr, align 1, !dbg !4752
  %conv = zext i8 %1 to i32, !dbg !4752
  %2 = load i32, i32* %i, align 4, !dbg !4754
  %shl = shl i32 1, %2, !dbg !4755
  %and = and i32 %conv, %shl, !dbg !4756
  %tobool = icmp ne i32 %and, 0, !dbg !4757
  %3 = zext i1 %tobool to i64, !dbg !4757
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !4757
  %conv1 = trunc i32 %cond to i8, !dbg !4757
  %4 = load i8*, i8** %dest.addr, align 8, !dbg !4758
  %5 = load i32, i32* %idx.addr, align 4, !dbg !4759
  %6 = load i32, i32* %i, align 4, !dbg !4760
  %add = add nsw i32 %5, %6, !dbg !4761
  %idxprom = sext i32 %add to i64, !dbg !4758
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !4758
  store i8 %conv1, i8* %arrayidx, align 1, !dbg !4762
  br label %for.inc, !dbg !4763

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !4764
  %inc = add nsw i32 %7, 1, !dbg !4764
  store i32 %inc, i32* %i, align 4, !dbg !4764
  br label %for.cond, !dbg !4765, !llvm.loop !4766

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4768
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_bits_from_bytes(i8* %dest, i32 %idx, i32 %nb_bits, i8* %tab_byte) #0 !dbg !4769 {
entry:
  %dest.addr = alloca i8*, align 8
  %idx.addr = alloca i32, align 4
  %nb_bits.addr = alloca i32, align 4
  %tab_byte.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %shift = alloca i32, align 4
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !4772, metadata !451), !dbg !4773
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !4774, metadata !451), !dbg !4775
  store i32 %nb_bits, i32* %nb_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_bits.addr, metadata !4776, metadata !451), !dbg !4777
  store i8* %tab_byte, i8** %tab_byte.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tab_byte.addr, metadata !4778, metadata !451), !dbg !4779
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4780, metadata !451), !dbg !4781
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !4782, metadata !451), !dbg !4783
  store i32 0, i32* %shift, align 4, !dbg !4783
  %0 = load i32, i32* %idx.addr, align 4, !dbg !4784
  store i32 %0, i32* %i, align 4, !dbg !4786
  br label %for.cond, !dbg !4787

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4788
  %2 = load i32, i32* %idx.addr, align 4, !dbg !4790
  %3 = load i32, i32* %nb_bits.addr, align 4, !dbg !4791
  %add = add i32 %2, %3, !dbg !4792
  %cmp = icmp ult i32 %1, %add, !dbg !4793
  br i1 %cmp, label %for.body, label %for.end, !dbg !4794

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %tab_byte.addr, align 8, !dbg !4795
  %5 = load i32, i32* %i, align 4, !dbg !4797
  %6 = load i32, i32* %idx.addr, align 4, !dbg !4798
  %sub = sub i32 %5, %6, !dbg !4799
  %div = udiv i32 %sub, 8, !dbg !4800
  %idxprom = zext i32 %div to i64, !dbg !4795
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !4795
  %7 = load i8, i8* %arrayidx, align 1, !dbg !4795
  %conv = zext i8 %7 to i32, !dbg !4795
  %8 = load i32, i32* %shift, align 4, !dbg !4801
  %shl = shl i32 1, %8, !dbg !4802
  %and = and i32 %conv, %shl, !dbg !4803
  %tobool = icmp ne i32 %and, 0, !dbg !4795
  %9 = zext i1 %tobool to i64, !dbg !4795
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !4795
  %conv1 = trunc i32 %cond to i8, !dbg !4795
  %10 = load i8*, i8** %dest.addr, align 8, !dbg !4804
  %11 = load i32, i32* %i, align 4, !dbg !4805
  %idxprom2 = zext i32 %11 to i64, !dbg !4804
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom2, !dbg !4804
  store i8 %conv1, i8* %arrayidx3, align 1, !dbg !4806
  %12 = load i32, i32* %shift, align 4, !dbg !4807
  %inc = add nsw i32 %12, 1, !dbg !4807
  store i32 %inc, i32* %shift, align 4, !dbg !4807
  %13 = load i32, i32* %shift, align 4, !dbg !4808
  %rem = srem i32 %13, 8, !dbg !4808
  store i32 %rem, i32* %shift, align 4, !dbg !4808
  br label %for.inc, !dbg !4809

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !4810
  %inc4 = add i32 %14, 1, !dbg !4810
  store i32 %inc4, i32* %i, align 4, !dbg !4810
  br label %for.cond, !dbg !4811, !llvm.loop !4812

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4814
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @modbus_get_byte_from_bits(i8* %src, i32 %idx, i32 %nb_bits) #0 !dbg !4815 {
entry:
  %src.addr = alloca i8*, align 8
  %idx.addr = alloca i32, align 4
  %nb_bits.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %value = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4818, metadata !451), !dbg !4819
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !4820, metadata !451), !dbg !4821
  store i32 %nb_bits, i32* %nb_bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_bits.addr, metadata !4822, metadata !451), !dbg !4823
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4824, metadata !451), !dbg !4825
  call void @llvm.dbg.declare(metadata i8* %value, metadata !4826, metadata !451), !dbg !4827
  store i8 0, i8* %value, align 1, !dbg !4827
  %0 = load i32, i32* %nb_bits.addr, align 4, !dbg !4828
  %cmp = icmp ugt i32 %0, 8, !dbg !4830
  br i1 %cmp, label %if.then, label %if.end, !dbg !4831

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nb_bits.addr, align 4, !dbg !4832
  %cmp1 = icmp ult i32 %1, 8, !dbg !4832
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !4832

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !4832

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.55, i32 0, i32 0), i32 110, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @__PRETTY_FUNCTION__.modbus_get_byte_from_bits, i32 0, i32 0)) #10, !dbg !4832
  unreachable, !dbg !4832
                                                  ; No predecessors!
  br label %cond.end, !dbg !4832

cond.end:                                         ; preds = %2, %cond.true
  store i32 8, i32* %nb_bits.addr, align 4, !dbg !4834
  br label %if.end, !dbg !4835

if.end:                                           ; preds = %cond.end, %entry
  store i32 0, i32* %i, align 4, !dbg !4836
  br label %for.cond, !dbg !4838

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !4839
  %4 = load i32, i32* %nb_bits.addr, align 4, !dbg !4841
  %cmp2 = icmp ult i32 %3, %4, !dbg !4842
  br i1 %cmp2, label %for.body, label %for.end, !dbg !4843

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %src.addr, align 8, !dbg !4844
  %6 = load i32, i32* %idx.addr, align 4, !dbg !4846
  %7 = load i32, i32* %i, align 4, !dbg !4847
  %add = add i32 %6, %7, !dbg !4848
  %idxprom = zext i32 %add to i64, !dbg !4844
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom, !dbg !4844
  %8 = load i8, i8* %arrayidx, align 1, !dbg !4844
  %conv = zext i8 %8 to i32, !dbg !4844
  %9 = load i32, i32* %i, align 4, !dbg !4849
  %shl = shl i32 %conv, %9, !dbg !4850
  %10 = load i8, i8* %value, align 1, !dbg !4851
  %conv3 = zext i8 %10 to i32, !dbg !4851
  %or = or i32 %conv3, %shl, !dbg !4851
  %conv4 = trunc i32 %or to i8, !dbg !4851
  store i8 %conv4, i8* %value, align 1, !dbg !4851
  br label %for.inc, !dbg !4852

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !4853
  %inc = add i32 %11, 1, !dbg !4853
  store i32 %inc, i32* %i, align 4, !dbg !4853
  br label %for.cond, !dbg !4854, !llvm.loop !4855

for.end:                                          ; preds = %for.cond
  %12 = load i8, i8* %value, align 1, !dbg !4857
  ret i8 %12, !dbg !4858
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #7

; Function Attrs: noinline nounwind uwtable
define float @modbus_get_float_abcd(i16* %src) #0 !dbg !4859 {
entry:
  %src.addr = alloca i16*, align 8
  %f = alloca float, align 4
  %i = alloca i32, align 4
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !4863, metadata !451), !dbg !4864
  call void @llvm.dbg.declare(metadata float* %f, metadata !4865, metadata !451), !dbg !4866
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4867, metadata !451), !dbg !4868
  %0 = load i16*, i16** %src.addr, align 8, !dbg !4869
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 0, !dbg !4869
  %1 = load i16, i16* %arrayidx, align 2, !dbg !4869
  %conv = zext i16 %1 to i32, !dbg !4870
  %shl = shl i32 %conv, 16, !dbg !4871
  %2 = load i16*, i16** %src.addr, align 8, !dbg !4872
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 1, !dbg !4872
  %3 = load i16, i16* %arrayidx1, align 2, !dbg !4872
  %conv2 = zext i16 %3 to i32, !dbg !4872
  %add = add i32 %shl, %conv2, !dbg !4873
  %call = call i32 @ntohl(i32 %add) #9, !dbg !4874
  store i32 %call, i32* %i, align 4, !dbg !4875
  %4 = bitcast float* %f to i8*, !dbg !4876
  %5 = bitcast i32* %i to i8*, !dbg !4876
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 4, i32 4, i1 false), !dbg !4876
  %6 = load float, float* %f, align 4, !dbg !4877
  ret float %6, !dbg !4878
}

; Function Attrs: nounwind readnone
declare i32 @ntohl(i32) #3

; Function Attrs: noinline nounwind uwtable
define float @modbus_get_float_dcba(i16* %src) #0 !dbg !4879 {
entry:
  %src.addr = alloca i16*, align 8
  %f = alloca float, align 4
  %i = alloca i32, align 4
  %__v = alloca i32, align 4
  %__x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !4880, metadata !451), !dbg !4881
  call void @llvm.dbg.declare(metadata float* %f, metadata !4882, metadata !451), !dbg !4883
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4884, metadata !451), !dbg !4885
  call void @llvm.dbg.declare(metadata i32* %__v, metadata !4886, metadata !451), !dbg !4888
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !4889, metadata !451), !dbg !4888
  %0 = load i16*, i16** %src.addr, align 8, !dbg !4888
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 0, !dbg !4888
  %1 = load i16, i16* %arrayidx, align 2, !dbg !4888
  %conv = zext i16 %1 to i32, !dbg !4888
  %shl = shl i32 %conv, 16, !dbg !4888
  %2 = load i16*, i16** %src.addr, align 8, !dbg !4888
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 1, !dbg !4888
  %3 = load i16, i16* %arrayidx1, align 2, !dbg !4888
  %conv2 = zext i16 %3 to i32, !dbg !4888
  %add = add i32 %shl, %conv2, !dbg !4888
  store i32 %add, i32* %__x, align 4, !dbg !4888
  %4 = load i32, i32* %__x, align 4, !dbg !4890
  %5 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %4) #9, !dbg !4890, !srcloc !4892
  store i32 %5, i32* %__v, align 4, !dbg !4890
  %6 = load i32, i32* %__v, align 4, !dbg !4888
  store i32 %6, i32* %tmp, align 4, !dbg !4890
  %7 = load i32, i32* %tmp, align 4, !dbg !4888
  %call = call i32 @ntohl(i32 %7) #9, !dbg !4893
  store i32 %call, i32* %i, align 4, !dbg !4894
  %8 = bitcast float* %f to i8*, !dbg !4895
  %9 = bitcast i32* %i to i8*, !dbg !4895
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 4, i32 4, i1 false), !dbg !4895
  %10 = load float, float* %f, align 4, !dbg !4896
  ret float %10, !dbg !4897
}

; Function Attrs: noinline nounwind uwtable
define float @modbus_get_float_badc(i16* %src) #0 !dbg !4898 {
entry:
  %src.addr = alloca i16*, align 8
  %f = alloca float, align 4
  %i = alloca i32, align 4
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  %__v1 = alloca i16, align 2
  %__x2 = alloca i16, align 2
  %tmp4 = alloca i16, align 2
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !4899, metadata !451), !dbg !4900
  call void @llvm.dbg.declare(metadata float* %f, metadata !4901, metadata !451), !dbg !4902
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4903, metadata !451), !dbg !4904
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !4905, metadata !451), !dbg !4907
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !4908, metadata !451), !dbg !4907
  %0 = load i16*, i16** %src.addr, align 8, !dbg !4907
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 0, !dbg !4907
  %1 = load i16, i16* %arrayidx, align 2, !dbg !4907
  store i16 %1, i16* %__x, align 2, !dbg !4907
  %2 = load i16, i16* %__x, align 2, !dbg !4909
  %3 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %2) #9, !dbg !4909, !srcloc !4911
  store i16 %3, i16* %__v, align 2, !dbg !4909
  %4 = load i16, i16* %__v, align 2, !dbg !4907
  store i16 %4, i16* %tmp, align 2, !dbg !4909
  %5 = load i16, i16* %tmp, align 2, !dbg !4907
  %conv = zext i16 %5 to i32, !dbg !4912
  %shl = shl i32 %conv, 16, !dbg !4913
  call void @llvm.dbg.declare(metadata i16* %__v1, metadata !4914, metadata !451), !dbg !4916
  call void @llvm.dbg.declare(metadata i16* %__x2, metadata !4917, metadata !451), !dbg !4916
  %6 = load i16*, i16** %src.addr, align 8, !dbg !4916
  %arrayidx3 = getelementptr inbounds i16, i16* %6, i64 1, !dbg !4916
  %7 = load i16, i16* %arrayidx3, align 2, !dbg !4916
  store i16 %7, i16* %__x2, align 2, !dbg !4916
  %8 = load i16, i16* %__x2, align 2, !dbg !4918
  %9 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %8) #9, !dbg !4918, !srcloc !4920
  store i16 %9, i16* %__v1, align 2, !dbg !4918
  %10 = load i16, i16* %__v1, align 2, !dbg !4916
  store i16 %10, i16* %tmp4, align 2, !dbg !4918
  %11 = load i16, i16* %tmp4, align 2, !dbg !4916
  %conv5 = zext i16 %11 to i32, !dbg !4921
  %add = add i32 %shl, %conv5, !dbg !4922
  %call = call i32 @ntohl(i32 %add) #9, !dbg !4923
  store i32 %call, i32* %i, align 4, !dbg !4924
  %12 = bitcast float* %f to i8*, !dbg !4925
  %13 = bitcast i32* %i to i8*, !dbg !4925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 4, i32 4, i1 false), !dbg !4925
  %14 = load float, float* %f, align 4, !dbg !4926
  ret float %14, !dbg !4927
}

; Function Attrs: noinline nounwind uwtable
define float @modbus_get_float_cdab(i16* %src) #0 !dbg !4928 {
entry:
  %src.addr = alloca i16*, align 8
  %f = alloca float, align 4
  %i = alloca i32, align 4
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !4929, metadata !451), !dbg !4930
  call void @llvm.dbg.declare(metadata float* %f, metadata !4931, metadata !451), !dbg !4932
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4933, metadata !451), !dbg !4934
  %0 = load i16*, i16** %src.addr, align 8, !dbg !4935
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 1, !dbg !4935
  %1 = load i16, i16* %arrayidx, align 2, !dbg !4935
  %conv = zext i16 %1 to i32, !dbg !4936
  %shl = shl i32 %conv, 16, !dbg !4937
  %2 = load i16*, i16** %src.addr, align 8, !dbg !4938
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 0, !dbg !4938
  %3 = load i16, i16* %arrayidx1, align 2, !dbg !4938
  %conv2 = zext i16 %3 to i32, !dbg !4938
  %add = add i32 %shl, %conv2, !dbg !4939
  %call = call i32 @ntohl(i32 %add) #9, !dbg !4940
  store i32 %call, i32* %i, align 4, !dbg !4941
  %4 = bitcast float* %f to i8*, !dbg !4942
  %5 = bitcast i32* %i to i8*, !dbg !4942
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 4, i32 4, i1 false), !dbg !4942
  %6 = load float, float* %f, align 4, !dbg !4943
  ret float %6, !dbg !4944
}

; Function Attrs: noinline nounwind uwtable
define float @modbus_get_float(i16* %src) #0 !dbg !4945 {
entry:
  %src.addr = alloca i16*, align 8
  %f = alloca float, align 4
  %i = alloca i32, align 4
  store i16* %src, i16** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %src.addr, metadata !4946, metadata !451), !dbg !4947
  call void @llvm.dbg.declare(metadata float* %f, metadata !4948, metadata !451), !dbg !4949
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4950, metadata !451), !dbg !4951
  %0 = load i16*, i16** %src.addr, align 8, !dbg !4952
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 1, !dbg !4952
  %1 = load i16, i16* %arrayidx, align 2, !dbg !4952
  %conv = zext i16 %1 to i32, !dbg !4953
  %shl = shl i32 %conv, 16, !dbg !4954
  %2 = load i16*, i16** %src.addr, align 8, !dbg !4955
  %arrayidx1 = getelementptr inbounds i16, i16* %2, i64 0, !dbg !4955
  %3 = load i16, i16* %arrayidx1, align 2, !dbg !4955
  %conv2 = zext i16 %3 to i32, !dbg !4955
  %add = add i32 %shl, %conv2, !dbg !4956
  store i32 %add, i32* %i, align 4, !dbg !4957
  %4 = bitcast float* %f to i8*, !dbg !4958
  %5 = bitcast i32* %i to i8*, !dbg !4958
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 4, i32 4, i1 false), !dbg !4958
  %6 = load float, float* %f, align 4, !dbg !4959
  ret float %6, !dbg !4960
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_float_abcd(float %f, i16* %dest) #0 !dbg !4961 {
entry:
  %f.addr = alloca float, align 4
  %dest.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !4964, metadata !451), !dbg !4965
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !4966, metadata !451), !dbg !4967
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4968, metadata !451), !dbg !4969
  %0 = bitcast i32* %i to i8*, !dbg !4970
  %1 = bitcast float* %f.addr to i8*, !dbg !4970
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 4, i1 false), !dbg !4970
  %2 = load i32, i32* %i, align 4, !dbg !4971
  %call = call i32 @htonl(i32 %2) #9, !dbg !4972
  store i32 %call, i32* %i, align 4, !dbg !4973
  %3 = load i32, i32* %i, align 4, !dbg !4974
  %shr = lshr i32 %3, 16, !dbg !4975
  %conv = trunc i32 %shr to i16, !dbg !4976
  %4 = load i16*, i16** %dest.addr, align 8, !dbg !4977
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 0, !dbg !4977
  store i16 %conv, i16* %arrayidx, align 2, !dbg !4978
  %5 = load i32, i32* %i, align 4, !dbg !4979
  %conv1 = trunc i32 %5 to i16, !dbg !4980
  %6 = load i16*, i16** %dest.addr, align 8, !dbg !4981
  %arrayidx2 = getelementptr inbounds i16, i16* %6, i64 1, !dbg !4981
  store i16 %conv1, i16* %arrayidx2, align 2, !dbg !4982
  ret void, !dbg !4983
}

; Function Attrs: nounwind readnone
declare i32 @htonl(i32) #3

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_float_dcba(float %f, i16* %dest) #0 !dbg !4984 {
entry:
  %f.addr = alloca float, align 4
  %dest.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %__v = alloca i32, align 4
  %__x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !4985, metadata !451), !dbg !4986
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !4987, metadata !451), !dbg !4988
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4989, metadata !451), !dbg !4990
  %0 = bitcast i32* %i to i8*, !dbg !4991
  %1 = bitcast float* %f.addr to i8*, !dbg !4991
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 4, i1 false), !dbg !4991
  call void @llvm.dbg.declare(metadata i32* %__v, metadata !4992, metadata !451), !dbg !4994
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !4995, metadata !451), !dbg !4994
  %2 = load i32, i32* %i, align 4, !dbg !4994
  %call = call i32 @htonl(i32 %2) #9, !dbg !4994
  store i32 %call, i32* %__x, align 4, !dbg !4994
  %3 = load i32, i32* %__x, align 4, !dbg !4996
  %4 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %3) #9, !dbg !4996, !srcloc !4998
  store i32 %4, i32* %__v, align 4, !dbg !4996
  %5 = load i32, i32* %__v, align 4, !dbg !4994
  store i32 %5, i32* %tmp, align 4, !dbg !4996
  %6 = load i32, i32* %tmp, align 4, !dbg !4994
  store i32 %6, i32* %i, align 4, !dbg !4999
  %7 = load i32, i32* %i, align 4, !dbg !5000
  %shr = lshr i32 %7, 16, !dbg !5001
  %conv = trunc i32 %shr to i16, !dbg !5002
  %8 = load i16*, i16** %dest.addr, align 8, !dbg !5003
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 0, !dbg !5003
  store i16 %conv, i16* %arrayidx, align 2, !dbg !5004
  %9 = load i32, i32* %i, align 4, !dbg !5005
  %conv1 = trunc i32 %9 to i16, !dbg !5006
  %10 = load i16*, i16** %dest.addr, align 8, !dbg !5007
  %arrayidx2 = getelementptr inbounds i16, i16* %10, i64 1, !dbg !5007
  store i16 %conv1, i16* %arrayidx2, align 2, !dbg !5008
  ret void, !dbg !5009
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_float_badc(float %f, i16* %dest) #0 !dbg !5010 {
entry:
  %f.addr = alloca float, align 4
  %dest.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  %__v1 = alloca i16, align 2
  %__x2 = alloca i16, align 2
  %tmp4 = alloca i16, align 2
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !5011, metadata !451), !dbg !5012
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !5013, metadata !451), !dbg !5014
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5015, metadata !451), !dbg !5016
  %0 = bitcast i32* %i to i8*, !dbg !5017
  %1 = bitcast float* %f.addr to i8*, !dbg !5017
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 4, i1 false), !dbg !5017
  %2 = load i32, i32* %i, align 4, !dbg !5018
  %call = call i32 @htonl(i32 %2) #9, !dbg !5019
  store i32 %call, i32* %i, align 4, !dbg !5020
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !5021, metadata !451), !dbg !5023
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !5024, metadata !451), !dbg !5023
  %3 = load i32, i32* %i, align 4, !dbg !5023
  %shr = lshr i32 %3, 16, !dbg !5023
  %conv = trunc i32 %shr to i16, !dbg !5023
  store i16 %conv, i16* %__x, align 2, !dbg !5023
  %4 = load i16, i16* %__x, align 2, !dbg !5025
  %5 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %4) #9, !dbg !5025, !srcloc !5027
  store i16 %5, i16* %__v, align 2, !dbg !5025
  %6 = load i16, i16* %__v, align 2, !dbg !5023
  store i16 %6, i16* %tmp, align 2, !dbg !5025
  %7 = load i16, i16* %tmp, align 2, !dbg !5023
  %8 = load i16*, i16** %dest.addr, align 8, !dbg !5028
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 0, !dbg !5028
  store i16 %7, i16* %arrayidx, align 2, !dbg !5029
  call void @llvm.dbg.declare(metadata i16* %__v1, metadata !5030, metadata !451), !dbg !5032
  call void @llvm.dbg.declare(metadata i16* %__x2, metadata !5033, metadata !451), !dbg !5032
  %9 = load i32, i32* %i, align 4, !dbg !5032
  %and = and i32 %9, 65535, !dbg !5032
  %conv3 = trunc i32 %and to i16, !dbg !5032
  store i16 %conv3, i16* %__x2, align 2, !dbg !5032
  %10 = load i16, i16* %__x2, align 2, !dbg !5034
  %11 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %10) #9, !dbg !5034, !srcloc !5036
  store i16 %11, i16* %__v1, align 2, !dbg !5034
  %12 = load i16, i16* %__v1, align 2, !dbg !5032
  store i16 %12, i16* %tmp4, align 2, !dbg !5034
  %13 = load i16, i16* %tmp4, align 2, !dbg !5032
  %14 = load i16*, i16** %dest.addr, align 8, !dbg !5037
  %arrayidx5 = getelementptr inbounds i16, i16* %14, i64 1, !dbg !5037
  store i16 %13, i16* %arrayidx5, align 2, !dbg !5038
  ret void, !dbg !5039
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_float_cdab(float %f, i16* %dest) #0 !dbg !5040 {
entry:
  %f.addr = alloca float, align 4
  %dest.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !5041, metadata !451), !dbg !5042
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !5043, metadata !451), !dbg !5044
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5045, metadata !451), !dbg !5046
  %0 = bitcast i32* %i to i8*, !dbg !5047
  %1 = bitcast float* %f.addr to i8*, !dbg !5047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 4, i1 false), !dbg !5047
  %2 = load i32, i32* %i, align 4, !dbg !5048
  %call = call i32 @htonl(i32 %2) #9, !dbg !5049
  store i32 %call, i32* %i, align 4, !dbg !5050
  %3 = load i32, i32* %i, align 4, !dbg !5051
  %conv = trunc i32 %3 to i16, !dbg !5052
  %4 = load i16*, i16** %dest.addr, align 8, !dbg !5053
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 0, !dbg !5053
  store i16 %conv, i16* %arrayidx, align 2, !dbg !5054
  %5 = load i32, i32* %i, align 4, !dbg !5055
  %shr = lshr i32 %5, 16, !dbg !5056
  %conv1 = trunc i32 %shr to i16, !dbg !5057
  %6 = load i16*, i16** %dest.addr, align 8, !dbg !5058
  %arrayidx2 = getelementptr inbounds i16, i16* %6, i64 1, !dbg !5058
  store i16 %conv1, i16* %arrayidx2, align 2, !dbg !5059
  ret void, !dbg !5060
}

; Function Attrs: noinline nounwind uwtable
define void @modbus_set_float(float %f, i16* %dest) #0 !dbg !5061 {
entry:
  %f.addr = alloca float, align 4
  %dest.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !5062, metadata !451), !dbg !5063
  store i16* %dest, i16** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dest.addr, metadata !5064, metadata !451), !dbg !5065
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5066, metadata !451), !dbg !5067
  %0 = bitcast i32* %i to i8*, !dbg !5068
  %1 = bitcast float* %f.addr to i8*, !dbg !5068
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 4, i1 false), !dbg !5068
  %2 = load i32, i32* %i, align 4, !dbg !5069
  %conv = trunc i32 %2 to i16, !dbg !5070
  %3 = load i16*, i16** %dest.addr, align 8, !dbg !5071
  %arrayidx = getelementptr inbounds i16, i16* %3, i64 0, !dbg !5071
  store i16 %conv, i16* %arrayidx, align 2, !dbg !5072
  %4 = load i32, i32* %i, align 4, !dbg !5073
  %shr = lshr i32 %4, 16, !dbg !5074
  %conv1 = trunc i32 %shr to i16, !dbg !5075
  %5 = load i16*, i16** %dest.addr, align 8, !dbg !5076
  %arrayidx2 = getelementptr inbounds i16, i16* %5, i64 1, !dbg !5076
  store i16 %conv1, i16* %arrayidx2, align 2, !dbg !5077
  ret void, !dbg !5078
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_set_serial_mode(%struct._modbus.4* %ctx, i32 %mode) #0 !dbg !5079 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %mode.addr = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  %rs485conf = alloca %struct.serial_rs485, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5080, metadata !451), !dbg !5081
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5082, metadata !451), !dbg !5083
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5084
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5086
  br i1 %cmp, label %if.then, label %if.end, !dbg !5087

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5088
  store i32 22, i32* %call, align 4, !dbg !5090
  store i32 -1, i32* %retval, align 4, !dbg !5091
  br label %return, !dbg !5091

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5092
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5094
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5094
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5095
  %3 = load i32, i32* %backend_type, align 8, !dbg !5095
  %cmp1 = icmp eq i32 %3, 0, !dbg !5096
  br i1 %cmp1, label %if.then2, label %if.end34, !dbg !5097

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5098, metadata !451), !dbg !5100
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5101
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5102
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5102
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5101
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5100
  call void @llvm.dbg.declare(metadata %struct.serial_rs485* %rs485conf, metadata !5103, metadata !451), !dbg !5116
  %7 = load i32, i32* %mode.addr, align 4, !dbg !5117
  %cmp3 = icmp eq i32 %7, 1, !dbg !5119
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !5120

if.then4:                                         ; preds = %if.then2
  %8 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5121
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %8, i32 0, i32 1, !dbg !5124
  %9 = load i32, i32* %s, align 4, !dbg !5124
  %call5 = call i32 (i32, i64, ...) @ioctl(i32 %9, i64 21550, %struct.serial_rs485* %rs485conf) #6, !dbg !5125
  %cmp6 = icmp slt i32 %call5, 0, !dbg !5126
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5127

if.then7:                                         ; preds = %if.then4
  store i32 -1, i32* %retval, align 4, !dbg !5128
  br label %return, !dbg !5128

if.end8:                                          ; preds = %if.then4
  %flags = getelementptr inbounds %struct.serial_rs485, %struct.serial_rs485* %rs485conf, i32 0, i32 0, !dbg !5130
  %10 = load i32, i32* %flags, align 4, !dbg !5131
  %or = or i32 %10, 1, !dbg !5131
  store i32 %or, i32* %flags, align 4, !dbg !5131
  %11 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5132
  %s9 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %11, i32 0, i32 1, !dbg !5134
  %12 = load i32, i32* %s9, align 4, !dbg !5134
  %call10 = call i32 (i32, i64, ...) @ioctl(i32 %12, i64 21551, %struct.serial_rs485* %rs485conf) #6, !dbg !5135
  %cmp11 = icmp slt i32 %call10, 0, !dbg !5136
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5137

if.then12:                                        ; preds = %if.end8
  store i32 -1, i32* %retval, align 4, !dbg !5138
  br label %return, !dbg !5138

if.end13:                                         ; preds = %if.end8
  %13 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5140
  %serial_mode = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %13, i32 0, i32 6, !dbg !5141
  store i32 1, i32* %serial_mode, align 4, !dbg !5142
  store i32 0, i32* %retval, align 4, !dbg !5143
  br label %return, !dbg !5143

if.else:                                          ; preds = %if.then2
  %14 = load i32, i32* %mode.addr, align 4, !dbg !5144
  %cmp14 = icmp eq i32 %14, 0, !dbg !5146
  br i1 %cmp14, label %if.then15, label %if.end32, !dbg !5147

if.then15:                                        ; preds = %if.else
  %15 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5148
  %serial_mode16 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %15, i32 0, i32 6, !dbg !5151
  %16 = load i32, i32* %serial_mode16, align 4, !dbg !5151
  %cmp17 = icmp eq i32 %16, 1, !dbg !5152
  br i1 %cmp17, label %if.then18, label %if.end30, !dbg !5153

if.then18:                                        ; preds = %if.then15
  %17 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5154
  %s19 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %17, i32 0, i32 1, !dbg !5157
  %18 = load i32, i32* %s19, align 4, !dbg !5157
  %call20 = call i32 (i32, i64, ...) @ioctl(i32 %18, i64 21550, %struct.serial_rs485* %rs485conf) #6, !dbg !5158
  %cmp21 = icmp slt i32 %call20, 0, !dbg !5159
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !5160

if.then22:                                        ; preds = %if.then18
  store i32 -1, i32* %retval, align 4, !dbg !5161
  br label %return, !dbg !5161

if.end23:                                         ; preds = %if.then18
  %flags24 = getelementptr inbounds %struct.serial_rs485, %struct.serial_rs485* %rs485conf, i32 0, i32 0, !dbg !5163
  %19 = load i32, i32* %flags24, align 4, !dbg !5164
  %and = and i32 %19, -2, !dbg !5164
  store i32 %and, i32* %flags24, align 4, !dbg !5164
  %20 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5165
  %s25 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %20, i32 0, i32 1, !dbg !5167
  %21 = load i32, i32* %s25, align 4, !dbg !5167
  %call26 = call i32 (i32, i64, ...) @ioctl(i32 %21, i64 21551, %struct.serial_rs485* %rs485conf) #6, !dbg !5168
  %cmp27 = icmp slt i32 %call26, 0, !dbg !5169
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !5170

if.then28:                                        ; preds = %if.end23
  store i32 -1, i32* %retval, align 4, !dbg !5171
  br label %return, !dbg !5171

if.end29:                                         ; preds = %if.end23
  br label %if.end30, !dbg !5173

if.end30:                                         ; preds = %if.end29, %if.then15
  %22 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5174
  %serial_mode31 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %22, i32 0, i32 6, !dbg !5175
  store i32 0, i32* %serial_mode31, align 4, !dbg !5176
  store i32 0, i32* %retval, align 4, !dbg !5177
  br label %return, !dbg !5177

if.end32:                                         ; preds = %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.end32
  br label %if.end34, !dbg !5178

if.end34:                                         ; preds = %if.end33, %if.end
  %call35 = call i32* @__errno_location() #9, !dbg !5179
  store i32 22, i32* %call35, align 4, !dbg !5180
  store i32 -1, i32* %retval, align 4, !dbg !5181
  br label %return, !dbg !5181

return:                                           ; preds = %if.end34, %if.end30, %if.then28, %if.then22, %if.end13, %if.then12, %if.then7, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !5182
  ret i32 %23, !dbg !5182
}

; Function Attrs: nounwind
declare i32 @ioctl(i32, i64, ...) #2

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_get_serial_mode(%struct._modbus.4* %ctx) #0 !dbg !5183 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5184, metadata !451), !dbg !5185
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5186
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5188
  br i1 %cmp, label %if.then, label %if.end, !dbg !5189

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5190
  store i32 22, i32* %call, align 4, !dbg !5192
  store i32 -1, i32* %retval, align 4, !dbg !5193
  br label %return, !dbg !5193

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5194
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5196
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5196
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5197
  %3 = load i32, i32* %backend_type, align 8, !dbg !5197
  %cmp1 = icmp eq i32 %3, 0, !dbg !5198
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !5199

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5200, metadata !451), !dbg !5202
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5203
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5204
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5204
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5203
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5202
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5205
  %serial_mode = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 6, !dbg !5206
  %8 = load i32, i32* %serial_mode, align 4, !dbg !5206
  store i32 %8, i32* %retval, align 4, !dbg !5207
  br label %return, !dbg !5207

if.else:                                          ; preds = %if.end
  %call3 = call i32* @__errno_location() #9, !dbg !5208
  store i32 22, i32* %call3, align 4, !dbg !5210
  store i32 -1, i32* %retval, align 4, !dbg !5211
  br label %return, !dbg !5211

return:                                           ; preds = %if.else, %if.then2, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5212
  ret i32 %9, !dbg !5212
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_get_rts(%struct._modbus.4* %ctx) #0 !dbg !5213 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5214, metadata !451), !dbg !5215
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5216
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5218
  br i1 %cmp, label %if.then, label %if.end, !dbg !5219

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5220
  store i32 22, i32* %call, align 4, !dbg !5222
  store i32 -1, i32* %retval, align 4, !dbg !5223
  br label %return, !dbg !5223

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5224
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5226
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5226
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5227
  %3 = load i32, i32* %backend_type, align 8, !dbg !5227
  %cmp1 = icmp eq i32 %3, 0, !dbg !5228
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !5229

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5230, metadata !451), !dbg !5232
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5233
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5234
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5234
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5233
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5232
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5235
  %rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 7, !dbg !5236
  %8 = load i32, i32* %rts, align 8, !dbg !5236
  store i32 %8, i32* %retval, align 4, !dbg !5237
  br label %return, !dbg !5237

if.else:                                          ; preds = %if.end
  %call3 = call i32* @__errno_location() #9, !dbg !5238
  store i32 22, i32* %call3, align 4, !dbg !5240
  store i32 -1, i32* %retval, align 4, !dbg !5241
  br label %return, !dbg !5241

return:                                           ; preds = %if.else, %if.then2, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5242
  ret i32 %9, !dbg !5242
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_set_rts(%struct._modbus.4* %ctx, i32 %mode) #0 !dbg !5243 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %mode.addr = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5244, metadata !451), !dbg !5245
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5246, metadata !451), !dbg !5247
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5248
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5250
  br i1 %cmp, label %if.then, label %if.end, !dbg !5251

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5252
  store i32 22, i32* %call, align 4, !dbg !5254
  store i32 -1, i32* %retval, align 4, !dbg !5255
  br label %return, !dbg !5255

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5256
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5258
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5258
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5259
  %3 = load i32, i32* %backend_type, align 8, !dbg !5259
  %cmp1 = icmp eq i32 %3, 0, !dbg !5260
  br i1 %cmp1, label %if.then2, label %if.end11, !dbg !5261

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5262, metadata !451), !dbg !5264
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5265
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5266
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5266
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5265
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5264
  %7 = load i32, i32* %mode.addr, align 4, !dbg !5267
  %cmp3 = icmp eq i32 %7, 0, !dbg !5269
  br i1 %cmp3, label %if.then7, label %lor.lhs.false, !dbg !5270

lor.lhs.false:                                    ; preds = %if.then2
  %8 = load i32, i32* %mode.addr, align 4, !dbg !5271
  %cmp4 = icmp eq i32 %8, 1, !dbg !5272
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5, !dbg !5273

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %9 = load i32, i32* %mode.addr, align 4, !dbg !5274
  %cmp6 = icmp eq i32 %9, 2, !dbg !5275
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !5276

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false, %if.then2
  %10 = load i32, i32* %mode.addr, align 4, !dbg !5277
  %11 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5279
  %rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %11, i32 0, i32 7, !dbg !5280
  store i32 %10, i32* %rts, align 8, !dbg !5281
  %12 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5282
  %set_rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %12, i32 0, i32 10, !dbg !5283
  %13 = load void (%struct._modbus.4*, i32)*, void (%struct._modbus.4*, i32)** %set_rts, align 8, !dbg !5283
  %14 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5284
  %15 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5285
  %rts8 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %15, i32 0, i32 7, !dbg !5286
  %16 = load i32, i32* %rts8, align 8, !dbg !5286
  %cmp9 = icmp ne i32 %16, 1, !dbg !5287
  %conv = zext i1 %cmp9 to i32, !dbg !5287
  call void %13(%struct._modbus.4* %14, i32 %conv), !dbg !5282
  store i32 0, i32* %retval, align 4, !dbg !5288
  br label %return, !dbg !5288

if.else:                                          ; preds = %lor.lhs.false5
  %call10 = call i32* @__errno_location() #9, !dbg !5289
  store i32 22, i32* %call10, align 4, !dbg !5291
  store i32 -1, i32* %retval, align 4, !dbg !5292
  br label %return, !dbg !5292

if.end11:                                         ; preds = %if.end
  %call12 = call i32* @__errno_location() #9, !dbg !5293
  store i32 22, i32* %call12, align 4, !dbg !5294
  store i32 -1, i32* %retval, align 4, !dbg !5295
  br label %return, !dbg !5295

return:                                           ; preds = %if.end11, %if.else, %if.then7, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !5296
  ret i32 %17, !dbg !5296
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_set_custom_rts(%struct._modbus.4* %ctx, void (%struct._modbus.4*, i32)* %set_rts) #0 !dbg !5297 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %set_rts.addr = alloca void (%struct._modbus.4*, i32)*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5300, metadata !451), !dbg !5301
  store void (%struct._modbus.4*, i32)* %set_rts, void (%struct._modbus.4*, i32)** %set_rts.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct._modbus.4*, i32)** %set_rts.addr, metadata !5302, metadata !451), !dbg !5303
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5304
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5306
  br i1 %cmp, label %if.then, label %if.end, !dbg !5307

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5308
  store i32 22, i32* %call, align 4, !dbg !5310
  store i32 -1, i32* %retval, align 4, !dbg !5311
  br label %return, !dbg !5311

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5312
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5314
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5314
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5315
  %3 = load i32, i32* %backend_type, align 8, !dbg !5315
  %cmp1 = icmp eq i32 %3, 0, !dbg !5316
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !5317

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5318, metadata !451), !dbg !5320
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5321
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5322
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5322
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5321
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5320
  %7 = load void (%struct._modbus.4*, i32)*, void (%struct._modbus.4*, i32)** %set_rts.addr, align 8, !dbg !5323
  %8 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5324
  %set_rts3 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %8, i32 0, i32 10, !dbg !5325
  store void (%struct._modbus.4*, i32)* %7, void (%struct._modbus.4*, i32)** %set_rts3, align 8, !dbg !5326
  store i32 0, i32* %retval, align 4, !dbg !5327
  br label %return, !dbg !5327

if.else:                                          ; preds = %if.end
  %call4 = call i32* @__errno_location() #9, !dbg !5328
  store i32 22, i32* %call4, align 4, !dbg !5330
  store i32 -1, i32* %retval, align 4, !dbg !5331
  br label %return, !dbg !5331

return:                                           ; preds = %if.else, %if.then2, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5332
  ret i32 %9, !dbg !5332
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_get_rts_delay(%struct._modbus.4* %ctx) #0 !dbg !5333 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5334, metadata !451), !dbg !5335
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5336
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5338
  br i1 %cmp, label %if.then, label %if.end, !dbg !5339

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !5340
  store i32 22, i32* %call, align 4, !dbg !5342
  store i32 -1, i32* %retval, align 4, !dbg !5343
  br label %return, !dbg !5343

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5344
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %1, i32 0, i32 7, !dbg !5346
  %2 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5346
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %2, i32 0, i32 0, !dbg !5347
  %3 = load i32, i32* %backend_type, align 8, !dbg !5347
  %cmp1 = icmp eq i32 %3, 0, !dbg !5348
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !5349

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5350, metadata !451), !dbg !5352
  %4 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5353
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %4, i32 0, i32 8, !dbg !5354
  %5 = load i8*, i8** %backend_data, align 8, !dbg !5354
  %6 = bitcast i8* %5 to %struct._modbus_rtu*, !dbg !5355
  store %struct._modbus_rtu* %6, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5356
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5357
  %rts_delay = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 8, !dbg !5358
  %8 = load i32, i32* %rts_delay, align 4, !dbg !5358
  store i32 %8, i32* %retval, align 4, !dbg !5359
  br label %return, !dbg !5359

if.else:                                          ; preds = %if.end
  %call3 = call i32* @__errno_location() #9, !dbg !5360
  store i32 22, i32* %call3, align 4, !dbg !5362
  store i32 -1, i32* %retval, align 4, !dbg !5363
  br label %return, !dbg !5363

return:                                           ; preds = %if.else, %if.then2, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5364
  ret i32 %9, !dbg !5364
}

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_rtu_set_rts_delay(%struct._modbus.4* %ctx, i32 %us) #0 !dbg !5365 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %us.addr = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5366, metadata !451), !dbg !5367
  store i32 %us, i32* %us.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %us.addr, metadata !5368, metadata !451), !dbg !5369
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5370
  %cmp = icmp eq %struct._modbus.4* %0, null, !dbg !5372
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5373

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %us.addr, align 4, !dbg !5374
  %cmp1 = icmp slt i32 %1, 0, !dbg !5375
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5376

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #9, !dbg !5377
  store i32 22, i32* %call, align 4, !dbg !5379
  store i32 -1, i32* %retval, align 4, !dbg !5380
  br label %return, !dbg !5380

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5381
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %2, i32 0, i32 7, !dbg !5383
  %3 = load %struct._modbus_backend.3*, %struct._modbus_backend.3** %backend, align 8, !dbg !5383
  %backend_type = getelementptr inbounds %struct._modbus_backend.3, %struct._modbus_backend.3* %3, i32 0, i32 0, !dbg !5384
  %4 = load i32, i32* %backend_type, align 8, !dbg !5384
  %cmp2 = icmp eq i32 %4, 0, !dbg !5385
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !5386

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5387, metadata !451), !dbg !5389
  %5 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5390
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %5, i32 0, i32 8, !dbg !5391
  %6 = load i8*, i8** %backend_data, align 8, !dbg !5391
  %7 = bitcast i8* %6 to %struct._modbus_rtu*, !dbg !5392
  store %struct._modbus_rtu* %7, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5393
  %8 = load i32, i32* %us.addr, align 4, !dbg !5394
  %9 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5395
  %rts_delay = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %9, i32 0, i32 8, !dbg !5396
  store i32 %8, i32* %rts_delay, align 4, !dbg !5397
  store i32 0, i32* %retval, align 4, !dbg !5398
  br label %return, !dbg !5398

if.else:                                          ; preds = %if.end
  %call4 = call i32* @__errno_location() #9, !dbg !5399
  store i32 22, i32* %call4, align 4, !dbg !5401
  store i32 -1, i32* %retval, align 4, !dbg !5402
  br label %return, !dbg !5402

return:                                           ; preds = %if.else, %if.then3, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !5403
  ret i32 %10, !dbg !5403
}

; Function Attrs: noinline nounwind uwtable
define %struct._modbus.4* @modbus_new_rtu(i8* %device, i32 %baud, i8 signext %parity, i32 %data_bit, i32 %stop_bit) #0 !dbg !5404 {
entry:
  %retval = alloca %struct._modbus.4*, align 8
  %device.addr = alloca i8*, align 8
  %baud.addr = alloca i32, align 4
  %parity.addr = alloca i8, align 1
  %data_bit.addr = alloca i32, align 4
  %stop_bit.addr = alloca i32, align 4
  %ctx = alloca %struct._modbus.4*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store i8* %device, i8** %device.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %device.addr, metadata !5407, metadata !451), !dbg !5408
  store i32 %baud, i32* %baud.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %baud.addr, metadata !5409, metadata !451), !dbg !5410
  store i8 %parity, i8* %parity.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %parity.addr, metadata !5411, metadata !451), !dbg !5412
  store i32 %data_bit, i32* %data_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %data_bit.addr, metadata !5413, metadata !451), !dbg !5414
  store i32 %stop_bit, i32* %stop_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stop_bit.addr, metadata !5415, metadata !451), !dbg !5416
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx, metadata !5417, metadata !451), !dbg !5418
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5419, metadata !451), !dbg !5420
  %0 = load i8*, i8** %device.addr, align 8, !dbg !5421
  %cmp = icmp eq i8* %0, null, !dbg !5423
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5424

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %device.addr, align 8, !dbg !5425
  %2 = load i8, i8* %1, align 1, !dbg !5426
  %conv = sext i8 %2 to i32, !dbg !5426
  %cmp1 = icmp eq i32 %conv, 0, !dbg !5427
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5428

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5429
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.56, i32 0, i32 0)), !dbg !5431
  %call3 = call i32* @__errno_location() #9, !dbg !5432
  store i32 22, i32* %call3, align 4, !dbg !5433
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5434
  br label %return, !dbg !5434

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %baud.addr, align 4, !dbg !5435
  %cmp4 = icmp eq i32 %4, 0, !dbg !5437
  br i1 %cmp4, label %if.then6, label %if.end9, !dbg !5438

if.then6:                                         ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5439
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1.57, i32 0, i32 0)), !dbg !5441
  %call8 = call i32* @__errno_location() #9, !dbg !5442
  store i32 22, i32* %call8, align 4, !dbg !5443
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5444
  br label %return, !dbg !5444

if.end9:                                          ; preds = %if.end
  %call10 = call noalias i8* @malloc(i64 80) #6, !dbg !5445
  %6 = bitcast i8* %call10 to %struct._modbus.4*, !dbg !5446
  store %struct._modbus.4* %6, %struct._modbus.4** %ctx, align 8, !dbg !5447
  %7 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5448
  %cmp11 = icmp eq %struct._modbus.4* %7, null, !dbg !5450
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !5451

if.then13:                                        ; preds = %if.end9
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5452
  br label %return, !dbg !5452

if.end14:                                         ; preds = %if.end9
  %8 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5454
  call void bitcast (void (%struct._modbus*)* @_modbus_init_common to void (%struct._modbus.4*)*)(%struct._modbus.4* %8), !dbg !5455
  %9 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5456
  %backend = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %9, i32 0, i32 7, !dbg !5457
  store %struct._modbus_backend.3* bitcast ({ i32, i32, i32, i32, i32 (%struct._modbus.4*, i32)*, i32 (%struct._modbus.4*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*)*, i64 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i32)*, i32 (%struct._modbus.4*, i8*, i8*, i32)*, i32 (%struct._modbus.4*)*, void (%struct._modbus.4*)*, i32 (%struct._modbus.4*)*, i32 (%struct._modbus.4*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.4*)* }* @_modbus_rtu_backend to %struct._modbus_backend.3*), %struct._modbus_backend.3** %backend, align 8, !dbg !5458
  %call15 = call noalias i8* @malloc(i64 112) #6, !dbg !5459
  %10 = bitcast i8* %call15 to %struct._modbus_rtu*, !dbg !5460
  %11 = bitcast %struct._modbus_rtu* %10 to i8*, !dbg !5460
  %12 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5461
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %12, i32 0, i32 8, !dbg !5462
  store i8* %11, i8** %backend_data, align 8, !dbg !5463
  %13 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5464
  %backend_data16 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %13, i32 0, i32 8, !dbg !5466
  %14 = load i8*, i8** %backend_data16, align 8, !dbg !5466
  %cmp17 = icmp eq i8* %14, null, !dbg !5467
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !5468

if.then19:                                        ; preds = %if.end14
  %15 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5469
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.4*)*)(%struct._modbus.4* %15), !dbg !5471
  %call20 = call i32* @__errno_location() #9, !dbg !5472
  store i32 12, i32* %call20, align 4, !dbg !5473
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5474
  br label %return, !dbg !5474

if.end21:                                         ; preds = %if.end14
  %16 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5475
  %backend_data22 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %16, i32 0, i32 8, !dbg !5476
  %17 = load i8*, i8** %backend_data22, align 8, !dbg !5476
  %18 = bitcast i8* %17 to %struct._modbus_rtu*, !dbg !5477
  store %struct._modbus_rtu* %18, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5478
  %19 = load i8*, i8** %device.addr, align 8, !dbg !5479
  %call23 = call i64 @strlen(i8* %19) #11, !dbg !5480
  %add = add i64 %call23, 1, !dbg !5481
  %mul = mul i64 %add, 1, !dbg !5482
  %call24 = call noalias i8* @malloc(i64 %mul) #6, !dbg !5483
  %20 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5484
  %device25 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %20, i32 0, i32 0, !dbg !5485
  store i8* %call24, i8** %device25, align 8, !dbg !5486
  %21 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5487
  %device26 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %21, i32 0, i32 0, !dbg !5489
  %22 = load i8*, i8** %device26, align 8, !dbg !5489
  %cmp27 = icmp eq i8* %22, null, !dbg !5490
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !5491

if.then29:                                        ; preds = %if.end21
  %23 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5492
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.4*)*)(%struct._modbus.4* %23), !dbg !5494
  %call30 = call i32* @__errno_location() #9, !dbg !5495
  store i32 12, i32* %call30, align 4, !dbg !5496
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5497
  br label %return, !dbg !5497

if.end31:                                         ; preds = %if.end21
  %24 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5498
  %device32 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %24, i32 0, i32 0, !dbg !5499
  %25 = load i8*, i8** %device32, align 8, !dbg !5499
  %26 = load i8*, i8** %device.addr, align 8, !dbg !5500
  %call33 = call i8* @strcpy(i8* %25, i8* %26) #6, !dbg !5501
  %27 = load i32, i32* %baud.addr, align 4, !dbg !5502
  %28 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5503
  %baud34 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %28, i32 0, i32 1, !dbg !5504
  store i32 %27, i32* %baud34, align 8, !dbg !5505
  %29 = load i8, i8* %parity.addr, align 1, !dbg !5506
  %conv35 = sext i8 %29 to i32, !dbg !5506
  %cmp36 = icmp eq i32 %conv35, 78, !dbg !5508
  br i1 %cmp36, label %if.then46, label %lor.lhs.false38, !dbg !5509

lor.lhs.false38:                                  ; preds = %if.end31
  %30 = load i8, i8* %parity.addr, align 1, !dbg !5510
  %conv39 = sext i8 %30 to i32, !dbg !5510
  %cmp40 = icmp eq i32 %conv39, 69, !dbg !5511
  br i1 %cmp40, label %if.then46, label %lor.lhs.false42, !dbg !5512

lor.lhs.false42:                                  ; preds = %lor.lhs.false38
  %31 = load i8, i8* %parity.addr, align 1, !dbg !5513
  %conv43 = sext i8 %31 to i32, !dbg !5513
  %cmp44 = icmp eq i32 %conv43, 79, !dbg !5514
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !5515

if.then46:                                        ; preds = %lor.lhs.false42, %lor.lhs.false38, %if.end31
  %32 = load i8, i8* %parity.addr, align 1, !dbg !5516
  %33 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5518
  %parity47 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %33, i32 0, i32 4, !dbg !5519
  store i8 %32, i8* %parity47, align 2, !dbg !5520
  br label %if.end49, !dbg !5521

if.else:                                          ; preds = %lor.lhs.false42
  %34 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5522
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.4*)*)(%struct._modbus.4* %34), !dbg !5524
  %call48 = call i32* @__errno_location() #9, !dbg !5525
  store i32 22, i32* %call48, align 4, !dbg !5526
  store %struct._modbus.4* null, %struct._modbus.4** %retval, align 8, !dbg !5527
  br label %return, !dbg !5527

if.end49:                                         ; preds = %if.then46
  %35 = load i32, i32* %data_bit.addr, align 4, !dbg !5528
  %conv50 = trunc i32 %35 to i8, !dbg !5528
  %36 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5529
  %data_bit51 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %36, i32 0, i32 2, !dbg !5530
  store i8 %conv50, i8* %data_bit51, align 4, !dbg !5531
  %37 = load i32, i32* %stop_bit.addr, align 4, !dbg !5532
  %conv52 = trunc i32 %37 to i8, !dbg !5532
  %38 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5533
  %stop_bit53 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %38, i32 0, i32 3, !dbg !5534
  store i8 %conv52, i8* %stop_bit53, align 1, !dbg !5535
  %39 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5536
  %serial_mode = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %39, i32 0, i32 6, !dbg !5537
  store i32 0, i32* %serial_mode, align 4, !dbg !5538
  %40 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5539
  %rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %40, i32 0, i32 7, !dbg !5540
  store i32 0, i32* %rts, align 8, !dbg !5541
  %41 = load i32, i32* %data_bit.addr, align 4, !dbg !5542
  %add54 = add nsw i32 1, %41, !dbg !5543
  %42 = load i8, i8* %parity.addr, align 1, !dbg !5544
  %conv55 = sext i8 %42 to i32, !dbg !5544
  %cmp56 = icmp eq i32 %conv55, 78, !dbg !5545
  %43 = zext i1 %cmp56 to i64, !dbg !5544
  %cond = select i1 %cmp56, i32 0, i32 1, !dbg !5544
  %add58 = add nsw i32 %add54, %cond, !dbg !5546
  %44 = load i32, i32* %stop_bit.addr, align 4, !dbg !5547
  %add59 = add nsw i32 %add58, %44, !dbg !5548
  %mul60 = mul nsw i32 1000000, %add59, !dbg !5549
  %45 = load i32, i32* %baud.addr, align 4, !dbg !5550
  %div = sdiv i32 %mul60, %45, !dbg !5551
  %46 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5552
  %onebyte_time = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %46, i32 0, i32 9, !dbg !5553
  store i32 %div, i32* %onebyte_time, align 8, !dbg !5554
  %47 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5555
  %set_rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %47, i32 0, i32 10, !dbg !5556
  store void (%struct._modbus.4*, i32)* @_modbus_rtu_ioctl_rts, void (%struct._modbus.4*, i32)** %set_rts, align 8, !dbg !5557
  %48 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5558
  %onebyte_time61 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %48, i32 0, i32 9, !dbg !5559
  %49 = load i32, i32* %onebyte_time61, align 8, !dbg !5559
  %50 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5560
  %rts_delay = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %50, i32 0, i32 8, !dbg !5561
  store i32 %49, i32* %rts_delay, align 4, !dbg !5562
  %51 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5563
  %confirmation_to_ignore = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %51, i32 0, i32 11, !dbg !5564
  store i32 0, i32* %confirmation_to_ignore, align 8, !dbg !5565
  %52 = load %struct._modbus.4*, %struct._modbus.4** %ctx, align 8, !dbg !5566
  store %struct._modbus.4* %52, %struct._modbus.4** %retval, align 8, !dbg !5567
  br label %return, !dbg !5567

return:                                           ; preds = %if.end49, %if.else, %if.then29, %if.then19, %if.then13, %if.then6, %if.then
  %53 = load %struct._modbus.4*, %struct._modbus.4** %retval, align 8, !dbg !5568
  ret %struct._modbus.4* %53, !dbg !5568
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #8

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @_modbus_rtu_ioctl_rts(%struct._modbus.4* %ctx, i32 %on) #0 !dbg !5569 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %on.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %flags = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5570, metadata !451), !dbg !5571
  store i32 %on, i32* %on.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %on.addr, metadata !5572, metadata !451), !dbg !5573
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !5574, metadata !451), !dbg !5575
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5576
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 1, !dbg !5577
  %1 = load i32, i32* %s, align 4, !dbg !5577
  store i32 %1, i32* %fd, align 4, !dbg !5575
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !5578, metadata !451), !dbg !5579
  %2 = load i32, i32* %fd, align 4, !dbg !5580
  %call = call i32 (i32, i64, ...) @ioctl(i32 %2, i64 21525, i32* %flags) #6, !dbg !5581
  %3 = load i32, i32* %on.addr, align 4, !dbg !5582
  %tobool = icmp ne i32 %3, 0, !dbg !5582
  br i1 %tobool, label %if.then, label %if.else, !dbg !5584

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %flags, align 4, !dbg !5585
  %or = or i32 %4, 4, !dbg !5585
  store i32 %or, i32* %flags, align 4, !dbg !5585
  br label %if.end, !dbg !5587

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %flags, align 4, !dbg !5588
  %and = and i32 %5, -5, !dbg !5588
  store i32 %and, i32* %flags, align 4, !dbg !5588
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %fd, align 4, !dbg !5590
  %call1 = call i32 (i32, i64, ...) @ioctl(i32 %6, i64 21528, i32* %flags) #6, !dbg !5591
  ret void, !dbg !5592
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_set_slave(%struct._modbus.4* %ctx, i32 %slave) #0 !dbg !5593 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %slave.addr = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5594, metadata !451), !dbg !5595
  store i32 %slave, i32* %slave.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %slave.addr, metadata !5596, metadata !451), !dbg !5597
  %0 = load i32, i32* %slave.addr, align 4, !dbg !5598
  %cmp = icmp sge i32 %0, 0, !dbg !5600
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5601

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %slave.addr, align 4, !dbg !5602
  %cmp1 = icmp sle i32 %1, 247, !dbg !5603
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5604

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %slave.addr, align 4, !dbg !5605
  %3 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5607
  %slave2 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %3, i32 0, i32 0, !dbg !5608
  store i32 %2, i32* %slave2, align 8, !dbg !5609
  br label %if.end, !dbg !5610

if.else:                                          ; preds = %land.lhs.true, %entry
  %call = call i32* @__errno_location() #9, !dbg !5611
  store i32 22, i32* %call, align 4, !dbg !5613
  store i32 -1, i32* %retval, align 4, !dbg !5614
  br label %return, !dbg !5614

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !5615
  br label %return, !dbg !5615

return:                                           ; preds = %if.end, %if.else
  %4 = load i32, i32* %retval, align 4, !dbg !5616
  ret i32 %4, !dbg !5616
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_build_request_basis(%struct._modbus.4* %ctx, i32 %function, i32 %addr, i32 %nb, i8* %req) #0 !dbg !5617 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %function.addr = alloca i32, align 4
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %req.addr = alloca i8*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5618, metadata !451), !dbg !5619
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !5620, metadata !451), !dbg !5621
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !5622, metadata !451), !dbg !5623
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !5624, metadata !451), !dbg !5625
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5626, metadata !451), !dbg !5627
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5628
  %slave = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 0, !dbg !5628
  %1 = load i32, i32* %slave, align 8, !dbg !5628
  %cmp = icmp ne i32 %1, -1, !dbg !5628
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5628

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5628

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2.67, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3.68, i32 0, i32 0), i32 110, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @__PRETTY_FUNCTION__._modbus_rtu_build_request_basis, i32 0, i32 0)) #10, !dbg !5628
  unreachable, !dbg !5628
                                                  ; No predecessors!
  br label %cond.end, !dbg !5628

cond.end:                                         ; preds = %2, %cond.true
  %3 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5629
  %slave1 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %3, i32 0, i32 0, !dbg !5630
  %4 = load i32, i32* %slave1, align 8, !dbg !5630
  %conv = trunc i32 %4 to i8, !dbg !5629
  %5 = load i8*, i8** %req.addr, align 8, !dbg !5631
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0, !dbg !5631
  store i8 %conv, i8* %arrayidx, align 1, !dbg !5632
  %6 = load i32, i32* %function.addr, align 4, !dbg !5633
  %conv2 = trunc i32 %6 to i8, !dbg !5633
  %7 = load i8*, i8** %req.addr, align 8, !dbg !5634
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 1, !dbg !5634
  store i8 %conv2, i8* %arrayidx3, align 1, !dbg !5635
  %8 = load i32, i32* %addr.addr, align 4, !dbg !5636
  %shr = ashr i32 %8, 8, !dbg !5637
  %conv4 = trunc i32 %shr to i8, !dbg !5636
  %9 = load i8*, i8** %req.addr, align 8, !dbg !5638
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 2, !dbg !5638
  store i8 %conv4, i8* %arrayidx5, align 1, !dbg !5639
  %10 = load i32, i32* %addr.addr, align 4, !dbg !5640
  %and = and i32 %10, 255, !dbg !5641
  %conv6 = trunc i32 %and to i8, !dbg !5640
  %11 = load i8*, i8** %req.addr, align 8, !dbg !5642
  %arrayidx7 = getelementptr inbounds i8, i8* %11, i64 3, !dbg !5642
  store i8 %conv6, i8* %arrayidx7, align 1, !dbg !5643
  %12 = load i32, i32* %nb.addr, align 4, !dbg !5644
  %shr8 = ashr i32 %12, 8, !dbg !5645
  %conv9 = trunc i32 %shr8 to i8, !dbg !5644
  %13 = load i8*, i8** %req.addr, align 8, !dbg !5646
  %arrayidx10 = getelementptr inbounds i8, i8* %13, i64 4, !dbg !5646
  store i8 %conv9, i8* %arrayidx10, align 1, !dbg !5647
  %14 = load i32, i32* %nb.addr, align 4, !dbg !5648
  %and11 = and i32 %14, 255, !dbg !5649
  %conv12 = trunc i32 %and11 to i8, !dbg !5648
  %15 = load i8*, i8** %req.addr, align 8, !dbg !5650
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 5, !dbg !5650
  store i8 %conv12, i8* %arrayidx13, align 1, !dbg !5651
  ret i32 6, !dbg !5652
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_build_response_basis(%struct._sft* %sft, i8* %rsp) #0 !dbg !5653 {
entry:
  %sft.addr = alloca %struct._sft*, align 8
  %rsp.addr = alloca i8*, align 8
  store %struct._sft* %sft, %struct._sft** %sft.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sft** %sft.addr, metadata !5654, metadata !451), !dbg !5655
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !5656, metadata !451), !dbg !5657
  %0 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !5658
  %slave = getelementptr inbounds %struct._sft, %struct._sft* %0, i32 0, i32 0, !dbg !5659
  %1 = load i32, i32* %slave, align 4, !dbg !5659
  %conv = trunc i32 %1 to i8, !dbg !5658
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !5660
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !5660
  store i8 %conv, i8* %arrayidx, align 1, !dbg !5661
  %3 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !5662
  %function = getelementptr inbounds %struct._sft, %struct._sft* %3, i32 0, i32 1, !dbg !5663
  %4 = load i32, i32* %function, align 4, !dbg !5663
  %conv1 = trunc i32 %4 to i8, !dbg !5662
  %5 = load i8*, i8** %rsp.addr, align 8, !dbg !5664
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !5664
  store i8 %conv1, i8* %arrayidx2, align 1, !dbg !5665
  ret i32 2, !dbg !5666
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_prepare_response_tid(i8* %req, i32* %req_length) #0 !dbg !5667 {
entry:
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32*, align 8
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5668, metadata !451), !dbg !5669
  store i32* %req_length, i32** %req_length.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %req_length.addr, metadata !5670, metadata !451), !dbg !5671
  %0 = load i32*, i32** %req_length.addr, align 8, !dbg !5672
  %1 = load i32, i32* %0, align 4, !dbg !5673
  %sub = sub nsw i32 %1, 2, !dbg !5673
  store i32 %sub, i32* %0, align 4, !dbg !5673
  ret i32 0, !dbg !5674
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_send_msg_pre(i8* %req, i32 %req_length) #0 !dbg !5675 {
entry:
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32, align 4
  %crc = alloca i16, align 2
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5676, metadata !451), !dbg !5677
  store i32 %req_length, i32* %req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_length.addr, metadata !5678, metadata !451), !dbg !5679
  call void @llvm.dbg.declare(metadata i16* %crc, metadata !5680, metadata !451), !dbg !5681
  %0 = load i8*, i8** %req.addr, align 8, !dbg !5682
  %1 = load i32, i32* %req_length.addr, align 4, !dbg !5683
  %conv = trunc i32 %1 to i16, !dbg !5683
  %call = call zeroext i16 @crc16(i8* %0, i16 zeroext %conv), !dbg !5684
  store i16 %call, i16* %crc, align 2, !dbg !5681
  %2 = load i16, i16* %crc, align 2, !dbg !5685
  %conv1 = zext i16 %2 to i32, !dbg !5685
  %shr = ashr i32 %conv1, 8, !dbg !5686
  %conv2 = trunc i32 %shr to i8, !dbg !5685
  %3 = load i8*, i8** %req.addr, align 8, !dbg !5687
  %4 = load i32, i32* %req_length.addr, align 4, !dbg !5688
  %inc = add nsw i32 %4, 1, !dbg !5688
  store i32 %inc, i32* %req_length.addr, align 4, !dbg !5688
  %idxprom = sext i32 %4 to i64, !dbg !5687
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !5687
  store i8 %conv2, i8* %arrayidx, align 1, !dbg !5689
  %5 = load i16, i16* %crc, align 2, !dbg !5690
  %conv3 = zext i16 %5 to i32, !dbg !5690
  %and = and i32 %conv3, 255, !dbg !5691
  %conv4 = trunc i32 %and to i8, !dbg !5690
  %6 = load i8*, i8** %req.addr, align 8, !dbg !5692
  %7 = load i32, i32* %req_length.addr, align 4, !dbg !5693
  %inc5 = add nsw i32 %7, 1, !dbg !5693
  store i32 %inc5, i32* %req_length.addr, align 4, !dbg !5693
  %idxprom6 = sext i32 %7 to i64, !dbg !5692
  %arrayidx7 = getelementptr inbounds i8, i8* %6, i64 %idxprom6, !dbg !5692
  store i8 %conv4, i8* %arrayidx7, align 1, !dbg !5694
  %8 = load i32, i32* %req_length.addr, align 4, !dbg !5695
  ret i32 %8, !dbg !5696
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @_modbus_rtu_send(%struct._modbus.4* %ctx, i8* %req, i32 %req_length) #0 !dbg !5697 {
entry:
  %retval = alloca i64, align 8
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  %size = alloca i64, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5698, metadata !451), !dbg !5699
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5700, metadata !451), !dbg !5701
  store i32 %req_length, i32* %req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_length.addr, metadata !5702, metadata !451), !dbg !5703
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5704, metadata !451), !dbg !5705
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5706
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 8, !dbg !5707
  %1 = load i8*, i8** %backend_data, align 8, !dbg !5707
  %2 = bitcast i8* %1 to %struct._modbus_rtu*, !dbg !5706
  store %struct._modbus_rtu* %2, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5705
  %3 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5708
  %rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %3, i32 0, i32 7, !dbg !5710
  %4 = load i32, i32* %rts, align 8, !dbg !5710
  %cmp = icmp ne i32 %4, 0, !dbg !5711
  br i1 %cmp, label %if.then, label %if.else, !dbg !5712

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %size, metadata !5713, metadata !451), !dbg !5715
  %5 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5716
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %5, i32 0, i32 2, !dbg !5718
  %6 = load i32, i32* %debug, align 8, !dbg !5718
  %tobool = icmp ne i32 %6, 0, !dbg !5716
  br i1 %tobool, label %if.then1, label %if.end, !dbg !5719

if.then1:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5720
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4.66, i32 0, i32 0)), !dbg !5722
  br label %if.end, !dbg !5723

if.end:                                           ; preds = %if.then1, %if.then
  %8 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5724
  %set_rts = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %8, i32 0, i32 10, !dbg !5725
  %9 = load void (%struct._modbus.4*, i32)*, void (%struct._modbus.4*, i32)** %set_rts, align 8, !dbg !5725
  %10 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5726
  %11 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5727
  %rts2 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %11, i32 0, i32 7, !dbg !5728
  %12 = load i32, i32* %rts2, align 8, !dbg !5728
  %cmp3 = icmp eq i32 %12, 1, !dbg !5729
  %conv = zext i1 %cmp3 to i32, !dbg !5729
  call void %9(%struct._modbus.4* %10, i32 %conv), !dbg !5724
  %13 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5730
  %rts_delay = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %13, i32 0, i32 8, !dbg !5731
  %14 = load i32, i32* %rts_delay, align 4, !dbg !5731
  %call4 = call i32 @usleep(i32 %14), !dbg !5732
  %15 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5733
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %15, i32 0, i32 1, !dbg !5734
  %16 = load i32, i32* %s, align 4, !dbg !5734
  %17 = load i8*, i8** %req.addr, align 8, !dbg !5735
  %18 = load i32, i32* %req_length.addr, align 4, !dbg !5736
  %conv5 = sext i32 %18 to i64, !dbg !5736
  %call6 = call i64 @write(i32 %16, i8* %17, i64 %conv5), !dbg !5737
  store i64 %call6, i64* %size, align 8, !dbg !5738
  %19 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5739
  %onebyte_time = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %19, i32 0, i32 9, !dbg !5740
  %20 = load i32, i32* %onebyte_time, align 8, !dbg !5740
  %21 = load i32, i32* %req_length.addr, align 4, !dbg !5741
  %mul = mul nsw i32 %20, %21, !dbg !5742
  %22 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5743
  %rts_delay7 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %22, i32 0, i32 8, !dbg !5744
  %23 = load i32, i32* %rts_delay7, align 4, !dbg !5744
  %add = add nsw i32 %mul, %23, !dbg !5745
  %call8 = call i32 @usleep(i32 %add), !dbg !5746
  %24 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5747
  %set_rts9 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %24, i32 0, i32 10, !dbg !5748
  %25 = load void (%struct._modbus.4*, i32)*, void (%struct._modbus.4*, i32)** %set_rts9, align 8, !dbg !5748
  %26 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5749
  %27 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5750
  %rts10 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %27, i32 0, i32 7, !dbg !5751
  %28 = load i32, i32* %rts10, align 8, !dbg !5751
  %cmp11 = icmp ne i32 %28, 1, !dbg !5752
  %conv12 = zext i1 %cmp11 to i32, !dbg !5752
  call void %25(%struct._modbus.4* %26, i32 %conv12), !dbg !5747
  %29 = load i64, i64* %size, align 8, !dbg !5753
  store i64 %29, i64* %retval, align 8, !dbg !5754
  br label %return, !dbg !5754

if.else:                                          ; preds = %entry
  %30 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5755
  %s13 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %30, i32 0, i32 1, !dbg !5757
  %31 = load i32, i32* %s13, align 4, !dbg !5757
  %32 = load i8*, i8** %req.addr, align 8, !dbg !5758
  %33 = load i32, i32* %req_length.addr, align 4, !dbg !5759
  %conv14 = sext i32 %33 to i64, !dbg !5759
  %call15 = call i64 @write(i32 %31, i8* %32, i64 %conv14), !dbg !5760
  store i64 %call15, i64* %retval, align 8, !dbg !5761
  br label %return, !dbg !5761

return:                                           ; preds = %if.else, %if.end
  %34 = load i64, i64* %retval, align 8, !dbg !5762
  ret i64 %34, !dbg !5762
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_receive(%struct._modbus.4* %ctx, i8* %req) #0 !dbg !5763 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %req.addr = alloca i8*, align 8
  %rc = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5764, metadata !451), !dbg !5765
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5766, metadata !451), !dbg !5767
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !5768, metadata !451), !dbg !5769
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5770, metadata !451), !dbg !5771
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5772
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 8, !dbg !5773
  %1 = load i8*, i8** %backend_data, align 8, !dbg !5773
  %2 = bitcast i8* %1 to %struct._modbus_rtu*, !dbg !5772
  store %struct._modbus_rtu* %2, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5771
  %3 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5774
  %confirmation_to_ignore = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %3, i32 0, i32 11, !dbg !5776
  %4 = load i32, i32* %confirmation_to_ignore, align 8, !dbg !5776
  %tobool = icmp ne i32 %4, 0, !dbg !5774
  br i1 %tobool, label %if.then, label %if.else, !dbg !5777

if.then:                                          ; preds = %entry
  %5 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5778
  %6 = load i8*, i8** %req.addr, align 8, !dbg !5780
  %call = call i32 bitcast (i32 (%struct._modbus*, i8*, i32)* @_modbus_receive_msg to i32 (%struct._modbus.4*, i8*, i32)*)(%struct._modbus.4* %5, i8* %6, i32 1), !dbg !5781
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5782
  %confirmation_to_ignore1 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 11, !dbg !5783
  store i32 0, i32* %confirmation_to_ignore1, align 8, !dbg !5784
  store i32 0, i32* %rc, align 4, !dbg !5785
  %8 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5786
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %8, i32 0, i32 2, !dbg !5788
  %9 = load i32, i32* %debug, align 8, !dbg !5788
  %tobool2 = icmp ne i32 %9, 0, !dbg !5786
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5789

if.then3:                                         ; preds = %if.then
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5.65, i32 0, i32 0)), !dbg !5790
  br label %if.end, !dbg !5792

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end9, !dbg !5793

if.else:                                          ; preds = %entry
  %10 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5794
  %11 = load i8*, i8** %req.addr, align 8, !dbg !5796
  %call5 = call i32 bitcast (i32 (%struct._modbus*, i8*, i32)* @_modbus_receive_msg to i32 (%struct._modbus.4*, i8*, i32)*)(%struct._modbus.4* %10, i8* %11, i32 0), !dbg !5797
  store i32 %call5, i32* %rc, align 4, !dbg !5798
  %12 = load i32, i32* %rc, align 4, !dbg !5799
  %cmp = icmp eq i32 %12, 0, !dbg !5801
  br i1 %cmp, label %if.then6, label %if.end8, !dbg !5802

if.then6:                                         ; preds = %if.else
  %13 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5803
  %confirmation_to_ignore7 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %13, i32 0, i32 11, !dbg !5805
  store i32 1, i32* %confirmation_to_ignore7, align 8, !dbg !5806
  br label %if.end8, !dbg !5807

if.end8:                                          ; preds = %if.then6, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  %14 = load i32, i32* %rc, align 4, !dbg !5808
  ret i32 %14, !dbg !5809
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @_modbus_rtu_recv(%struct._modbus.4* %ctx, i8* %rsp, i32 %rsp_length) #0 !dbg !5810 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %rsp.addr = alloca i8*, align 8
  %rsp_length.addr = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5811, metadata !451), !dbg !5812
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !5813, metadata !451), !dbg !5814
  store i32 %rsp_length, i32* %rsp_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rsp_length.addr, metadata !5815, metadata !451), !dbg !5816
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5817
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 1, !dbg !5818
  %1 = load i32, i32* %s, align 4, !dbg !5818
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !5819
  %3 = load i32, i32* %rsp_length.addr, align 4, !dbg !5820
  %conv = sext i32 %3 to i64, !dbg !5820
  %call = call i64 @read(i32 %1, i8* %2, i64 %conv), !dbg !5821
  ret i64 %call, !dbg !5822
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_check_integrity(%struct._modbus.4* %ctx, i8* %msg, i32 %msg_length) #0 !dbg !5823 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %msg.addr = alloca i8*, align 8
  %msg_length.addr = alloca i32, align 4
  %crc_calculated = alloca i16, align 2
  %crc_received = alloca i16, align 2
  %slave = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5824, metadata !451), !dbg !5825
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !5826, metadata !451), !dbg !5827
  store i32 %msg_length, i32* %msg_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_length.addr, metadata !5828, metadata !451), !dbg !5829
  call void @llvm.dbg.declare(metadata i16* %crc_calculated, metadata !5830, metadata !451), !dbg !5831
  call void @llvm.dbg.declare(metadata i16* %crc_received, metadata !5832, metadata !451), !dbg !5833
  call void @llvm.dbg.declare(metadata i32* %slave, metadata !5834, metadata !451), !dbg !5835
  %0 = load i8*, i8** %msg.addr, align 8, !dbg !5836
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !5836
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5836
  %conv = zext i8 %1 to i32, !dbg !5836
  store i32 %conv, i32* %slave, align 4, !dbg !5835
  %2 = load i32, i32* %slave, align 4, !dbg !5837
  %3 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5839
  %slave1 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %3, i32 0, i32 0, !dbg !5840
  %4 = load i32, i32* %slave1, align 8, !dbg !5840
  %cmp = icmp ne i32 %2, %4, !dbg !5841
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !5842

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %slave, align 4, !dbg !5843
  %cmp3 = icmp ne i32 %5, 0, !dbg !5844
  br i1 %cmp3, label %if.then, label %if.end7, !dbg !5845

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5846
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %6, i32 0, i32 2, !dbg !5849
  %7 = load i32, i32* %debug, align 8, !dbg !5849
  %tobool = icmp ne i32 %7, 0, !dbg !5846
  br i1 %tobool, label %if.then5, label %if.end, !dbg !5850

if.then5:                                         ; preds = %if.then
  %8 = load i32, i32* %slave, align 4, !dbg !5851
  %9 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5853
  %slave6 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %9, i32 0, i32 0, !dbg !5854
  %10 = load i32, i32* %slave6, align 8, !dbg !5854
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6.63, i32 0, i32 0), i32 %8, i32 %10), !dbg !5855
  br label %if.end, !dbg !5856

if.end:                                           ; preds = %if.then5, %if.then
  store i32 0, i32* %retval, align 4, !dbg !5857
  br label %return, !dbg !5857

if.end7:                                          ; preds = %land.lhs.true, %entry
  %11 = load i8*, i8** %msg.addr, align 8, !dbg !5858
  %12 = load i32, i32* %msg_length.addr, align 4, !dbg !5859
  %sub = sub nsw i32 %12, 2, !dbg !5860
  %conv8 = trunc i32 %sub to i16, !dbg !5859
  %call9 = call zeroext i16 @crc16(i8* %11, i16 zeroext %conv8), !dbg !5861
  store i16 %call9, i16* %crc_calculated, align 2, !dbg !5862
  %13 = load i8*, i8** %msg.addr, align 8, !dbg !5863
  %14 = load i32, i32* %msg_length.addr, align 4, !dbg !5864
  %sub10 = sub nsw i32 %14, 2, !dbg !5865
  %idxprom = sext i32 %sub10 to i64, !dbg !5863
  %arrayidx11 = getelementptr inbounds i8, i8* %13, i64 %idxprom, !dbg !5863
  %15 = load i8, i8* %arrayidx11, align 1, !dbg !5863
  %conv12 = zext i8 %15 to i32, !dbg !5863
  %shl = shl i32 %conv12, 8, !dbg !5866
  %16 = load i8*, i8** %msg.addr, align 8, !dbg !5867
  %17 = load i32, i32* %msg_length.addr, align 4, !dbg !5868
  %sub13 = sub nsw i32 %17, 1, !dbg !5869
  %idxprom14 = sext i32 %sub13 to i64, !dbg !5867
  %arrayidx15 = getelementptr inbounds i8, i8* %16, i64 %idxprom14, !dbg !5867
  %18 = load i8, i8* %arrayidx15, align 1, !dbg !5867
  %conv16 = zext i8 %18 to i32, !dbg !5867
  %or = or i32 %shl, %conv16, !dbg !5870
  %conv17 = trunc i32 %or to i16, !dbg !5871
  store i16 %conv17, i16* %crc_received, align 2, !dbg !5872
  %19 = load i16, i16* %crc_calculated, align 2, !dbg !5873
  %conv18 = zext i16 %19 to i32, !dbg !5873
  %20 = load i16, i16* %crc_received, align 2, !dbg !5875
  %conv19 = zext i16 %20 to i32, !dbg !5875
  %cmp20 = icmp eq i32 %conv18, %conv19, !dbg !5876
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !5877

if.then22:                                        ; preds = %if.end7
  %21 = load i32, i32* %msg_length.addr, align 4, !dbg !5878
  store i32 %21, i32* %retval, align 4, !dbg !5880
  br label %return, !dbg !5880

if.else:                                          ; preds = %if.end7
  %22 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5881
  %debug23 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %22, i32 0, i32 2, !dbg !5884
  %23 = load i32, i32* %debug23, align 8, !dbg !5884
  %tobool24 = icmp ne i32 %23, 0, !dbg !5881
  br i1 %tobool24, label %if.then25, label %if.end29, !dbg !5885

if.then25:                                        ; preds = %if.else
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5886
  %25 = load i16, i16* %crc_received, align 2, !dbg !5888
  %conv26 = zext i16 %25 to i32, !dbg !5888
  %26 = load i16, i16* %crc_calculated, align 2, !dbg !5889
  %conv27 = zext i16 %26 to i32, !dbg !5889
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7.64, i32 0, i32 0), i32 %conv26, i32 %conv27), !dbg !5890
  br label %if.end29, !dbg !5891

if.end29:                                         ; preds = %if.then25, %if.else
  %27 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5892
  %error_recovery = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %27, i32 0, i32 3, !dbg !5894
  %28 = load i32, i32* %error_recovery, align 4, !dbg !5894
  %and = and i32 %28, 4, !dbg !5895
  %tobool30 = icmp ne i32 %and, 0, !dbg !5895
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !5896

if.then31:                                        ; preds = %if.end29
  %29 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5897
  %call32 = call i32 @_modbus_rtu_flush(%struct._modbus.4* %29), !dbg !5899
  br label %if.end33, !dbg !5900

if.end33:                                         ; preds = %if.then31, %if.end29
  %call34 = call i32* @__errno_location() #9, !dbg !5901
  store i32 112345690, i32* %call34, align 4, !dbg !5902
  store i32 -1, i32* %retval, align 4, !dbg !5903
  br label %return, !dbg !5903

return:                                           ; preds = %if.end33, %if.then22, %if.end
  %30 = load i32, i32* %retval, align 4, !dbg !5904
  ret i32 %30, !dbg !5904
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_pre_check_confirmation(%struct._modbus.4* %ctx, i8* %req, i8* %rsp, i32 %rsp_length) #0 !dbg !5905 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %req.addr = alloca i8*, align 8
  %rsp.addr = alloca i8*, align 8
  %rsp_length.addr = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5906, metadata !451), !dbg !5907
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !5908, metadata !451), !dbg !5909
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !5910, metadata !451), !dbg !5911
  store i32 %rsp_length, i32* %rsp_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rsp_length.addr, metadata !5912, metadata !451), !dbg !5913
  %0 = load i8*, i8** %req.addr, align 8, !dbg !5914
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !5914
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5914
  %conv = zext i8 %1 to i32, !dbg !5914
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !5916
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !5916
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !5916
  %conv2 = zext i8 %3 to i32, !dbg !5916
  %cmp = icmp ne i32 %conv, %conv2, !dbg !5917
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5918

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %req.addr, align 8, !dbg !5919
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !5919
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !5919
  %conv5 = zext i8 %5 to i32, !dbg !5919
  %cmp6 = icmp ne i32 %conv5, 0, !dbg !5920
  br i1 %cmp6, label %if.then, label %if.else, !dbg !5921

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5922
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %6, i32 0, i32 2, !dbg !5925
  %7 = load i32, i32* %debug, align 8, !dbg !5925
  %tobool = icmp ne i32 %7, 0, !dbg !5922
  br i1 %tobool, label %if.then8, label %if.end, !dbg !5926

if.then8:                                         ; preds = %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5927
  %9 = load i8*, i8** %rsp.addr, align 8, !dbg !5929
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i64 0, !dbg !5929
  %10 = load i8, i8* %arrayidx9, align 1, !dbg !5929
  %conv10 = zext i8 %10 to i32, !dbg !5929
  %11 = load i8*, i8** %req.addr, align 8, !dbg !5930
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !5930
  %12 = load i8, i8* %arrayidx11, align 1, !dbg !5930
  %conv12 = zext i8 %12 to i32, !dbg !5930
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8.62, i32 0, i32 0), i32 %conv10, i32 %conv12), !dbg !5931
  br label %if.end, !dbg !5932

if.end:                                           ; preds = %if.then8, %if.then
  %call13 = call i32* @__errno_location() #9, !dbg !5933
  store i32 112345695, i32* %call13, align 4, !dbg !5934
  store i32 -1, i32* %retval, align 4, !dbg !5935
  br label %return, !dbg !5935

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !5936
  br label %return, !dbg !5936

return:                                           ; preds = %if.else, %if.end
  %13 = load i32, i32* %retval, align 4, !dbg !5938
  ret i32 %13, !dbg !5938
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_connect(%struct._modbus.4* %ctx) #0 !dbg !5939 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %tios = alloca %struct.termios, align 4
  %speed = alloca i32, align 4
  %flags = alloca i32, align 4
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !5940, metadata !451), !dbg !5941
  call void @llvm.dbg.declare(metadata %struct.termios* %tios, metadata !5942, metadata !451), !dbg !5943
  call void @llvm.dbg.declare(metadata i32* %speed, metadata !5944, metadata !451), !dbg !5945
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !5946, metadata !451), !dbg !5947
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !5948, metadata !451), !dbg !5949
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5950
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 8, !dbg !5951
  %1 = load i8*, i8** %backend_data, align 8, !dbg !5951
  %2 = bitcast i8* %1 to %struct._modbus_rtu*, !dbg !5950
  store %struct._modbus_rtu* %2, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5949
  %3 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5952
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %3, i32 0, i32 2, !dbg !5954
  %4 = load i32, i32* %debug, align 8, !dbg !5954
  %tobool = icmp ne i32 %4, 0, !dbg !5952
  br i1 %tobool, label %if.then, label %if.end, !dbg !5955

if.then:                                          ; preds = %entry
  %5 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5956
  %device = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %5, i32 0, i32 0, !dbg !5958
  %6 = load i8*, i8** %device, align 8, !dbg !5958
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5959
  %baud = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 1, !dbg !5960
  %8 = load i32, i32* %baud, align 8, !dbg !5960
  %9 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5961
  %parity = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %9, i32 0, i32 4, !dbg !5962
  %10 = load i8, i8* %parity, align 2, !dbg !5962
  %conv = sext i8 %10 to i32, !dbg !5961
  %11 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5963
  %data_bit = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %11, i32 0, i32 2, !dbg !5964
  %12 = load i8, i8* %data_bit, align 4, !dbg !5964
  %conv1 = zext i8 %12 to i32, !dbg !5963
  %13 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5965
  %stop_bit = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %13, i32 0, i32 3, !dbg !5966
  %14 = load i8, i8* %stop_bit, align 1, !dbg !5966
  %conv2 = zext i8 %14 to i32, !dbg !5965
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9.59, i32 0, i32 0), i8* %6, i32 %8, i32 %conv, i32 %conv1, i32 %conv2), !dbg !5967
  br label %if.end, !dbg !5968

if.end:                                           ; preds = %if.then, %entry
  store i32 2434, i32* %flags, align 4, !dbg !5969
  %15 = load i32, i32* %flags, align 4, !dbg !5970
  %or = or i32 %15, 524288, !dbg !5970
  store i32 %or, i32* %flags, align 4, !dbg !5970
  %16 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5971
  %device3 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %16, i32 0, i32 0, !dbg !5972
  %17 = load i8*, i8** %device3, align 8, !dbg !5972
  %18 = load i32, i32* %flags, align 4, !dbg !5973
  %call4 = call i32 (i8*, i32, ...) @open(i8* %17, i32 %18), !dbg !5974
  %19 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5975
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %19, i32 0, i32 1, !dbg !5976
  store i32 %call4, i32* %s, align 4, !dbg !5977
  %20 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5978
  %s5 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %20, i32 0, i32 1, !dbg !5980
  %21 = load i32, i32* %s5, align 4, !dbg !5980
  %cmp = icmp eq i32 %21, -1, !dbg !5981
  br i1 %cmp, label %if.then7, label %if.end16, !dbg !5982

if.then7:                                         ; preds = %if.end
  %22 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5983
  %debug8 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %22, i32 0, i32 2, !dbg !5986
  %23 = load i32, i32* %debug8, align 8, !dbg !5986
  %tobool9 = icmp ne i32 %23, 0, !dbg !5983
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !5987

if.then10:                                        ; preds = %if.then7
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5988
  %25 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5990
  %device11 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %25, i32 0, i32 0, !dbg !5991
  %26 = load i8*, i8** %device11, align 8, !dbg !5991
  %call12 = call i32* @__errno_location() #9, !dbg !5992
  %27 = load i32, i32* %call12, align 4, !dbg !5992
  %call13 = call i8* @strerror(i32 %27) #6, !dbg !5993
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10.60, i32 0, i32 0), i8* %26, i8* %call13), !dbg !5994
  br label %if.end15, !dbg !5995

if.end15:                                         ; preds = %if.then10, %if.then7
  store i32 -1, i32* %retval, align 4, !dbg !5996
  br label %return, !dbg !5996

if.end16:                                         ; preds = %if.end
  %28 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !5997
  %s17 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %28, i32 0, i32 1, !dbg !5998
  %29 = load i32, i32* %s17, align 4, !dbg !5998
  %30 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !5999
  %old_tios = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %30, i32 0, i32 5, !dbg !6000
  %call18 = call i32 @tcgetattr(i32 %29, %struct.termios* %old_tios) #6, !dbg !6001
  %31 = bitcast %struct.termios* %tios to i8*, !dbg !6002
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 60, i32 4, i1 false), !dbg !6002
  %32 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6003
  %baud19 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %32, i32 0, i32 1, !dbg !6004
  %33 = load i32, i32* %baud19, align 8, !dbg !6004
  switch i32 %33, label %sw.default [
    i32 110, label %sw.bb
    i32 300, label %sw.bb20
    i32 600, label %sw.bb21
    i32 1200, label %sw.bb22
    i32 2400, label %sw.bb23
    i32 4800, label %sw.bb24
    i32 9600, label %sw.bb25
    i32 19200, label %sw.bb26
    i32 38400, label %sw.bb27
    i32 57600, label %sw.bb28
    i32 115200, label %sw.bb29
    i32 230400, label %sw.bb30
    i32 460800, label %sw.bb31
    i32 500000, label %sw.bb32
    i32 576000, label %sw.bb33
    i32 921600, label %sw.bb34
    i32 1000000, label %sw.bb35
    i32 1152000, label %sw.bb36
    i32 1500000, label %sw.bb37
    i32 2500000, label %sw.bb38
    i32 3000000, label %sw.bb39
    i32 3500000, label %sw.bb40
    i32 4000000, label %sw.bb41
  ], !dbg !6005

sw.bb:                                            ; preds = %if.end16
  store i32 3, i32* %speed, align 4, !dbg !6006
  br label %sw.epilog, !dbg !6008

sw.bb20:                                          ; preds = %if.end16
  store i32 7, i32* %speed, align 4, !dbg !6009
  br label %sw.epilog, !dbg !6010

sw.bb21:                                          ; preds = %if.end16
  store i32 8, i32* %speed, align 4, !dbg !6011
  br label %sw.epilog, !dbg !6012

sw.bb22:                                          ; preds = %if.end16
  store i32 9, i32* %speed, align 4, !dbg !6013
  br label %sw.epilog, !dbg !6014

sw.bb23:                                          ; preds = %if.end16
  store i32 11, i32* %speed, align 4, !dbg !6015
  br label %sw.epilog, !dbg !6016

sw.bb24:                                          ; preds = %if.end16
  store i32 12, i32* %speed, align 4, !dbg !6017
  br label %sw.epilog, !dbg !6018

sw.bb25:                                          ; preds = %if.end16
  store i32 13, i32* %speed, align 4, !dbg !6019
  br label %sw.epilog, !dbg !6020

sw.bb26:                                          ; preds = %if.end16
  store i32 14, i32* %speed, align 4, !dbg !6021
  br label %sw.epilog, !dbg !6022

sw.bb27:                                          ; preds = %if.end16
  store i32 15, i32* %speed, align 4, !dbg !6023
  br label %sw.epilog, !dbg !6024

sw.bb28:                                          ; preds = %if.end16
  store i32 4097, i32* %speed, align 4, !dbg !6025
  br label %sw.epilog, !dbg !6026

sw.bb29:                                          ; preds = %if.end16
  store i32 4098, i32* %speed, align 4, !dbg !6027
  br label %sw.epilog, !dbg !6028

sw.bb30:                                          ; preds = %if.end16
  store i32 4099, i32* %speed, align 4, !dbg !6029
  br label %sw.epilog, !dbg !6030

sw.bb31:                                          ; preds = %if.end16
  store i32 4100, i32* %speed, align 4, !dbg !6031
  br label %sw.epilog, !dbg !6032

sw.bb32:                                          ; preds = %if.end16
  store i32 4101, i32* %speed, align 4, !dbg !6033
  br label %sw.epilog, !dbg !6034

sw.bb33:                                          ; preds = %if.end16
  store i32 4102, i32* %speed, align 4, !dbg !6035
  br label %sw.epilog, !dbg !6036

sw.bb34:                                          ; preds = %if.end16
  store i32 4103, i32* %speed, align 4, !dbg !6037
  br label %sw.epilog, !dbg !6038

sw.bb35:                                          ; preds = %if.end16
  store i32 4104, i32* %speed, align 4, !dbg !6039
  br label %sw.epilog, !dbg !6040

sw.bb36:                                          ; preds = %if.end16
  store i32 4105, i32* %speed, align 4, !dbg !6041
  br label %sw.epilog, !dbg !6042

sw.bb37:                                          ; preds = %if.end16
  store i32 4106, i32* %speed, align 4, !dbg !6043
  br label %sw.epilog, !dbg !6044

sw.bb38:                                          ; preds = %if.end16
  store i32 4108, i32* %speed, align 4, !dbg !6045
  br label %sw.epilog, !dbg !6046

sw.bb39:                                          ; preds = %if.end16
  store i32 4109, i32* %speed, align 4, !dbg !6047
  br label %sw.epilog, !dbg !6048

sw.bb40:                                          ; preds = %if.end16
  store i32 4110, i32* %speed, align 4, !dbg !6049
  br label %sw.epilog, !dbg !6050

sw.bb41:                                          ; preds = %if.end16
  store i32 4111, i32* %speed, align 4, !dbg !6051
  br label %sw.epilog, !dbg !6052

sw.default:                                       ; preds = %if.end16
  store i32 13, i32* %speed, align 4, !dbg !6053
  %34 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6054
  %debug42 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %34, i32 0, i32 2, !dbg !6056
  %35 = load i32, i32* %debug42, align 8, !dbg !6056
  %tobool43 = icmp ne i32 %35, 0, !dbg !6054
  br i1 %tobool43, label %if.then44, label %if.end48, !dbg !6057

if.then44:                                        ; preds = %sw.default
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6058
  %37 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6060
  %baud45 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %37, i32 0, i32 1, !dbg !6061
  %38 = load i32, i32* %baud45, align 8, !dbg !6061
  %39 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6062
  %device46 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %39, i32 0, i32 0, !dbg !6063
  %40 = load i8*, i8** %device46, align 8, !dbg !6063
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.11.61, i32 0, i32 0), i32 %38, i8* %40), !dbg !6064
  br label %if.end48, !dbg !6065

if.end48:                                         ; preds = %if.then44, %sw.default
  br label %sw.epilog, !dbg !6066

sw.epilog:                                        ; preds = %if.end48, %sw.bb41, %sw.bb40, %sw.bb39, %sw.bb38, %sw.bb37, %sw.bb36, %sw.bb35, %sw.bb34, %sw.bb33, %sw.bb32, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb
  %41 = load i32, i32* %speed, align 4, !dbg !6067
  %call49 = call i32 @cfsetispeed(%struct.termios* %tios, i32 %41) #6, !dbg !6069
  %cmp50 = icmp slt i32 %call49, 0, !dbg !6070
  br i1 %cmp50, label %if.then55, label %lor.lhs.false, !dbg !6071

lor.lhs.false:                                    ; preds = %sw.epilog
  %42 = load i32, i32* %speed, align 4, !dbg !6072
  %call52 = call i32 @cfsetospeed(%struct.termios* %tios, i32 %42) #6, !dbg !6073
  %cmp53 = icmp slt i32 %call52, 0, !dbg !6074
  br i1 %cmp53, label %if.then55, label %if.end59, !dbg !6075

if.then55:                                        ; preds = %lor.lhs.false, %sw.epilog
  %43 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6076
  %s56 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %43, i32 0, i32 1, !dbg !6078
  %44 = load i32, i32* %s56, align 4, !dbg !6078
  %call57 = call i32 @close(i32 %44), !dbg !6079
  %45 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6080
  %s58 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %45, i32 0, i32 1, !dbg !6081
  store i32 -1, i32* %s58, align 4, !dbg !6082
  store i32 -1, i32* %retval, align 4, !dbg !6083
  br label %return, !dbg !6083

if.end59:                                         ; preds = %lor.lhs.false
  %c_cflag = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6084
  %46 = load i32, i32* %c_cflag, align 4, !dbg !6085
  %or60 = or i32 %46, 2176, !dbg !6085
  store i32 %or60, i32* %c_cflag, align 4, !dbg !6085
  %c_cflag61 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6086
  %47 = load i32, i32* %c_cflag61, align 4, !dbg !6087
  %and = and i32 %47, -49, !dbg !6087
  store i32 %and, i32* %c_cflag61, align 4, !dbg !6087
  %48 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6088
  %data_bit62 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %48, i32 0, i32 2, !dbg !6089
  %49 = load i8, i8* %data_bit62, align 4, !dbg !6089
  %conv63 = zext i8 %49 to i32, !dbg !6088
  switch i32 %conv63, label %sw.default73 [
    i32 5, label %sw.bb64
    i32 6, label %sw.bb66
    i32 7, label %sw.bb69
    i32 8, label %sw.bb72
  ], !dbg !6090

sw.bb64:                                          ; preds = %if.end59
  %c_cflag65 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6091
  %50 = load i32, i32* %c_cflag65, align 4, !dbg !6093
  store i32 %50, i32* %c_cflag65, align 4, !dbg !6093
  br label %sw.epilog76, !dbg !6094

sw.bb66:                                          ; preds = %if.end59
  %c_cflag67 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6095
  %51 = load i32, i32* %c_cflag67, align 4, !dbg !6096
  %or68 = or i32 %51, 16, !dbg !6096
  store i32 %or68, i32* %c_cflag67, align 4, !dbg !6096
  br label %sw.epilog76, !dbg !6097

sw.bb69:                                          ; preds = %if.end59
  %c_cflag70 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6098
  %52 = load i32, i32* %c_cflag70, align 4, !dbg !6099
  %or71 = or i32 %52, 32, !dbg !6099
  store i32 %or71, i32* %c_cflag70, align 4, !dbg !6099
  br label %sw.epilog76, !dbg !6100

sw.bb72:                                          ; preds = %if.end59
  br label %sw.default73, !dbg !6100

sw.default73:                                     ; preds = %sw.bb72, %if.end59
  %c_cflag74 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6101
  %53 = load i32, i32* %c_cflag74, align 4, !dbg !6102
  %or75 = or i32 %53, 48, !dbg !6102
  store i32 %or75, i32* %c_cflag74, align 4, !dbg !6102
  br label %sw.epilog76, !dbg !6103

sw.epilog76:                                      ; preds = %sw.default73, %sw.bb69, %sw.bb66, %sw.bb64
  %54 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6104
  %stop_bit77 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %54, i32 0, i32 3, !dbg !6106
  %55 = load i8, i8* %stop_bit77, align 1, !dbg !6106
  %conv78 = zext i8 %55 to i32, !dbg !6104
  %cmp79 = icmp eq i32 %conv78, 1, !dbg !6107
  br i1 %cmp79, label %if.then81, label %if.else, !dbg !6108

if.then81:                                        ; preds = %sw.epilog76
  %c_cflag82 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6109
  %56 = load i32, i32* %c_cflag82, align 4, !dbg !6110
  %and83 = and i32 %56, -65, !dbg !6110
  store i32 %and83, i32* %c_cflag82, align 4, !dbg !6110
  br label %if.end86, !dbg !6111

if.else:                                          ; preds = %sw.epilog76
  %c_cflag84 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6112
  %57 = load i32, i32* %c_cflag84, align 4, !dbg !6113
  %or85 = or i32 %57, 64, !dbg !6113
  store i32 %or85, i32* %c_cflag84, align 4, !dbg !6113
  br label %if.end86

if.end86:                                         ; preds = %if.else, %if.then81
  %58 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6114
  %parity87 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %58, i32 0, i32 4, !dbg !6116
  %59 = load i8, i8* %parity87, align 2, !dbg !6116
  %conv88 = sext i8 %59 to i32, !dbg !6114
  %cmp89 = icmp eq i32 %conv88, 78, !dbg !6117
  br i1 %cmp89, label %if.then91, label %if.else94, !dbg !6118

if.then91:                                        ; preds = %if.end86
  %c_cflag92 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6119
  %60 = load i32, i32* %c_cflag92, align 4, !dbg !6121
  %and93 = and i32 %60, -257, !dbg !6121
  store i32 %and93, i32* %c_cflag92, align 4, !dbg !6121
  br label %if.end110, !dbg !6122

if.else94:                                        ; preds = %if.end86
  %61 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6123
  %parity95 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %61, i32 0, i32 4, !dbg !6125
  %62 = load i8, i8* %parity95, align 2, !dbg !6125
  %conv96 = sext i8 %62 to i32, !dbg !6123
  %cmp97 = icmp eq i32 %conv96, 69, !dbg !6126
  br i1 %cmp97, label %if.then99, label %if.else104, !dbg !6127

if.then99:                                        ; preds = %if.else94
  %c_cflag100 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6128
  %63 = load i32, i32* %c_cflag100, align 4, !dbg !6130
  %or101 = or i32 %63, 256, !dbg !6130
  store i32 %or101, i32* %c_cflag100, align 4, !dbg !6130
  %c_cflag102 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6131
  %64 = load i32, i32* %c_cflag102, align 4, !dbg !6132
  %and103 = and i32 %64, -513, !dbg !6132
  store i32 %and103, i32* %c_cflag102, align 4, !dbg !6132
  br label %if.end109, !dbg !6133

if.else104:                                       ; preds = %if.else94
  %c_cflag105 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6134
  %65 = load i32, i32* %c_cflag105, align 4, !dbg !6136
  %or106 = or i32 %65, 256, !dbg !6136
  store i32 %or106, i32* %c_cflag105, align 4, !dbg !6136
  %c_cflag107 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 2, !dbg !6137
  %66 = load i32, i32* %c_cflag107, align 4, !dbg !6138
  %or108 = or i32 %66, 512, !dbg !6138
  store i32 %or108, i32* %c_cflag107, align 4, !dbg !6138
  br label %if.end109

if.end109:                                        ; preds = %if.else104, %if.then99
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then91
  %c_lflag = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 3, !dbg !6139
  %67 = load i32, i32* %c_lflag, align 4, !dbg !6140
  %and111 = and i32 %67, -28, !dbg !6140
  store i32 %and111, i32* %c_lflag, align 4, !dbg !6140
  %68 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6141
  %parity112 = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %68, i32 0, i32 4, !dbg !6143
  %69 = load i8, i8* %parity112, align 2, !dbg !6143
  %conv113 = sext i8 %69 to i32, !dbg !6141
  %cmp114 = icmp eq i32 %conv113, 78, !dbg !6144
  br i1 %cmp114, label %if.then116, label %if.else118, !dbg !6145

if.then116:                                       ; preds = %if.end110
  %c_iflag = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 0, !dbg !6146
  %70 = load i32, i32* %c_iflag, align 4, !dbg !6148
  %and117 = and i32 %70, -17, !dbg !6148
  store i32 %and117, i32* %c_iflag, align 4, !dbg !6148
  br label %if.end121, !dbg !6149

if.else118:                                       ; preds = %if.end110
  %c_iflag119 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 0, !dbg !6150
  %71 = load i32, i32* %c_iflag119, align 4, !dbg !6152
  %or120 = or i32 %71, 16, !dbg !6152
  store i32 %or120, i32* %c_iflag119, align 4, !dbg !6152
  br label %if.end121

if.end121:                                        ; preds = %if.else118, %if.then116
  %c_iflag122 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 0, !dbg !6153
  %72 = load i32, i32* %c_iflag122, align 4, !dbg !6154
  %and123 = and i32 %72, -7169, !dbg !6154
  store i32 %and123, i32* %c_iflag122, align 4, !dbg !6154
  %c_oflag = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 1, !dbg !6155
  %73 = load i32, i32* %c_oflag, align 4, !dbg !6156
  %and124 = and i32 %73, -2, !dbg !6156
  store i32 %and124, i32* %c_oflag, align 4, !dbg !6156
  %c_cc = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 5, !dbg !6157
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc, i64 0, i64 6, !dbg !6158
  store i8 0, i8* %arrayidx, align 1, !dbg !6159
  %c_cc125 = getelementptr inbounds %struct.termios, %struct.termios* %tios, i32 0, i32 5, !dbg !6160
  %arrayidx126 = getelementptr inbounds [32 x i8], [32 x i8]* %c_cc125, i64 0, i64 5, !dbg !6161
  store i8 0, i8* %arrayidx126, align 1, !dbg !6162
  %74 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6163
  %s127 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %74, i32 0, i32 1, !dbg !6165
  %75 = load i32, i32* %s127, align 4, !dbg !6165
  %call128 = call i32 @tcsetattr(i32 %75, i32 0, %struct.termios* %tios) #6, !dbg !6166
  %cmp129 = icmp slt i32 %call128, 0, !dbg !6167
  br i1 %cmp129, label %if.then131, label %if.end135, !dbg !6168

if.then131:                                       ; preds = %if.end121
  %76 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6169
  %s132 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %76, i32 0, i32 1, !dbg !6171
  %77 = load i32, i32* %s132, align 4, !dbg !6171
  %call133 = call i32 @close(i32 %77), !dbg !6172
  %78 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6173
  %s134 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %78, i32 0, i32 1, !dbg !6174
  store i32 -1, i32* %s134, align 4, !dbg !6175
  store i32 -1, i32* %retval, align 4, !dbg !6176
  br label %return, !dbg !6176

if.end135:                                        ; preds = %if.end121
  store i32 0, i32* %retval, align 4, !dbg !6177
  br label %return, !dbg !6177

return:                                           ; preds = %if.end135, %if.then131, %if.then55, %if.end15
  %79 = load i32, i32* %retval, align 4, !dbg !6178
  ret i32 %79, !dbg !6178
}

; Function Attrs: noinline nounwind uwtable
define internal void @_modbus_rtu_close(%struct._modbus.4* %ctx) #0 !dbg !6179 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %ctx_rtu = alloca %struct._modbus_rtu*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !6180, metadata !451), !dbg !6181
  call void @llvm.dbg.declare(metadata %struct._modbus_rtu** %ctx_rtu, metadata !6182, metadata !451), !dbg !6183
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6184
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 8, !dbg !6185
  %1 = load i8*, i8** %backend_data, align 8, !dbg !6185
  %2 = bitcast i8* %1 to %struct._modbus_rtu*, !dbg !6184
  store %struct._modbus_rtu* %2, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6183
  %3 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6186
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %3, i32 0, i32 1, !dbg !6188
  %4 = load i32, i32* %s, align 4, !dbg !6188
  %cmp = icmp ne i32 %4, -1, !dbg !6189
  br i1 %cmp, label %if.then, label %if.end, !dbg !6190

if.then:                                          ; preds = %entry
  %5 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6191
  %s1 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %5, i32 0, i32 1, !dbg !6193
  %6 = load i32, i32* %s1, align 4, !dbg !6193
  %7 = load %struct._modbus_rtu*, %struct._modbus_rtu** %ctx_rtu, align 8, !dbg !6194
  %old_tios = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %7, i32 0, i32 5, !dbg !6195
  %call = call i32 @tcsetattr(i32 %6, i32 0, %struct.termios* %old_tios) #6, !dbg !6196
  %8 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6197
  %s2 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %8, i32 0, i32 1, !dbg !6198
  %9 = load i32, i32* %s2, align 4, !dbg !6198
  %call3 = call i32 @close(i32 %9), !dbg !6199
  %10 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6200
  %s4 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %10, i32 0, i32 1, !dbg !6201
  store i32 -1, i32* %s4, align 4, !dbg !6202
  br label %if.end, !dbg !6203

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6204
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_flush(%struct._modbus.4* %ctx) #0 !dbg !6205 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !6206, metadata !451), !dbg !6207
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6208
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 1, !dbg !6209
  %1 = load i32, i32* %s, align 4, !dbg !6209
  %call = call i32 @tcflush(i32 %1, i32 2) #6, !dbg !6210
  ret i32 %call, !dbg !6211
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_rtu_select(%struct._modbus.4* %ctx, %struct.fd_set* %rset, %struct.timeval* %tv, i32 %length_to_read) #0 !dbg !6212 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.4*, align 8
  %rset.addr = alloca %struct.fd_set*, align 8
  %tv.addr = alloca %struct.timeval*, align 8
  %length_to_read.addr = alloca i32, align 4
  %s_rc = alloca i32, align 4
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !6213, metadata !451), !dbg !6214
  store %struct.fd_set* %rset, %struct.fd_set** %rset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fd_set** %rset.addr, metadata !6215, metadata !451), !dbg !6216
  store %struct.timeval* %tv, %struct.timeval** %tv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timeval** %tv.addr, metadata !6217, metadata !451), !dbg !6218
  store i32 %length_to_read, i32* %length_to_read.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length_to_read.addr, metadata !6219, metadata !451), !dbg !6220
  call void @llvm.dbg.declare(metadata i32* %s_rc, metadata !6221, metadata !451), !dbg !6222
  br label %while.cond, !dbg !6223

while.cond:                                       ; preds = %if.end10, %entry
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6224
  %s = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 1, !dbg !6225
  %1 = load i32, i32* %s, align 4, !dbg !6225
  %add = add nsw i32 %1, 1, !dbg !6226
  %2 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !6227
  %3 = load %struct.timeval*, %struct.timeval** %tv.addr, align 8, !dbg !6228
  %call = call i32 @select(i32 %add, %struct.fd_set* %2, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* %3), !dbg !6229
  store i32 %call, i32* %s_rc, align 4, !dbg !6230
  %cmp = icmp eq i32 %call, -1, !dbg !6231
  br i1 %cmp, label %while.body, label %while.end, !dbg !6223

while.body:                                       ; preds = %while.cond
  %call1 = call i32* @__errno_location() #9, !dbg !6232
  %4 = load i32, i32* %call1, align 4, !dbg !6232
  %cmp2 = icmp eq i32 %4, 4, !dbg !6235
  br i1 %cmp2, label %if.then, label %if.else, !dbg !6236

if.then:                                          ; preds = %while.body
  %5 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6237
  %debug = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %5, i32 0, i32 2, !dbg !6240
  %6 = load i32, i32* %debug, align 8, !dbg !6240
  %tobool = icmp ne i32 %6, 0, !dbg !6237
  br i1 %tobool, label %if.then3, label %if.end, !dbg !6241

if.then3:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6242
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12.58, i32 0, i32 0)), !dbg !6244
  br label %if.end, !dbg !6245

if.end:                                           ; preds = %if.then3, %if.then
  br label %do.body, !dbg !6246, !llvm.loop !6247

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %__d0, metadata !6248, metadata !451), !dbg !6250
  call void @llvm.dbg.declare(metadata i32* %__d1, metadata !6251, metadata !451), !dbg !6250
  %8 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !6250
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %8, i32 0, i32 0, !dbg !6250
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i64 0, i64 0, !dbg !6250
  %9 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #6, !dbg !6250, !srcloc !6252
  %asmresult = extractvalue { i64, i64* } %9, 0, !dbg !6250
  %asmresult5 = extractvalue { i64, i64* } %9, 1, !dbg !6250
  %10 = trunc i64 %asmresult to i32, !dbg !6250
  store i32 %10, i32* %__d0, align 4, !dbg !6250
  %11 = ptrtoint i64* %asmresult5 to i64, !dbg !6250
  %12 = trunc i64 %11 to i32, !dbg !6250
  store i32 %12, i32* %__d1, align 4, !dbg !6250
  br label %do.end, !dbg !6250

do.end:                                           ; preds = %do.body
  %13 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6253
  %s6 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %13, i32 0, i32 1, !dbg !6253
  %14 = load i32, i32* %s6, align 4, !dbg !6253
  %rem = srem i32 %14, 64, !dbg !6253
  %sh_prom = zext i32 %rem to i64, !dbg !6253
  %shl = shl i64 1, %sh_prom, !dbg !6253
  %15 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !6253
  %fds_bits7 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %15, i32 0, i32 0, !dbg !6253
  %16 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6253
  %s8 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %16, i32 0, i32 1, !dbg !6253
  %17 = load i32, i32* %s8, align 4, !dbg !6253
  %div = sdiv i32 %17, 64, !dbg !6253
  %idxprom = sext i32 %div to i64, !dbg !6253
  %arrayidx9 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits7, i64 0, i64 %idxprom, !dbg !6253
  %18 = load i64, i64* %arrayidx9, align 8, !dbg !6253
  %or = or i64 %18, %shl, !dbg !6253
  store i64 %or, i64* %arrayidx9, align 8, !dbg !6253
  br label %if.end10, !dbg !6254

if.else:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !6255
  br label %return, !dbg !6255

if.end10:                                         ; preds = %do.end
  br label %while.cond, !dbg !6223, !llvm.loop !6257

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %s_rc, align 4, !dbg !6259
  %cmp11 = icmp eq i32 %19, 0, !dbg !6261
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !6262

if.then12:                                        ; preds = %while.end
  %call13 = call i32* @__errno_location() #9, !dbg !6263
  store i32 110, i32* %call13, align 4, !dbg !6265
  store i32 -1, i32* %retval, align 4, !dbg !6266
  br label %return, !dbg !6266

if.end14:                                         ; preds = %while.end
  %20 = load i32, i32* %s_rc, align 4, !dbg !6267
  store i32 %20, i32* %retval, align 4, !dbg !6268
  br label %return, !dbg !6268

return:                                           ; preds = %if.end14, %if.then12, %if.else
  %21 = load i32, i32* %retval, align 4, !dbg !6269
  ret i32 %21, !dbg !6269
}

; Function Attrs: noinline nounwind uwtable
define internal void @_modbus_rtu_free(%struct._modbus.4* %ctx) #0 !dbg !6270 {
entry:
  %ctx.addr = alloca %struct._modbus.4*, align 8
  store %struct._modbus.4* %ctx, %struct._modbus.4** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.4** %ctx.addr, metadata !6271, metadata !451), !dbg !6272
  %0 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6273
  %backend_data = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %0, i32 0, i32 8, !dbg !6275
  %1 = load i8*, i8** %backend_data, align 8, !dbg !6275
  %tobool = icmp ne i8* %1, null, !dbg !6273
  br i1 %tobool, label %if.then, label %if.end, !dbg !6276

if.then:                                          ; preds = %entry
  %2 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6277
  %backend_data1 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %2, i32 0, i32 8, !dbg !6279
  %3 = load i8*, i8** %backend_data1, align 8, !dbg !6279
  %4 = bitcast i8* %3 to %struct._modbus_rtu*, !dbg !6280
  %device = getelementptr inbounds %struct._modbus_rtu, %struct._modbus_rtu* %4, i32 0, i32 0, !dbg !6281
  %5 = load i8*, i8** %device, align 8, !dbg !6281
  call void @free(i8* %5) #6, !dbg !6282
  %6 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6283
  %backend_data2 = getelementptr inbounds %struct._modbus.4, %struct._modbus.4* %6, i32 0, i32 8, !dbg !6284
  %7 = load i8*, i8** %backend_data2, align 8, !dbg !6284
  call void @free(i8* %7) #6, !dbg !6285
  br label %if.end, !dbg !6286

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct._modbus.4*, %struct._modbus.4** %ctx.addr, align 8, !dbg !6287
  %9 = bitcast %struct._modbus.4* %8 to i8*, !dbg !6287
  call void @free(i8* %9) #6, !dbg !6288
  ret void, !dbg !6289
}

declare i32 @select(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) #4

; Function Attrs: nounwind
declare i32 @tcflush(i32, i32) #2

; Function Attrs: nounwind
declare i32 @tcsetattr(i32, i32, %struct.termios*) #2

declare i32 @close(i32) #4

declare i32 @open(i8*, i32, ...) #4

; Function Attrs: nounwind
declare i32 @tcgetattr(i32, %struct.termios*) #2

; Function Attrs: nounwind
declare i32 @cfsetispeed(%struct.termios*, i32) #2

; Function Attrs: nounwind
declare i32 @cfsetospeed(%struct.termios*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i16 @crc16(i8* %buffer, i16 zeroext %buffer_length) #0 !dbg !6290 {
entry:
  %buffer.addr = alloca i8*, align 8
  %buffer_length.addr = alloca i16, align 2
  %crc_hi = alloca i8, align 1
  %crc_lo = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !6293, metadata !451), !dbg !6294
  store i16 %buffer_length, i16* %buffer_length.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %buffer_length.addr, metadata !6295, metadata !451), !dbg !6296
  call void @llvm.dbg.declare(metadata i8* %crc_hi, metadata !6297, metadata !451), !dbg !6298
  store i8 -1, i8* %crc_hi, align 1, !dbg !6298
  call void @llvm.dbg.declare(metadata i8* %crc_lo, metadata !6299, metadata !451), !dbg !6300
  store i8 -1, i8* %crc_lo, align 1, !dbg !6300
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6301, metadata !451), !dbg !6302
  br label %while.cond, !dbg !6303

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i16, i16* %buffer_length.addr, align 2, !dbg !6304
  %dec = add i16 %0, -1, !dbg !6304
  store i16 %dec, i16* %buffer_length.addr, align 2, !dbg !6304
  %tobool = icmp ne i16 %0, 0, !dbg !6303
  br i1 %tobool, label %while.body, label %while.end, !dbg !6303

while.body:                                       ; preds = %while.cond
  %1 = load i8, i8* %crc_hi, align 1, !dbg !6305
  %conv = zext i8 %1 to i32, !dbg !6305
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !6307
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !6307
  store i8* %incdec.ptr, i8** %buffer.addr, align 8, !dbg !6307
  %3 = load i8, i8* %2, align 1, !dbg !6308
  %conv1 = zext i8 %3 to i32, !dbg !6308
  %xor = xor i32 %conv, %conv1, !dbg !6309
  store i32 %xor, i32* %i, align 4, !dbg !6310
  %4 = load i8, i8* %crc_lo, align 1, !dbg !6311
  %conv2 = zext i8 %4 to i32, !dbg !6311
  %5 = load i32, i32* %i, align 4, !dbg !6312
  %idxprom = zext i32 %5 to i64, !dbg !6313
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @table_crc_hi, i64 0, i64 %idxprom, !dbg !6313
  %6 = load i8, i8* %arrayidx, align 1, !dbg !6313
  %conv3 = zext i8 %6 to i32, !dbg !6313
  %xor4 = xor i32 %conv2, %conv3, !dbg !6314
  %conv5 = trunc i32 %xor4 to i8, !dbg !6311
  store i8 %conv5, i8* %crc_hi, align 1, !dbg !6315
  %7 = load i32, i32* %i, align 4, !dbg !6316
  %idxprom6 = zext i32 %7 to i64, !dbg !6317
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* @table_crc_lo, i64 0, i64 %idxprom6, !dbg !6317
  %8 = load i8, i8* %arrayidx7, align 1, !dbg !6317
  store i8 %8, i8* %crc_lo, align 1, !dbg !6318
  br label %while.cond, !dbg !6303, !llvm.loop !6319

while.end:                                        ; preds = %while.cond
  %9 = load i8, i8* %crc_hi, align 1, !dbg !6321
  %conv8 = zext i8 %9 to i32, !dbg !6321
  %shl = shl i32 %conv8, 8, !dbg !6322
  %10 = load i8, i8* %crc_lo, align 1, !dbg !6323
  %conv9 = zext i8 %10 to i32, !dbg !6323
  %or = or i32 %shl, %conv9, !dbg !6324
  %conv10 = trunc i32 %or to i16, !dbg !6325
  ret i16 %conv10, !dbg !6326
}

declare i64 @read(i32, i8*, i64) #4

declare i32 @usleep(i32) #4

declare i64 @write(i32, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_tcp_listen(%struct._modbus.13* %ctx, i32 %nb_connection) #0 !dbg !6327 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %nb_connection.addr = alloca i32, align 4
  %new_s = alloca i32, align 4
  %enable = alloca i32, align 4
  %addr = alloca %struct.sockaddr_in, align 4
  %ctx_tcp = alloca %struct._modbus_tcp*, align 8
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6328, metadata !451), !dbg !6329
  store i32 %nb_connection, i32* %nb_connection.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_connection.addr, metadata !6330, metadata !451), !dbg !6331
  call void @llvm.dbg.declare(metadata i32* %new_s, metadata !6332, metadata !451), !dbg !6333
  call void @llvm.dbg.declare(metadata i32* %enable, metadata !6334, metadata !451), !dbg !6335
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in* %addr, metadata !6336, metadata !451), !dbg !6350
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp** %ctx_tcp, metadata !6351, metadata !451), !dbg !6352
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6353
  %cmp = icmp eq %struct._modbus.13* %0, null, !dbg !6355
  br i1 %cmp, label %if.then, label %if.end, !dbg !6356

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !6357
  store i32 22, i32* %call, align 4, !dbg !6359
  store i32 -1, i32* %retval, align 4, !dbg !6360
  br label %return, !dbg !6360

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6361
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %1, i32 0, i32 8, !dbg !6362
  %2 = load i8*, i8** %backend_data, align 8, !dbg !6362
  %3 = bitcast i8* %2 to %struct._modbus_tcp*, !dbg !6361
  store %struct._modbus_tcp* %3, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6363
  %call1 = call i32 @socket(i32 2, i32 1, i32 6) #6, !dbg !6364
  store i32 %call1, i32* %new_s, align 4, !dbg !6365
  %4 = load i32, i32* %new_s, align 4, !dbg !6366
  %cmp2 = icmp eq i32 %4, -1, !dbg !6368
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !6369

if.then3:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !6370
  br label %return, !dbg !6370

if.end4:                                          ; preds = %if.end
  store i32 1, i32* %enable, align 4, !dbg !6372
  %5 = load i32, i32* %new_s, align 4, !dbg !6373
  %6 = bitcast i32* %enable to i8*, !dbg !6375
  %call5 = call i32 @setsockopt(i32 %5, i32 1, i32 2, i8* %6, i32 4) #6, !dbg !6376
  %cmp6 = icmp eq i32 %call5, -1, !dbg !6377
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !6378

if.then7:                                         ; preds = %if.end4
  %7 = load i32, i32* %new_s, align 4, !dbg !6379
  %call8 = call i32 @close(i32 %7), !dbg !6381
  store i32 -1, i32* %retval, align 4, !dbg !6382
  br label %return, !dbg !6382

if.end9:                                          ; preds = %if.end4
  %8 = bitcast %struct.sockaddr_in* %addr to i8*, !dbg !6383
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i32 4, i1 false), !dbg !6383
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 0, !dbg !6384
  store i16 2, i16* %sin_family, align 4, !dbg !6385
  %9 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6386
  %port = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %9, i32 0, i32 1, !dbg !6387
  %10 = load i32, i32* %port, align 4, !dbg !6387
  %conv = trunc i32 %10 to i16, !dbg !6386
  %call10 = call zeroext i16 @htons(i16 zeroext %conv) #9, !dbg !6388
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 1, !dbg !6389
  store i16 %call10, i16* %sin_port, align 2, !dbg !6390
  %11 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6391
  %ip = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %11, i32 0, i32 2, !dbg !6393
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %ip, i64 0, i64 0, !dbg !6391
  %12 = load i8, i8* %arrayidx, align 4, !dbg !6391
  %conv11 = sext i8 %12 to i32, !dbg !6391
  %cmp12 = icmp eq i32 %conv11, 48, !dbg !6394
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !6395

if.then14:                                        ; preds = %if.end9
  %call15 = call i32 @htonl(i32 0) #9, !dbg !6396
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 2, !dbg !6398
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0, !dbg !6399
  store i32 %call15, i32* %s_addr, align 4, !dbg !6400
  br label %if.end20, !dbg !6401

if.else:                                          ; preds = %if.end9
  %13 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6402
  %ip16 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %13, i32 0, i32 2, !dbg !6404
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %ip16, i32 0, i32 0, !dbg !6402
  %call17 = call i32 @inet_addr(i8* %arraydecay) #6, !dbg !6405
  %sin_addr18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 2, !dbg !6406
  %s_addr19 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr18, i32 0, i32 0, !dbg !6407
  store i32 %call17, i32* %s_addr19, align 4, !dbg !6408
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then14
  %14 = load i32, i32* %new_s, align 4, !dbg !6409
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !6411
  %15 = bitcast %struct.sockaddr_in* %addr to %struct.sockaddr*, !dbg !6411
  store %struct.sockaddr* %15, %struct.sockaddr** %__sockaddr__, align 8, !dbg !6411
  %coerce.dive = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !6412
  %16 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !6412
  %call21 = call i32 @bind(i32 %14, %struct.sockaddr* %16, i32 16) #6, !dbg !6412
  %cmp22 = icmp eq i32 %call21, -1, !dbg !6413
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !6414

if.then24:                                        ; preds = %if.end20
  %17 = load i32, i32* %new_s, align 4, !dbg !6415
  %call25 = call i32 @close(i32 %17), !dbg !6417
  store i32 -1, i32* %retval, align 4, !dbg !6418
  br label %return, !dbg !6418

if.end26:                                         ; preds = %if.end20
  %18 = load i32, i32* %new_s, align 4, !dbg !6419
  %19 = load i32, i32* %nb_connection.addr, align 4, !dbg !6421
  %call27 = call i32 @listen(i32 %18, i32 %19) #6, !dbg !6422
  %cmp28 = icmp eq i32 %call27, -1, !dbg !6423
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !6424

if.then30:                                        ; preds = %if.end26
  %20 = load i32, i32* %new_s, align 4, !dbg !6425
  %call31 = call i32 @close(i32 %20), !dbg !6427
  store i32 -1, i32* %retval, align 4, !dbg !6428
  br label %return, !dbg !6428

if.end32:                                         ; preds = %if.end26
  %21 = load i32, i32* %new_s, align 4, !dbg !6429
  store i32 %21, i32* %retval, align 4, !dbg !6430
  br label %return, !dbg !6430

return:                                           ; preds = %if.end32, %if.then30, %if.then24, %if.then7, %if.then3, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !6431
  ret i32 %22, !dbg !6431
}

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #2

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #2

; Function Attrs: nounwind readnone
declare zeroext i16 @htons(i16 zeroext) #3

; Function Attrs: nounwind
declare i32 @inet_addr(i8*) #2

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #2

; Function Attrs: nounwind
declare i32 @listen(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_tcp_pi_listen(%struct._modbus.13* %ctx, i32 %nb_connection) #0 !dbg !6432 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %nb_connection.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %ai_list = alloca %struct.addrinfo*, align 8
  %ai_ptr = alloca %struct.addrinfo*, align 8
  %ai_hints = alloca %struct.addrinfo, align 8
  %node = alloca i8*, align 8
  %service = alloca i8*, align 8
  %new_s = alloca i32, align 4
  %ctx_tcp_pi = alloca %struct._modbus_tcp_pi*, align 8
  %s = alloca i32, align 4
  %enable = alloca i32, align 4
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6433, metadata !451), !dbg !6434
  store i32 %nb_connection, i32* %nb_connection.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_connection.addr, metadata !6435, metadata !451), !dbg !6436
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !6437, metadata !451), !dbg !6438
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %ai_list, metadata !6439, metadata !451), !dbg !6455
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %ai_ptr, metadata !6456, metadata !451), !dbg !6457
  call void @llvm.dbg.declare(metadata %struct.addrinfo* %ai_hints, metadata !6458, metadata !451), !dbg !6459
  call void @llvm.dbg.declare(metadata i8** %node, metadata !6460, metadata !451), !dbg !6461
  call void @llvm.dbg.declare(metadata i8** %service, metadata !6462, metadata !451), !dbg !6463
  call void @llvm.dbg.declare(metadata i32* %new_s, metadata !6464, metadata !451), !dbg !6465
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp_pi** %ctx_tcp_pi, metadata !6466, metadata !451), !dbg !6467
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6468
  %cmp = icmp eq %struct._modbus.13* %0, null, !dbg !6470
  br i1 %cmp, label %if.then, label %if.end, !dbg !6471

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !6472
  store i32 22, i32* %call, align 4, !dbg !6474
  store i32 -1, i32* %retval, align 4, !dbg !6475
  br label %return, !dbg !6475

if.end:                                           ; preds = %entry
  %1 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6476
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %1, i32 0, i32 8, !dbg !6477
  %2 = load i8*, i8** %backend_data, align 8, !dbg !6477
  %3 = bitcast i8* %2 to %struct._modbus_tcp_pi*, !dbg !6476
  store %struct._modbus_tcp_pi* %3, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !6478
  %4 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !6479
  %node1 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %4, i32 0, i32 2, !dbg !6481
  %arrayidx = getelementptr inbounds [1025 x i8], [1025 x i8]* %node1, i64 0, i64 0, !dbg !6479
  %5 = load i8, i8* %arrayidx, align 4, !dbg !6479
  %conv = sext i8 %5 to i32, !dbg !6479
  %cmp2 = icmp eq i32 %conv, 0, !dbg !6482
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !6483

if.then4:                                         ; preds = %if.end
  store i8* null, i8** %node, align 8, !dbg !6484
  br label %if.end6, !dbg !6486

if.else:                                          ; preds = %if.end
  %6 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !6487
  %node5 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %6, i32 0, i32 2, !dbg !6489
  %arraydecay = getelementptr inbounds [1025 x i8], [1025 x i8]* %node5, i32 0, i32 0, !dbg !6487
  store i8* %arraydecay, i8** %node, align 8, !dbg !6490
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  %7 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !6491
  %service7 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %7, i32 0, i32 3, !dbg !6493
  %arrayidx8 = getelementptr inbounds [32 x i8], [32 x i8]* %service7, i64 0, i64 0, !dbg !6491
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !6491
  %conv9 = sext i8 %8 to i32, !dbg !6491
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !6494
  br i1 %cmp10, label %if.then12, label %if.else13, !dbg !6495

if.then12:                                        ; preds = %if.end6
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i32 0, i32 0), i8** %service, align 8, !dbg !6496
  br label %if.end16, !dbg !6498

if.else13:                                        ; preds = %if.end6
  %9 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !6499
  %service14 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %9, i32 0, i32 3, !dbg !6501
  %arraydecay15 = getelementptr inbounds [32 x i8], [32 x i8]* %service14, i32 0, i32 0, !dbg !6499
  store i8* %arraydecay15, i8** %service, align 8, !dbg !6502
  br label %if.end16

if.end16:                                         ; preds = %if.else13, %if.then12
  %10 = bitcast %struct.addrinfo* %ai_hints to i8*, !dbg !6503
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 48, i32 8, i1 false), !dbg !6503
  %ai_flags = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 0, !dbg !6504
  %11 = load i32, i32* %ai_flags, align 8, !dbg !6505
  %or = or i32 %11, 1, !dbg !6505
  store i32 %or, i32* %ai_flags, align 8, !dbg !6505
  %ai_flags17 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 0, !dbg !6506
  %12 = load i32, i32* %ai_flags17, align 8, !dbg !6507
  %or18 = or i32 %12, 32, !dbg !6507
  store i32 %or18, i32* %ai_flags17, align 8, !dbg !6507
  %ai_family = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 1, !dbg !6508
  store i32 0, i32* %ai_family, align 4, !dbg !6509
  %ai_socktype = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 2, !dbg !6510
  store i32 1, i32* %ai_socktype, align 8, !dbg !6511
  %ai_addr = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 5, !dbg !6512
  store %struct.sockaddr* null, %struct.sockaddr** %ai_addr, align 8, !dbg !6513
  %ai_canonname = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 6, !dbg !6514
  store i8* null, i8** %ai_canonname, align 8, !dbg !6515
  %ai_next = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 7, !dbg !6516
  store %struct.addrinfo* null, %struct.addrinfo** %ai_next, align 8, !dbg !6517
  store %struct.addrinfo* null, %struct.addrinfo** %ai_list, align 8, !dbg !6518
  %13 = load i8*, i8** %node, align 8, !dbg !6519
  %14 = load i8*, i8** %service, align 8, !dbg !6520
  %call19 = call i32 @getaddrinfo(i8* %13, i8* %14, %struct.addrinfo* %ai_hints, %struct.addrinfo** %ai_list), !dbg !6521
  store i32 %call19, i32* %rc, align 4, !dbg !6522
  %15 = load i32, i32* %rc, align 4, !dbg !6523
  %cmp20 = icmp ne i32 %15, 0, !dbg !6525
  br i1 %cmp20, label %if.then22, label %if.end28, !dbg !6526

if.then22:                                        ; preds = %if.end16
  %16 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6527
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %16, i32 0, i32 2, !dbg !6530
  %17 = load i32, i32* %debug, align 8, !dbg !6530
  %tobool = icmp ne i32 %17, 0, !dbg !6527
  br i1 %tobool, label %if.then23, label %if.end26, !dbg !6531

if.then23:                                        ; preds = %if.then22
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6532
  %19 = load i32, i32* %rc, align 4, !dbg !6534
  %call24 = call i8* @gai_strerror(i32 %19) #6, !dbg !6535
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1.70, i32 0, i32 0), i8* %call24), !dbg !6536
  br label %if.end26, !dbg !6537

if.end26:                                         ; preds = %if.then23, %if.then22
  %call27 = call i32* @__errno_location() #9, !dbg !6538
  store i32 111, i32* %call27, align 4, !dbg !6539
  store i32 -1, i32* %retval, align 4, !dbg !6540
  br label %return, !dbg !6540

if.end28:                                         ; preds = %if.end16
  store i32 -1, i32* %new_s, align 4, !dbg !6541
  %20 = load %struct.addrinfo*, %struct.addrinfo** %ai_list, align 8, !dbg !6542
  store %struct.addrinfo* %20, %struct.addrinfo** %ai_ptr, align 8, !dbg !6544
  br label %for.cond, !dbg !6545

for.cond:                                         ; preds = %for.inc, %if.end28
  %21 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6546
  %cmp29 = icmp ne %struct.addrinfo* %21, null, !dbg !6548
  br i1 %cmp29, label %for.body, label %for.end, !dbg !6549

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %s, metadata !6550, metadata !451), !dbg !6552
  %22 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6553
  %ai_family31 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %22, i32 0, i32 1, !dbg !6554
  %23 = load i32, i32* %ai_family31, align 4, !dbg !6554
  %24 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6555
  %ai_socktype32 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %24, i32 0, i32 2, !dbg !6556
  %25 = load i32, i32* %ai_socktype32, align 8, !dbg !6556
  %26 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6557
  %ai_protocol = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %26, i32 0, i32 3, !dbg !6558
  %27 = load i32, i32* %ai_protocol, align 4, !dbg !6558
  %call33 = call i32 @socket(i32 %23, i32 %25, i32 %27) #6, !dbg !6559
  store i32 %call33, i32* %s, align 4, !dbg !6560
  %28 = load i32, i32* %s, align 4, !dbg !6561
  %cmp34 = icmp slt i32 %28, 0, !dbg !6563
  br i1 %cmp34, label %if.then36, label %if.else41, !dbg !6564

if.then36:                                        ; preds = %for.body
  %29 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6565
  %debug37 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %29, i32 0, i32 2, !dbg !6568
  %30 = load i32, i32* %debug37, align 8, !dbg !6568
  %tobool38 = icmp ne i32 %30, 0, !dbg !6565
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !6569

if.then39:                                        ; preds = %if.then36
  call void @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.71, i32 0, i32 0)), !dbg !6570
  br label %if.end40, !dbg !6572

if.end40:                                         ; preds = %if.then39, %if.then36
  br label %for.inc, !dbg !6573

if.else41:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %enable, metadata !6574, metadata !451), !dbg !6576
  store i32 1, i32* %enable, align 4, !dbg !6576
  %31 = load i32, i32* %s, align 4, !dbg !6577
  %32 = bitcast i32* %enable to i8*, !dbg !6578
  %call42 = call i32 @setsockopt(i32 %31, i32 1, i32 2, i8* %32, i32 4) #6, !dbg !6579
  store i32 %call42, i32* %rc, align 4, !dbg !6580
  %33 = load i32, i32* %rc, align 4, !dbg !6581
  %cmp43 = icmp ne i32 %33, 0, !dbg !6583
  br i1 %cmp43, label %if.then45, label %if.end51, !dbg !6584

if.then45:                                        ; preds = %if.else41
  %34 = load i32, i32* %s, align 4, !dbg !6585
  %call46 = call i32 @close(i32 %34), !dbg !6587
  %35 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6588
  %debug47 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %35, i32 0, i32 2, !dbg !6590
  %36 = load i32, i32* %debug47, align 8, !dbg !6590
  %tobool48 = icmp ne i32 %36, 0, !dbg !6588
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !6591

if.then49:                                        ; preds = %if.then45
  call void @perror(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.72, i32 0, i32 0)), !dbg !6592
  br label %if.end50, !dbg !6594

if.end50:                                         ; preds = %if.then49, %if.then45
  br label %for.inc, !dbg !6595

if.end51:                                         ; preds = %if.else41
  br label %if.end52

if.end52:                                         ; preds = %if.end51
  %37 = load i32, i32* %s, align 4, !dbg !6596
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !6597
  %38 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6597
  %ai_addr53 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %38, i32 0, i32 5, !dbg !6598
  %39 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr53, align 8, !dbg !6598
  store %struct.sockaddr* %39, %struct.sockaddr** %__sockaddr__, align 8, !dbg !6597
  %40 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6599
  %ai_addrlen = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %40, i32 0, i32 4, !dbg !6600
  %41 = load i32, i32* %ai_addrlen, align 8, !dbg !6600
  %coerce.dive = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !6601
  %42 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !6601
  %call54 = call i32 @bind(i32 %37, %struct.sockaddr* %42, i32 %41) #6, !dbg !6601
  store i32 %call54, i32* %rc, align 4, !dbg !6602
  %43 = load i32, i32* %rc, align 4, !dbg !6603
  %cmp55 = icmp ne i32 %43, 0, !dbg !6605
  br i1 %cmp55, label %if.then57, label %if.end63, !dbg !6606

if.then57:                                        ; preds = %if.end52
  %44 = load i32, i32* %s, align 4, !dbg !6607
  %call58 = call i32 @close(i32 %44), !dbg !6609
  %45 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6610
  %debug59 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %45, i32 0, i32 2, !dbg !6612
  %46 = load i32, i32* %debug59, align 8, !dbg !6612
  %tobool60 = icmp ne i32 %46, 0, !dbg !6610
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !6613

if.then61:                                        ; preds = %if.then57
  call void @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.73, i32 0, i32 0)), !dbg !6614
  br label %if.end62, !dbg !6616

if.end62:                                         ; preds = %if.then61, %if.then57
  br label %for.inc, !dbg !6617

if.end63:                                         ; preds = %if.end52
  %47 = load i32, i32* %s, align 4, !dbg !6618
  %48 = load i32, i32* %nb_connection.addr, align 4, !dbg !6619
  %call64 = call i32 @listen(i32 %47, i32 %48) #6, !dbg !6620
  store i32 %call64, i32* %rc, align 4, !dbg !6621
  %49 = load i32, i32* %rc, align 4, !dbg !6622
  %cmp65 = icmp ne i32 %49, 0, !dbg !6624
  br i1 %cmp65, label %if.then67, label %if.end73, !dbg !6625

if.then67:                                        ; preds = %if.end63
  %50 = load i32, i32* %s, align 4, !dbg !6626
  %call68 = call i32 @close(i32 %50), !dbg !6628
  %51 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6629
  %debug69 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %51, i32 0, i32 2, !dbg !6631
  %52 = load i32, i32* %debug69, align 8, !dbg !6631
  %tobool70 = icmp ne i32 %52, 0, !dbg !6629
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !6632

if.then71:                                        ; preds = %if.then67
  call void @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5.74, i32 0, i32 0)), !dbg !6633
  br label %if.end72, !dbg !6635

if.end72:                                         ; preds = %if.then71, %if.then67
  br label %for.inc, !dbg !6636

if.end73:                                         ; preds = %if.end63
  %53 = load i32, i32* %s, align 4, !dbg !6637
  store i32 %53, i32* %new_s, align 4, !dbg !6638
  br label %for.end, !dbg !6639

for.inc:                                          ; preds = %if.end72, %if.end62, %if.end50, %if.end40
  %54 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !6640
  %ai_next74 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %54, i32 0, i32 7, !dbg !6641
  %55 = load %struct.addrinfo*, %struct.addrinfo** %ai_next74, align 8, !dbg !6641
  store %struct.addrinfo* %55, %struct.addrinfo** %ai_ptr, align 8, !dbg !6642
  br label %for.cond, !dbg !6643, !llvm.loop !6644

for.end:                                          ; preds = %if.end73, %for.cond
  %56 = load %struct.addrinfo*, %struct.addrinfo** %ai_list, align 8, !dbg !6646
  call void @freeaddrinfo(%struct.addrinfo* %56) #6, !dbg !6647
  %57 = load i32, i32* %new_s, align 4, !dbg !6648
  %cmp75 = icmp slt i32 %57, 0, !dbg !6650
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !6651

if.then77:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !6652
  br label %return, !dbg !6652

if.end78:                                         ; preds = %for.end
  %58 = load i32, i32* %new_s, align 4, !dbg !6654
  store i32 %58, i32* %retval, align 4, !dbg !6655
  br label %return, !dbg !6655

return:                                           ; preds = %if.end78, %if.then77, %if.end26, %if.then
  %59 = load i32, i32* %retval, align 4, !dbg !6656
  ret i32 %59, !dbg !6656
}

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #4

; Function Attrs: nounwind
declare i8* @gai_strerror(i32) #2

declare void @perror(i8*) #4

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_tcp_accept(%struct._modbus.13* %ctx, i32* %s) #0 !dbg !6657 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %s.addr = alloca i32*, align 8
  %addr = alloca %struct.sockaddr_in, align 4
  %addrlen = alloca i32, align 4
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6660, metadata !451), !dbg !6661
  store i32* %s, i32** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %s.addr, metadata !6662, metadata !451), !dbg !6663
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in* %addr, metadata !6664, metadata !451), !dbg !6665
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !6666, metadata !451), !dbg !6667
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6668
  %cmp = icmp eq %struct._modbus.13* %0, null, !dbg !6670
  br i1 %cmp, label %if.then, label %if.end, !dbg !6671

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !6672
  store i32 22, i32* %call, align 4, !dbg !6674
  store i32 -1, i32* %retval, align 4, !dbg !6675
  br label %return, !dbg !6675

if.end:                                           ; preds = %entry
  store i32 16, i32* %addrlen, align 4, !dbg !6676
  %1 = load i32*, i32** %s.addr, align 8, !dbg !6677
  %2 = load i32, i32* %1, align 4, !dbg !6678
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !6679
  %3 = bitcast %struct.sockaddr_in* %addr to %struct.sockaddr*, !dbg !6679
  store %struct.sockaddr* %3, %struct.sockaddr** %__sockaddr__, align 8, !dbg !6679
  %coerce.dive = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !6680
  %4 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !6680
  %call1 = call i32 @accept4(i32 %2, %struct.sockaddr* %4, i32* %addrlen, i32 524288), !dbg !6680
  %5 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6681
  %s2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %5, i32 0, i32 1, !dbg !6682
  store i32 %call1, i32* %s2, align 4, !dbg !6683
  %6 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6684
  %s3 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %6, i32 0, i32 1, !dbg !6686
  %7 = load i32, i32* %s3, align 4, !dbg !6686
  %cmp4 = icmp eq i32 %7, -1, !dbg !6687
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6688

if.then5:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !6689
  br label %return, !dbg !6689

if.end6:                                          ; preds = %if.end
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6691
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 2, !dbg !6693
  %9 = load i32, i32* %debug, align 8, !dbg !6693
  %tobool = icmp ne i32 %9, 0, !dbg !6691
  br i1 %tobool, label %if.then7, label %if.end11, !dbg !6694

if.then7:                                         ; preds = %if.end6
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 2, !dbg !6695
  %coerce.dive8 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0, !dbg !6697
  %10 = load i32, i32* %coerce.dive8, align 4, !dbg !6697
  %call9 = call i8* @inet_ntoa(i32 %10) #6, !dbg !6697
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6.75, i32 0, i32 0), i8* %call9), !dbg !6698
  br label %if.end11, !dbg !6699

if.end11:                                         ; preds = %if.then7, %if.end6
  %11 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6700
  %s12 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %11, i32 0, i32 1, !dbg !6701
  %12 = load i32, i32* %s12, align 4, !dbg !6701
  store i32 %12, i32* %retval, align 4, !dbg !6702
  br label %return, !dbg !6702

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !6703
  ret i32 %13, !dbg !6703
}

declare i32 @accept4(i32, %struct.sockaddr*, i32*, i32) #4

; Function Attrs: nounwind
declare i8* @inet_ntoa(i32) #2

; Function Attrs: noinline nounwind uwtable
define i32 @modbus_tcp_pi_accept(%struct._modbus.13* %ctx, i32* %s) #0 !dbg !6704 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %s.addr = alloca i32*, align 8
  %addr = alloca %struct.sockaddr_storage, align 8
  %addrlen = alloca i32, align 4
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6705, metadata !451), !dbg !6706
  store i32* %s, i32** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %s.addr, metadata !6707, metadata !451), !dbg !6708
  call void @llvm.dbg.declare(metadata %struct.sockaddr_storage* %addr, metadata !6709, metadata !451), !dbg !6718
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !6719, metadata !451), !dbg !6720
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6721
  %cmp = icmp eq %struct._modbus.13* %0, null, !dbg !6723
  br i1 %cmp, label %if.then, label %if.end, !dbg !6724

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #9, !dbg !6725
  store i32 22, i32* %call, align 4, !dbg !6727
  store i32 -1, i32* %retval, align 4, !dbg !6728
  br label %return, !dbg !6728

if.end:                                           ; preds = %entry
  store i32 128, i32* %addrlen, align 4, !dbg !6729
  %1 = load i32*, i32** %s.addr, align 8, !dbg !6730
  %2 = load i32, i32* %1, align 4, !dbg !6731
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !6732
  %3 = bitcast %struct.sockaddr_storage* %addr to %struct.sockaddr*, !dbg !6732
  store %struct.sockaddr* %3, %struct.sockaddr** %__sockaddr__, align 8, !dbg !6732
  %coerce.dive = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !6733
  %4 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !6733
  %call1 = call i32 @accept4(i32 %2, %struct.sockaddr* %4, i32* %addrlen, i32 524288), !dbg !6733
  %5 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6734
  %s2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %5, i32 0, i32 1, !dbg !6735
  store i32 %call1, i32* %s2, align 4, !dbg !6736
  %6 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6737
  %s3 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %6, i32 0, i32 1, !dbg !6739
  %7 = load i32, i32* %s3, align 4, !dbg !6739
  %cmp4 = icmp eq i32 %7, -1, !dbg !6740
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6741

if.then5:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !6742
  br label %return, !dbg !6742

if.end6:                                          ; preds = %if.end
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6744
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 2, !dbg !6746
  %9 = load i32, i32* %debug, align 8, !dbg !6746
  %tobool = icmp ne i32 %9, 0, !dbg !6744
  br i1 %tobool, label %if.then7, label %if.end9, !dbg !6747

if.then7:                                         ; preds = %if.end6
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7.76, i32 0, i32 0)), !dbg !6748
  br label %if.end9, !dbg !6750

if.end9:                                          ; preds = %if.then7, %if.end6
  %10 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6751
  %s10 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %10, i32 0, i32 1, !dbg !6752
  %11 = load i32, i32* %s10, align 4, !dbg !6752
  store i32 %11, i32* %retval, align 4, !dbg !6753
  br label %return, !dbg !6753

return:                                           ; preds = %if.end9, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !6754
  ret i32 %12, !dbg !6754
}

; Function Attrs: noinline nounwind uwtable
define %struct._modbus.13* @modbus_new_tcp(i8* %ip, i32 %port) #0 !dbg !6755 {
entry:
  %retval = alloca %struct._modbus.13*, align 8
  %ip.addr = alloca i8*, align 8
  %port.addr = alloca i32, align 4
  %ctx = alloca %struct._modbus.13*, align 8
  %ctx_tcp = alloca %struct._modbus_tcp*, align 8
  %dest_size = alloca i64, align 8
  %ret_size = alloca i64, align 8
  store i8* %ip, i8** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ip.addr, metadata !6758, metadata !451), !dbg !6759
  store i32 %port, i32* %port.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %port.addr, metadata !6760, metadata !451), !dbg !6761
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx, metadata !6762, metadata !451), !dbg !6763
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp** %ctx_tcp, metadata !6764, metadata !451), !dbg !6765
  call void @llvm.dbg.declare(metadata i64* %dest_size, metadata !6766, metadata !451), !dbg !6767
  call void @llvm.dbg.declare(metadata i64* %ret_size, metadata !6768, metadata !451), !dbg !6769
  %call = call noalias i8* @malloc(i64 80) #6, !dbg !6770
  %0 = bitcast i8* %call to %struct._modbus.13*, !dbg !6771
  store %struct._modbus.13* %0, %struct._modbus.13** %ctx, align 8, !dbg !6772
  %1 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6773
  %cmp = icmp eq %struct._modbus.13* %1, null, !dbg !6775
  br i1 %cmp, label %if.then, label %if.end, !dbg !6776

if.then:                                          ; preds = %entry
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !6777
  br label %return, !dbg !6777

if.end:                                           ; preds = %entry
  %2 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6779
  call void bitcast (void (%struct._modbus*)* @_modbus_init_common to void (%struct._modbus.13*)*)(%struct._modbus.13* %2), !dbg !6780
  %3 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6781
  %slave = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %3, i32 0, i32 0, !dbg !6782
  store i32 255, i32* %slave, align 8, !dbg !6783
  %4 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6784
  %backend = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %4, i32 0, i32 7, !dbg !6785
  store %struct._modbus_backend.12* bitcast ({ i32, i32, i32, i32, i32 (%struct._modbus.13*, i32)*, i32 (%struct._modbus.13*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i8*, i32)*, i32 (%struct._modbus.13*)*, void (%struct._modbus.13*)*, i32 (%struct._modbus.13*)*, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.13*)* }* @_modbus_tcp_backend to %struct._modbus_backend.12*), %struct._modbus_backend.12** %backend, align 8, !dbg !6786
  %call1 = call noalias i8* @malloc(i64 24) #6, !dbg !6787
  %5 = bitcast i8* %call1 to %struct._modbus_tcp*, !dbg !6788
  %6 = bitcast %struct._modbus_tcp* %5 to i8*, !dbg !6788
  %7 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6789
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %7, i32 0, i32 8, !dbg !6790
  store i8* %6, i8** %backend_data, align 8, !dbg !6791
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6792
  %backend_data2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 8, !dbg !6794
  %9 = load i8*, i8** %backend_data2, align 8, !dbg !6794
  %cmp3 = icmp eq i8* %9, null, !dbg !6795
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6796

if.then4:                                         ; preds = %if.end
  %10 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6797
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %10), !dbg !6799
  %call5 = call i32* @__errno_location() #9, !dbg !6800
  store i32 12, i32* %call5, align 4, !dbg !6801
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !6802
  br label %return, !dbg !6802

if.end6:                                          ; preds = %if.end
  %11 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6803
  %backend_data7 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %11, i32 0, i32 8, !dbg !6804
  %12 = load i8*, i8** %backend_data7, align 8, !dbg !6804
  %13 = bitcast i8* %12 to %struct._modbus_tcp*, !dbg !6805
  store %struct._modbus_tcp* %13, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6806
  %14 = load i8*, i8** %ip.addr, align 8, !dbg !6807
  %cmp8 = icmp ne i8* %14, null, !dbg !6809
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !6810

if.then9:                                         ; preds = %if.end6
  store i64 16, i64* %dest_size, align 8, !dbg !6811
  %15 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6813
  %ip10 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %15, i32 0, i32 2, !dbg !6814
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %ip10, i32 0, i32 0, !dbg !6813
  %16 = load i8*, i8** %ip.addr, align 8, !dbg !6815
  %17 = load i64, i64* %dest_size, align 8, !dbg !6816
  %call11 = call i64 @strlcpy(i8* %arraydecay, i8* %16, i64 %17), !dbg !6817
  store i64 %call11, i64* %ret_size, align 8, !dbg !6818
  %18 = load i64, i64* %ret_size, align 8, !dbg !6819
  %cmp12 = icmp eq i64 %18, 0, !dbg !6821
  br i1 %cmp12, label %if.then13, label %if.end16, !dbg !6822

if.then13:                                        ; preds = %if.then9
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6823
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8.77, i32 0, i32 0)), !dbg !6825
  %20 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6826
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %20), !dbg !6827
  %call15 = call i32* @__errno_location() #9, !dbg !6828
  store i32 22, i32* %call15, align 4, !dbg !6829
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !6830
  br label %return, !dbg !6830

if.end16:                                         ; preds = %if.then9
  %21 = load i64, i64* %ret_size, align 8, !dbg !6831
  %22 = load i64, i64* %dest_size, align 8, !dbg !6833
  %cmp17 = icmp uge i64 %21, %22, !dbg !6834
  br i1 %cmp17, label %if.then18, label %if.end21, !dbg !6835

if.then18:                                        ; preds = %if.end16
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6836
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9.78, i32 0, i32 0)), !dbg !6838
  %24 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6839
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %24), !dbg !6840
  %call20 = call i32* @__errno_location() #9, !dbg !6841
  store i32 22, i32* %call20, align 4, !dbg !6842
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !6843
  br label %return, !dbg !6843

if.end21:                                         ; preds = %if.end16
  br label %if.end23, !dbg !6844

if.else:                                          ; preds = %if.end6
  %25 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6845
  %ip22 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %25, i32 0, i32 2, !dbg !6847
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %ip22, i64 0, i64 0, !dbg !6845
  store i8 48, i8* %arrayidx, align 4, !dbg !6848
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.end21
  %26 = load i32, i32* %port.addr, align 4, !dbg !6849
  %27 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6850
  %port24 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %27, i32 0, i32 1, !dbg !6851
  store i32 %26, i32* %port24, align 4, !dbg !6852
  %28 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6853
  %t_id = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %28, i32 0, i32 0, !dbg !6854
  store i16 0, i16* %t_id, align 4, !dbg !6855
  %29 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !6856
  store %struct._modbus.13* %29, %struct._modbus.13** %retval, align 8, !dbg !6857
  br label %return, !dbg !6857

return:                                           ; preds = %if.end23, %if.then18, %if.then13, %if.then4, %if.then
  %30 = load %struct._modbus.13*, %struct._modbus.13** %retval, align 8, !dbg !6858
  ret %struct._modbus.13* %30, !dbg !6858
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_set_slave.79(%struct._modbus.13* %ctx, i32 %slave) #0 !dbg !6859 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %slave.addr = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6860, metadata !451), !dbg !6861
  store i32 %slave, i32* %slave.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %slave.addr, metadata !6862, metadata !451), !dbg !6863
  %0 = load i32, i32* %slave.addr, align 4, !dbg !6864
  %cmp = icmp sge i32 %0, 0, !dbg !6866
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6867

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %slave.addr, align 4, !dbg !6868
  %cmp1 = icmp sle i32 %1, 247, !dbg !6869
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6870

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %slave.addr, align 4, !dbg !6871
  %3 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6873
  %slave2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %3, i32 0, i32 0, !dbg !6874
  store i32 %2, i32* %slave2, align 8, !dbg !6875
  br label %if.end7, !dbg !6876

if.else:                                          ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %slave.addr, align 4, !dbg !6877
  %cmp3 = icmp eq i32 %4, 255, !dbg !6879
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !6880

if.then4:                                         ; preds = %if.else
  %5 = load i32, i32* %slave.addr, align 4, !dbg !6881
  %6 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6883
  %slave5 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %6, i32 0, i32 0, !dbg !6884
  store i32 %5, i32* %slave5, align 8, !dbg !6885
  br label %if.end, !dbg !6886

if.else6:                                         ; preds = %if.else
  %call = call i32* @__errno_location() #9, !dbg !6887
  store i32 22, i32* %call, align 4, !dbg !6889
  store i32 -1, i32* %retval, align 4, !dbg !6890
  br label %return, !dbg !6890

if.end:                                           ; preds = %if.then4
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %retval, align 4, !dbg !6891
  br label %return, !dbg !6891

return:                                           ; preds = %if.end7, %if.else6
  %7 = load i32, i32* %retval, align 4, !dbg !6892
  ret i32 %7, !dbg !6892
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_build_request_basis(%struct._modbus.13* %ctx, i32 %function, i32 %addr, i32 %nb, i8* %req) #0 !dbg !6893 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %function.addr = alloca i32, align 4
  %addr.addr = alloca i32, align 4
  %nb.addr = alloca i32, align 4
  %req.addr = alloca i8*, align 8
  %ctx_tcp = alloca %struct._modbus_tcp*, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !6894, metadata !451), !dbg !6895
  store i32 %function, i32* %function.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %function.addr, metadata !6896, metadata !451), !dbg !6897
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !6898, metadata !451), !dbg !6899
  store i32 %nb, i32* %nb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb.addr, metadata !6900, metadata !451), !dbg !6901
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !6902, metadata !451), !dbg !6903
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp** %ctx_tcp, metadata !6904, metadata !451), !dbg !6905
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6906
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 8, !dbg !6907
  %1 = load i8*, i8** %backend_data, align 8, !dbg !6907
  %2 = bitcast i8* %1 to %struct._modbus_tcp*, !dbg !6906
  store %struct._modbus_tcp* %2, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6905
  %3 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6908
  %t_id = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %3, i32 0, i32 0, !dbg !6910
  %4 = load i16, i16* %t_id, align 4, !dbg !6910
  %conv = zext i16 %4 to i32, !dbg !6908
  %cmp = icmp slt i32 %conv, 65535, !dbg !6911
  br i1 %cmp, label %if.then, label %if.else, !dbg !6912

if.then:                                          ; preds = %entry
  %5 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6913
  %t_id2 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %5, i32 0, i32 0, !dbg !6914
  %6 = load i16, i16* %t_id2, align 4, !dbg !6915
  %inc = add i16 %6, 1, !dbg !6915
  store i16 %inc, i16* %t_id2, align 4, !dbg !6915
  br label %if.end, !dbg !6913

if.else:                                          ; preds = %entry
  %7 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6916
  %t_id3 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %7, i32 0, i32 0, !dbg !6917
  store i16 0, i16* %t_id3, align 4, !dbg !6918
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6919
  %t_id4 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %8, i32 0, i32 0, !dbg !6920
  %9 = load i16, i16* %t_id4, align 4, !dbg !6920
  %conv5 = zext i16 %9 to i32, !dbg !6919
  %shr = ashr i32 %conv5, 8, !dbg !6921
  %conv6 = trunc i32 %shr to i8, !dbg !6919
  %10 = load i8*, i8** %req.addr, align 8, !dbg !6922
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0, !dbg !6922
  store i8 %conv6, i8* %arrayidx, align 1, !dbg !6923
  %11 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !6924
  %t_id7 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %11, i32 0, i32 0, !dbg !6925
  %12 = load i16, i16* %t_id7, align 4, !dbg !6925
  %conv8 = zext i16 %12 to i32, !dbg !6924
  %and = and i32 %conv8, 255, !dbg !6926
  %conv9 = trunc i32 %and to i8, !dbg !6924
  %13 = load i8*, i8** %req.addr, align 8, !dbg !6927
  %arrayidx10 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !6927
  store i8 %conv9, i8* %arrayidx10, align 1, !dbg !6928
  %14 = load i8*, i8** %req.addr, align 8, !dbg !6929
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 2, !dbg !6929
  store i8 0, i8* %arrayidx11, align 1, !dbg !6930
  %15 = load i8*, i8** %req.addr, align 8, !dbg !6931
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 3, !dbg !6931
  store i8 0, i8* %arrayidx12, align 1, !dbg !6932
  %16 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !6933
  %slave = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %16, i32 0, i32 0, !dbg !6934
  %17 = load i32, i32* %slave, align 8, !dbg !6934
  %conv13 = trunc i32 %17 to i8, !dbg !6933
  %18 = load i8*, i8** %req.addr, align 8, !dbg !6935
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i64 6, !dbg !6935
  store i8 %conv13, i8* %arrayidx14, align 1, !dbg !6936
  %19 = load i32, i32* %function.addr, align 4, !dbg !6937
  %conv15 = trunc i32 %19 to i8, !dbg !6937
  %20 = load i8*, i8** %req.addr, align 8, !dbg !6938
  %arrayidx16 = getelementptr inbounds i8, i8* %20, i64 7, !dbg !6938
  store i8 %conv15, i8* %arrayidx16, align 1, !dbg !6939
  %21 = load i32, i32* %addr.addr, align 4, !dbg !6940
  %shr17 = ashr i32 %21, 8, !dbg !6941
  %conv18 = trunc i32 %shr17 to i8, !dbg !6940
  %22 = load i8*, i8** %req.addr, align 8, !dbg !6942
  %arrayidx19 = getelementptr inbounds i8, i8* %22, i64 8, !dbg !6942
  store i8 %conv18, i8* %arrayidx19, align 1, !dbg !6943
  %23 = load i32, i32* %addr.addr, align 4, !dbg !6944
  %and20 = and i32 %23, 255, !dbg !6945
  %conv21 = trunc i32 %and20 to i8, !dbg !6944
  %24 = load i8*, i8** %req.addr, align 8, !dbg !6946
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i64 9, !dbg !6946
  store i8 %conv21, i8* %arrayidx22, align 1, !dbg !6947
  %25 = load i32, i32* %nb.addr, align 4, !dbg !6948
  %shr23 = ashr i32 %25, 8, !dbg !6949
  %conv24 = trunc i32 %shr23 to i8, !dbg !6948
  %26 = load i8*, i8** %req.addr, align 8, !dbg !6950
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i64 10, !dbg !6950
  store i8 %conv24, i8* %arrayidx25, align 1, !dbg !6951
  %27 = load i32, i32* %nb.addr, align 4, !dbg !6952
  %and26 = and i32 %27, 255, !dbg !6953
  %conv27 = trunc i32 %and26 to i8, !dbg !6952
  %28 = load i8*, i8** %req.addr, align 8, !dbg !6954
  %arrayidx28 = getelementptr inbounds i8, i8* %28, i64 11, !dbg !6954
  store i8 %conv27, i8* %arrayidx28, align 1, !dbg !6955
  ret i32 12, !dbg !6956
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_build_response_basis(%struct._sft* %sft, i8* %rsp) #0 !dbg !6957 {
entry:
  %sft.addr = alloca %struct._sft*, align 8
  %rsp.addr = alloca i8*, align 8
  store %struct._sft* %sft, %struct._sft** %sft.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sft** %sft.addr, metadata !6958, metadata !451), !dbg !6959
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !6960, metadata !451), !dbg !6961
  %0 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !6962
  %t_id = getelementptr inbounds %struct._sft, %struct._sft* %0, i32 0, i32 2, !dbg !6963
  %1 = load i32, i32* %t_id, align 4, !dbg !6963
  %shr = ashr i32 %1, 8, !dbg !6964
  %conv = trunc i32 %shr to i8, !dbg !6962
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !6965
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !6965
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6966
  %3 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !6967
  %t_id1 = getelementptr inbounds %struct._sft, %struct._sft* %3, i32 0, i32 2, !dbg !6968
  %4 = load i32, i32* %t_id1, align 4, !dbg !6968
  %and = and i32 %4, 255, !dbg !6969
  %conv2 = trunc i32 %and to i8, !dbg !6967
  %5 = load i8*, i8** %rsp.addr, align 8, !dbg !6970
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !6970
  store i8 %conv2, i8* %arrayidx3, align 1, !dbg !6971
  %6 = load i8*, i8** %rsp.addr, align 8, !dbg !6972
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 2, !dbg !6972
  store i8 0, i8* %arrayidx4, align 1, !dbg !6973
  %7 = load i8*, i8** %rsp.addr, align 8, !dbg !6974
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 3, !dbg !6974
  store i8 0, i8* %arrayidx5, align 1, !dbg !6975
  %8 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !6976
  %slave = getelementptr inbounds %struct._sft, %struct._sft* %8, i32 0, i32 0, !dbg !6977
  %9 = load i32, i32* %slave, align 4, !dbg !6977
  %conv6 = trunc i32 %9 to i8, !dbg !6976
  %10 = load i8*, i8** %rsp.addr, align 8, !dbg !6978
  %arrayidx7 = getelementptr inbounds i8, i8* %10, i64 6, !dbg !6978
  store i8 %conv6, i8* %arrayidx7, align 1, !dbg !6979
  %11 = load %struct._sft*, %struct._sft** %sft.addr, align 8, !dbg !6980
  %function = getelementptr inbounds %struct._sft, %struct._sft* %11, i32 0, i32 1, !dbg !6981
  %12 = load i32, i32* %function, align 4, !dbg !6981
  %conv8 = trunc i32 %12 to i8, !dbg !6980
  %13 = load i8*, i8** %rsp.addr, align 8, !dbg !6982
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 7, !dbg !6982
  store i8 %conv8, i8* %arrayidx9, align 1, !dbg !6983
  ret i32 8, !dbg !6984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_prepare_response_tid(i8* %req, i32* %req_length) #0 !dbg !6985 {
entry:
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32*, align 8
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !6986, metadata !451), !dbg !6987
  store i32* %req_length, i32** %req_length.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %req_length.addr, metadata !6988, metadata !451), !dbg !6989
  %0 = load i8*, i8** %req.addr, align 8, !dbg !6990
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !6990
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6990
  %conv = zext i8 %1 to i32, !dbg !6990
  %shl = shl i32 %conv, 8, !dbg !6991
  %2 = load i8*, i8** %req.addr, align 8, !dbg !6992
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1, !dbg !6992
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !6992
  %conv2 = zext i8 %3 to i32, !dbg !6992
  %add = add nsw i32 %shl, %conv2, !dbg !6993
  ret i32 %add, !dbg !6994
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_send_msg_pre(i8* %req, i32 %req_length) #0 !dbg !6995 {
entry:
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32, align 4
  %mbap_length = alloca i32, align 4
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !6996, metadata !451), !dbg !6997
  store i32 %req_length, i32* %req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_length.addr, metadata !6998, metadata !451), !dbg !6999
  call void @llvm.dbg.declare(metadata i32* %mbap_length, metadata !7000, metadata !451), !dbg !7001
  %0 = load i32, i32* %req_length.addr, align 4, !dbg !7002
  %sub = sub nsw i32 %0, 6, !dbg !7003
  store i32 %sub, i32* %mbap_length, align 4, !dbg !7001
  %1 = load i32, i32* %mbap_length, align 4, !dbg !7004
  %shr = ashr i32 %1, 8, !dbg !7005
  %conv = trunc i32 %shr to i8, !dbg !7004
  %2 = load i8*, i8** %req.addr, align 8, !dbg !7006
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 4, !dbg !7006
  store i8 %conv, i8* %arrayidx, align 1, !dbg !7007
  %3 = load i32, i32* %mbap_length, align 4, !dbg !7008
  %and = and i32 %3, 255, !dbg !7009
  %conv1 = trunc i32 %and to i8, !dbg !7008
  %4 = load i8*, i8** %req.addr, align 8, !dbg !7010
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 5, !dbg !7010
  store i8 %conv1, i8* %arrayidx2, align 1, !dbg !7011
  %5 = load i32, i32* %req_length.addr, align 4, !dbg !7012
  ret i32 %5, !dbg !7013
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @_modbus_tcp_send(%struct._modbus.13* %ctx, i8* %req, i32 %req_length) #0 !dbg !7014 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %req.addr = alloca i8*, align 8
  %req_length.addr = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7015, metadata !451), !dbg !7016
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !7017, metadata !451), !dbg !7018
  store i32 %req_length, i32* %req_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_length.addr, metadata !7019, metadata !451), !dbg !7020
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7021
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 1, !dbg !7022
  %1 = load i32, i32* %s, align 4, !dbg !7022
  %2 = load i8*, i8** %req.addr, align 8, !dbg !7023
  %3 = load i32, i32* %req_length.addr, align 4, !dbg !7024
  %conv = sext i32 %3 to i64, !dbg !7024
  %call = call i64 @send(i32 %1, i8* %2, i64 %conv, i32 16384), !dbg !7025
  ret i64 %call, !dbg !7026
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_receive(%struct._modbus.13* %ctx, i8* %req) #0 !dbg !7027 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %req.addr = alloca i8*, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7028, metadata !451), !dbg !7029
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !7030, metadata !451), !dbg !7031
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7032
  %1 = load i8*, i8** %req.addr, align 8, !dbg !7033
  %call = call i32 bitcast (i32 (%struct._modbus*, i8*, i32)* @_modbus_receive_msg to i32 (%struct._modbus.13*, i8*, i32)*)(%struct._modbus.13* %0, i8* %1, i32 0), !dbg !7034
  ret i32 %call, !dbg !7035
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @_modbus_tcp_recv(%struct._modbus.13* %ctx, i8* %rsp, i32 %rsp_length) #0 !dbg !7036 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %rsp.addr = alloca i8*, align 8
  %rsp_length.addr = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7037, metadata !451), !dbg !7038
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !7039, metadata !451), !dbg !7040
  store i32 %rsp_length, i32* %rsp_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rsp_length.addr, metadata !7041, metadata !451), !dbg !7042
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7043
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 1, !dbg !7044
  %1 = load i32, i32* %s, align 4, !dbg !7044
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !7045
  %3 = load i32, i32* %rsp_length.addr, align 4, !dbg !7046
  %conv = sext i32 %3 to i64, !dbg !7046
  %call = call i64 @recv(i32 %1, i8* %2, i64 %conv, i32 0), !dbg !7047
  ret i64 %call, !dbg !7048
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_check_integrity(%struct._modbus.13* %ctx, i8* %msg, i32 %msg_length) #0 !dbg !7049 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %msg.addr = alloca i8*, align 8
  %msg_length.addr = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7050, metadata !451), !dbg !7051
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !7052, metadata !451), !dbg !7053
  store i32 %msg_length, i32* %msg_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %msg_length.addr, metadata !7054, metadata !451), !dbg !7055
  %0 = load i32, i32* %msg_length.addr, align 4, !dbg !7056
  ret i32 %0, !dbg !7057
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_pre_check_confirmation(%struct._modbus.13* %ctx, i8* %req, i8* %rsp, i32 %rsp_length) #0 !dbg !7058 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %req.addr = alloca i8*, align 8
  %rsp.addr = alloca i8*, align 8
  %rsp_length.addr = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7059, metadata !451), !dbg !7060
  store i8* %req, i8** %req.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %req.addr, metadata !7061, metadata !451), !dbg !7062
  store i8* %rsp, i8** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rsp.addr, metadata !7063, metadata !451), !dbg !7064
  store i32 %rsp_length, i32* %rsp_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rsp_length.addr, metadata !7065, metadata !451), !dbg !7066
  %0 = load i8*, i8** %req.addr, align 8, !dbg !7067
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !7067
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7067
  %conv = zext i8 %1 to i32, !dbg !7067
  %2 = load i8*, i8** %rsp.addr, align 8, !dbg !7069
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !7069
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !7069
  %conv2 = zext i8 %3 to i32, !dbg !7069
  %cmp = icmp ne i32 %conv, %conv2, !dbg !7070
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7071

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8*, i8** %req.addr, align 8, !dbg !7072
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !7072
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !7072
  %conv5 = zext i8 %5 to i32, !dbg !7072
  %6 = load i8*, i8** %rsp.addr, align 8, !dbg !7073
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i64 1, !dbg !7073
  %7 = load i8, i8* %arrayidx6, align 1, !dbg !7073
  %conv7 = zext i8 %7 to i32, !dbg !7073
  %cmp8 = icmp ne i32 %conv5, %conv7, !dbg !7074
  br i1 %cmp8, label %if.then, label %if.end22, !dbg !7075

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7076
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 2, !dbg !7079
  %9 = load i32, i32* %debug, align 8, !dbg !7079
  %tobool = icmp ne i32 %9, 0, !dbg !7076
  br i1 %tobool, label %if.then10, label %if.end, !dbg !7080

if.then10:                                        ; preds = %if.then
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7081
  %11 = load i8*, i8** %rsp.addr, align 8, !dbg !7083
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !7083
  %12 = load i8, i8* %arrayidx11, align 1, !dbg !7083
  %conv12 = zext i8 %12 to i32, !dbg !7083
  %shl = shl i32 %conv12, 8, !dbg !7084
  %13 = load i8*, i8** %rsp.addr, align 8, !dbg !7085
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !7085
  %14 = load i8, i8* %arrayidx13, align 1, !dbg !7085
  %conv14 = zext i8 %14 to i32, !dbg !7085
  %add = add nsw i32 %shl, %conv14, !dbg !7086
  %15 = load i8*, i8** %req.addr, align 8, !dbg !7087
  %arrayidx15 = getelementptr inbounds i8, i8* %15, i64 0, !dbg !7087
  %16 = load i8, i8* %arrayidx15, align 1, !dbg !7087
  %conv16 = zext i8 %16 to i32, !dbg !7087
  %shl17 = shl i32 %conv16, 8, !dbg !7088
  %17 = load i8*, i8** %req.addr, align 8, !dbg !7089
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !7089
  %18 = load i8, i8* %arrayidx18, align 1, !dbg !7089
  %conv19 = zext i8 %18 to i32, !dbg !7089
  %add20 = add nsw i32 %shl17, %conv19, !dbg !7090
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.14.82, i32 0, i32 0), i32 %add, i32 %add20), !dbg !7091
  br label %if.end, !dbg !7092

if.end:                                           ; preds = %if.then10, %if.then
  %call21 = call i32* @__errno_location() #9, !dbg !7093
  store i32 112345691, i32* %call21, align 4, !dbg !7094
  store i32 -1, i32* %retval, align 4, !dbg !7095
  br label %return, !dbg !7095

if.end22:                                         ; preds = %lor.lhs.false
  %19 = load i8*, i8** %rsp.addr, align 8, !dbg !7096
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i64 2, !dbg !7096
  %20 = load i8, i8* %arrayidx23, align 1, !dbg !7096
  %conv24 = zext i8 %20 to i32, !dbg !7096
  %cmp25 = icmp ne i32 %conv24, 0, !dbg !7098
  br i1 %cmp25, label %land.lhs.true, label %if.end44, !dbg !7099

land.lhs.true:                                    ; preds = %if.end22
  %21 = load i8*, i8** %rsp.addr, align 8, !dbg !7100
  %arrayidx27 = getelementptr inbounds i8, i8* %21, i64 3, !dbg !7100
  %22 = load i8, i8* %arrayidx27, align 1, !dbg !7100
  %conv28 = zext i8 %22 to i32, !dbg !7100
  %cmp29 = icmp ne i32 %conv28, 0, !dbg !7101
  br i1 %cmp29, label %if.then31, label %if.end44, !dbg !7102

if.then31:                                        ; preds = %land.lhs.true
  %23 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7103
  %debug32 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %23, i32 0, i32 2, !dbg !7106
  %24 = load i32, i32* %debug32, align 8, !dbg !7106
  %tobool33 = icmp ne i32 %24, 0, !dbg !7103
  br i1 %tobool33, label %if.then34, label %if.end42, !dbg !7107

if.then34:                                        ; preds = %if.then31
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7108
  %26 = load i8*, i8** %rsp.addr, align 8, !dbg !7110
  %arrayidx35 = getelementptr inbounds i8, i8* %26, i64 2, !dbg !7110
  %27 = load i8, i8* %arrayidx35, align 1, !dbg !7110
  %conv36 = zext i8 %27 to i32, !dbg !7110
  %shl37 = shl i32 %conv36, 8, !dbg !7111
  %28 = load i8*, i8** %rsp.addr, align 8, !dbg !7112
  %arrayidx38 = getelementptr inbounds i8, i8* %28, i64 3, !dbg !7112
  %29 = load i8, i8* %arrayidx38, align 1, !dbg !7112
  %conv39 = zext i8 %29 to i32, !dbg !7112
  %add40 = add nsw i32 %shl37, %conv39, !dbg !7113
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.15.83, i32 0, i32 0), i32 %add40), !dbg !7114
  br label %if.end42, !dbg !7115

if.end42:                                         ; preds = %if.then34, %if.then31
  %call43 = call i32* @__errno_location() #9, !dbg !7116
  store i32 112345691, i32* %call43, align 4, !dbg !7117
  store i32 -1, i32* %retval, align 4, !dbg !7118
  br label %return, !dbg !7118

if.end44:                                         ; preds = %land.lhs.true, %if.end22
  store i32 0, i32* %retval, align 4, !dbg !7119
  br label %return, !dbg !7119

return:                                           ; preds = %if.end44, %if.end42, %if.end
  %30 = load i32, i32* %retval, align 4, !dbg !7120
  ret i32 %30, !dbg !7120
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_connect(%struct._modbus.13* %ctx) #0 !dbg !7121 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %rc = alloca i32, align 4
  %addr = alloca %struct.sockaddr_in, align 4
  %ctx_tcp = alloca %struct._modbus_tcp*, align 8
  %flags = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7122, metadata !451), !dbg !7123
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !7124, metadata !451), !dbg !7125
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in* %addr, metadata !7126, metadata !451), !dbg !7127
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp** %ctx_tcp, metadata !7128, metadata !451), !dbg !7129
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7130
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 8, !dbg !7131
  %1 = load i8*, i8** %backend_data, align 8, !dbg !7131
  %2 = bitcast i8* %1 to %struct._modbus_tcp*, !dbg !7130
  store %struct._modbus_tcp* %2, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !7129
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !7132, metadata !451), !dbg !7133
  store i32 1, i32* %flags, align 4, !dbg !7133
  %3 = load i32, i32* %flags, align 4, !dbg !7134
  %or = or i32 %3, 524288, !dbg !7134
  store i32 %or, i32* %flags, align 4, !dbg !7134
  %4 = load i32, i32* %flags, align 4, !dbg !7135
  %or1 = or i32 %4, 2048, !dbg !7135
  store i32 %or1, i32* %flags, align 4, !dbg !7135
  %5 = load i32, i32* %flags, align 4, !dbg !7136
  %call = call i32 @socket(i32 2, i32 %5, i32 0) #6, !dbg !7137
  %6 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7138
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %6, i32 0, i32 1, !dbg !7139
  store i32 %call, i32* %s, align 4, !dbg !7140
  %7 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7141
  %s2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %7, i32 0, i32 1, !dbg !7143
  %8 = load i32, i32* %s2, align 4, !dbg !7143
  %cmp = icmp eq i32 %8, -1, !dbg !7144
  br i1 %cmp, label %if.then, label %if.end, !dbg !7145

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7146
  br label %return, !dbg !7146

if.end:                                           ; preds = %entry
  %9 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7148
  %s3 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %9, i32 0, i32 1, !dbg !7149
  %10 = load i32, i32* %s3, align 4, !dbg !7149
  %call4 = call i32 @_modbus_tcp_set_ipv4_options(i32 %10), !dbg !7150
  store i32 %call4, i32* %rc, align 4, !dbg !7151
  %11 = load i32, i32* %rc, align 4, !dbg !7152
  %cmp5 = icmp eq i32 %11, -1, !dbg !7154
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !7155

if.then6:                                         ; preds = %if.end
  %12 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7156
  %s7 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %12, i32 0, i32 1, !dbg !7158
  %13 = load i32, i32* %s7, align 4, !dbg !7158
  %call8 = call i32 @close(i32 %13), !dbg !7159
  %14 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7160
  %s9 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %14, i32 0, i32 1, !dbg !7161
  store i32 -1, i32* %s9, align 4, !dbg !7162
  store i32 -1, i32* %retval, align 4, !dbg !7163
  br label %return, !dbg !7163

if.end10:                                         ; preds = %if.end
  %15 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7164
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %15, i32 0, i32 2, !dbg !7166
  %16 = load i32, i32* %debug, align 8, !dbg !7166
  %tobool = icmp ne i32 %16, 0, !dbg !7164
  br i1 %tobool, label %if.then11, label %if.end13, !dbg !7167

if.then11:                                        ; preds = %if.end10
  %17 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !7168
  %ip = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %17, i32 0, i32 2, !dbg !7170
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %ip, i32 0, i32 0, !dbg !7168
  %18 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !7171
  %port = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %18, i32 0, i32 1, !dbg !7172
  %19 = load i32, i32* %port, align 4, !dbg !7172
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16.81, i32 0, i32 0), i8* %arraydecay, i32 %19), !dbg !7173
  br label %if.end13, !dbg !7174

if.end13:                                         ; preds = %if.then11, %if.end10
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 0, !dbg !7175
  store i16 2, i16* %sin_family, align 4, !dbg !7176
  %20 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !7177
  %port14 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %20, i32 0, i32 1, !dbg !7178
  %21 = load i32, i32* %port14, align 4, !dbg !7178
  %conv = trunc i32 %21 to i16, !dbg !7177
  %call15 = call zeroext i16 @htons(i16 zeroext %conv) #9, !dbg !7179
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 1, !dbg !7180
  store i16 %call15, i16* %sin_port, align 2, !dbg !7181
  %22 = load %struct._modbus_tcp*, %struct._modbus_tcp** %ctx_tcp, align 8, !dbg !7182
  %ip16 = getelementptr inbounds %struct._modbus_tcp, %struct._modbus_tcp* %22, i32 0, i32 2, !dbg !7183
  %arraydecay17 = getelementptr inbounds [16 x i8], [16 x i8]* %ip16, i32 0, i32 0, !dbg !7182
  %call18 = call i32 @inet_addr(i8* %arraydecay17) #6, !dbg !7184
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %addr, i32 0, i32 2, !dbg !7185
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0, !dbg !7186
  store i32 %call18, i32* %s_addr, align 4, !dbg !7187
  %23 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7188
  %s19 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %23, i32 0, i32 1, !dbg !7189
  %24 = load i32, i32* %s19, align 4, !dbg !7189
  %25 = bitcast %struct.sockaddr_in* %addr to %struct.sockaddr*, !dbg !7190
  %26 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7191
  %response_timeout = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %26, i32 0, i32 4, !dbg !7192
  %call20 = call i32 @_connect(i32 %24, %struct.sockaddr* %25, i32 16, %struct.timeval* %response_timeout), !dbg !7193
  store i32 %call20, i32* %rc, align 4, !dbg !7194
  %27 = load i32, i32* %rc, align 4, !dbg !7195
  %cmp21 = icmp eq i32 %27, -1, !dbg !7197
  br i1 %cmp21, label %if.then23, label %if.end27, !dbg !7198

if.then23:                                        ; preds = %if.end13
  %28 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7199
  %s24 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %28, i32 0, i32 1, !dbg !7201
  %29 = load i32, i32* %s24, align 4, !dbg !7201
  %call25 = call i32 @close(i32 %29), !dbg !7202
  %30 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7203
  %s26 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %30, i32 0, i32 1, !dbg !7204
  store i32 -1, i32* %s26, align 4, !dbg !7205
  store i32 -1, i32* %retval, align 4, !dbg !7206
  br label %return, !dbg !7206

if.end27:                                         ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !7207
  br label %return, !dbg !7207

return:                                           ; preds = %if.end27, %if.then23, %if.then6, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !7208
  ret i32 %31, !dbg !7208
}

; Function Attrs: noinline nounwind uwtable
define internal void @_modbus_tcp_close(%struct._modbus.13* %ctx) #0 !dbg !7209 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7210, metadata !451), !dbg !7211
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7212
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 1, !dbg !7214
  %1 = load i32, i32* %s, align 4, !dbg !7214
  %cmp = icmp ne i32 %1, -1, !dbg !7215
  br i1 %cmp, label %if.then, label %if.end, !dbg !7216

if.then:                                          ; preds = %entry
  %2 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7217
  %s1 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %2, i32 0, i32 1, !dbg !7219
  %3 = load i32, i32* %s1, align 4, !dbg !7219
  %call = call i32 @shutdown(i32 %3, i32 2) #6, !dbg !7220
  %4 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7221
  %s2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %4, i32 0, i32 1, !dbg !7222
  %5 = load i32, i32* %s2, align 4, !dbg !7222
  %call3 = call i32 @close(i32 %5), !dbg !7223
  %6 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7224
  %s4 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %6, i32 0, i32 1, !dbg !7225
  store i32 -1, i32* %s4, align 4, !dbg !7226
  br label %if.end, !dbg !7227

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7228
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_flush(%struct._modbus.13* %ctx) #0 !dbg !7229 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %rc = alloca i32, align 4
  %rc_sum = alloca i32, align 4
  %devnull = alloca [260 x i8], align 16
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7230, metadata !451), !dbg !7231
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !7232, metadata !451), !dbg !7233
  call void @llvm.dbg.declare(metadata i32* %rc_sum, metadata !7234, metadata !451), !dbg !7235
  store i32 0, i32* %rc_sum, align 4, !dbg !7235
  br label %do.body, !dbg !7236, !llvm.loop !7237

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata [260 x i8]* %devnull, metadata !7239, metadata !451), !dbg !7242
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7243
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 1, !dbg !7244
  %1 = load i32, i32* %s, align 4, !dbg !7244
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %devnull, i32 0, i32 0, !dbg !7245
  %call = call i64 @recv(i32 %1, i8* %arraydecay, i64 260, i32 64), !dbg !7246
  %conv = trunc i64 %call to i32, !dbg !7246
  store i32 %conv, i32* %rc, align 4, !dbg !7247
  %2 = load i32, i32* %rc, align 4, !dbg !7248
  %cmp = icmp sgt i32 %2, 0, !dbg !7250
  br i1 %cmp, label %if.then, label %if.end, !dbg !7251

if.then:                                          ; preds = %do.body
  %3 = load i32, i32* %rc, align 4, !dbg !7252
  %4 = load i32, i32* %rc_sum, align 4, !dbg !7254
  %add = add nsw i32 %4, %3, !dbg !7254
  store i32 %add, i32* %rc_sum, align 4, !dbg !7254
  br label %if.end, !dbg !7255

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond, !dbg !7256

do.cond:                                          ; preds = %if.end
  %5 = load i32, i32* %rc, align 4, !dbg !7257
  %cmp2 = icmp eq i32 %5, 260, !dbg !7258
  br i1 %cmp2, label %do.body, label %do.end, !dbg !7256, !llvm.loop !7237

do.end:                                           ; preds = %do.cond
  %6 = load i32, i32* %rc_sum, align 4, !dbg !7259
  ret i32 %6, !dbg !7260
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_select(%struct._modbus.13* %ctx, %struct.fd_set* %rset, %struct.timeval* %tv, i32 %length_to_read) #0 !dbg !7261 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %rset.addr = alloca %struct.fd_set*, align 8
  %tv.addr = alloca %struct.timeval*, align 8
  %length_to_read.addr = alloca i32, align 4
  %s_rc = alloca i32, align 4
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7262, metadata !451), !dbg !7263
  store %struct.fd_set* %rset, %struct.fd_set** %rset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fd_set** %rset.addr, metadata !7264, metadata !451), !dbg !7265
  store %struct.timeval* %tv, %struct.timeval** %tv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timeval** %tv.addr, metadata !7266, metadata !451), !dbg !7267
  store i32 %length_to_read, i32* %length_to_read.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length_to_read.addr, metadata !7268, metadata !451), !dbg !7269
  call void @llvm.dbg.declare(metadata i32* %s_rc, metadata !7270, metadata !451), !dbg !7271
  br label %while.cond, !dbg !7272

while.cond:                                       ; preds = %if.end10, %entry
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7273
  %s = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 1, !dbg !7274
  %1 = load i32, i32* %s, align 4, !dbg !7274
  %add = add nsw i32 %1, 1, !dbg !7275
  %2 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !7276
  %3 = load %struct.timeval*, %struct.timeval** %tv.addr, align 8, !dbg !7277
  %call = call i32 @select(i32 %add, %struct.fd_set* %2, %struct.fd_set* null, %struct.fd_set* null, %struct.timeval* %3), !dbg !7278
  store i32 %call, i32* %s_rc, align 4, !dbg !7279
  %cmp = icmp eq i32 %call, -1, !dbg !7280
  br i1 %cmp, label %while.body, label %while.end, !dbg !7272

while.body:                                       ; preds = %while.cond
  %call1 = call i32* @__errno_location() #9, !dbg !7281
  %4 = load i32, i32* %call1, align 4, !dbg !7281
  %cmp2 = icmp eq i32 %4, 4, !dbg !7284
  br i1 %cmp2, label %if.then, label %if.else, !dbg !7285

if.then:                                          ; preds = %while.body
  %5 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7286
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %5, i32 0, i32 2, !dbg !7289
  %6 = load i32, i32* %debug, align 8, !dbg !7289
  %tobool = icmp ne i32 %6, 0, !dbg !7286
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7290

if.then3:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7291
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17.80, i32 0, i32 0)), !dbg !7293
  br label %if.end, !dbg !7294

if.end:                                           ; preds = %if.then3, %if.then
  br label %do.body, !dbg !7295, !llvm.loop !7296

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %__d0, metadata !7297, metadata !451), !dbg !7299
  call void @llvm.dbg.declare(metadata i32* %__d1, metadata !7300, metadata !451), !dbg !7299
  %8 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !7299
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %8, i32 0, i32 0, !dbg !7299
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i64 0, i64 0, !dbg !7299
  %9 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #6, !dbg !7299, !srcloc !7301
  %asmresult = extractvalue { i64, i64* } %9, 0, !dbg !7299
  %asmresult5 = extractvalue { i64, i64* } %9, 1, !dbg !7299
  %10 = trunc i64 %asmresult to i32, !dbg !7299
  store i32 %10, i32* %__d0, align 4, !dbg !7299
  %11 = ptrtoint i64* %asmresult5 to i64, !dbg !7299
  %12 = trunc i64 %11 to i32, !dbg !7299
  store i32 %12, i32* %__d1, align 4, !dbg !7299
  br label %do.end, !dbg !7299

do.end:                                           ; preds = %do.body
  %13 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7302
  %s6 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %13, i32 0, i32 1, !dbg !7302
  %14 = load i32, i32* %s6, align 4, !dbg !7302
  %rem = srem i32 %14, 64, !dbg !7302
  %sh_prom = zext i32 %rem to i64, !dbg !7302
  %shl = shl i64 1, %sh_prom, !dbg !7302
  %15 = load %struct.fd_set*, %struct.fd_set** %rset.addr, align 8, !dbg !7302
  %fds_bits7 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %15, i32 0, i32 0, !dbg !7302
  %16 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7302
  %s8 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %16, i32 0, i32 1, !dbg !7302
  %17 = load i32, i32* %s8, align 4, !dbg !7302
  %div = sdiv i32 %17, 64, !dbg !7302
  %idxprom = sext i32 %div to i64, !dbg !7302
  %arrayidx9 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits7, i64 0, i64 %idxprom, !dbg !7302
  %18 = load i64, i64* %arrayidx9, align 8, !dbg !7302
  %or = or i64 %18, %shl, !dbg !7302
  store i64 %or, i64* %arrayidx9, align 8, !dbg !7302
  br label %if.end10, !dbg !7303

if.else:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !7304
  br label %return, !dbg !7304

if.end10:                                         ; preds = %do.end
  br label %while.cond, !dbg !7272, !llvm.loop !7306

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %s_rc, align 4, !dbg !7308
  %cmp11 = icmp eq i32 %19, 0, !dbg !7310
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !7311

if.then12:                                        ; preds = %while.end
  %call13 = call i32* @__errno_location() #9, !dbg !7312
  store i32 110, i32* %call13, align 4, !dbg !7314
  store i32 -1, i32* %retval, align 4, !dbg !7315
  br label %return, !dbg !7315

if.end14:                                         ; preds = %while.end
  %20 = load i32, i32* %s_rc, align 4, !dbg !7316
  store i32 %20, i32* %retval, align 4, !dbg !7317
  br label %return, !dbg !7317

return:                                           ; preds = %if.end14, %if.then12, %if.else
  %21 = load i32, i32* %retval, align 4, !dbg !7318
  ret i32 %21, !dbg !7318
}

; Function Attrs: noinline nounwind uwtable
define internal void @_modbus_tcp_free(%struct._modbus.13* %ctx) #0 !dbg !7319 {
entry:
  %ctx.addr = alloca %struct._modbus.13*, align 8
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7320, metadata !451), !dbg !7321
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7322
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 8, !dbg !7323
  %1 = load i8*, i8** %backend_data, align 8, !dbg !7323
  call void @free(i8* %1) #6, !dbg !7324
  %2 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7325
  %3 = bitcast %struct._modbus.13* %2 to i8*, !dbg !7325
  call void @free(i8* %3) #6, !dbg !7326
  ret void, !dbg !7327
}

declare i64 @recv(i32, i8*, i64, i32) #4

; Function Attrs: nounwind
declare i32 @shutdown(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_set_ipv4_options(i32 %s) #0 !dbg !7328 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  %option = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !7331, metadata !451), !dbg !7332
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !7333, metadata !451), !dbg !7334
  call void @llvm.dbg.declare(metadata i32* %option, metadata !7335, metadata !451), !dbg !7336
  store i32 1, i32* %option, align 4, !dbg !7337
  %0 = load i32, i32* %s.addr, align 4, !dbg !7338
  %1 = bitcast i32* %option to i8*, !dbg !7339
  %call = call i32 @setsockopt(i32 %0, i32 6, i32 1, i8* %1, i32 4) #6, !dbg !7340
  store i32 %call, i32* %rc, align 4, !dbg !7341
  %2 = load i32, i32* %rc, align 4, !dbg !7342
  %cmp = icmp eq i32 %2, -1, !dbg !7344
  br i1 %cmp, label %if.then, label %if.end, !dbg !7345

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7346
  br label %return, !dbg !7346

if.end:                                           ; preds = %entry
  store i32 16, i32* %option, align 4, !dbg !7348
  %3 = load i32, i32* %s.addr, align 4, !dbg !7349
  %4 = bitcast i32* %option to i8*, !dbg !7350
  %call1 = call i32 @setsockopt(i32 %3, i32 0, i32 1, i8* %4, i32 4) #6, !dbg !7351
  store i32 %call1, i32* %rc, align 4, !dbg !7352
  %5 = load i32, i32* %rc, align 4, !dbg !7353
  %cmp2 = icmp eq i32 %5, -1, !dbg !7355
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !7356

if.then3:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !7357
  br label %return, !dbg !7357

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7359
  br label %return, !dbg !7359

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7360
  ret i32 %6, !dbg !7360
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_connect(i32 %sockfd, %struct.sockaddr* %addr, i32 %addrlen, %struct.timeval* %ro_tv) #0 !dbg !7361 {
entry:
  %retval = alloca i32, align 4
  %sockfd.addr = alloca i32, align 4
  %addr.addr = alloca %struct.sockaddr*, align 8
  %addrlen.addr = alloca i32, align 4
  %ro_tv.addr = alloca %struct.timeval*, align 8
  %rc = alloca i32, align 4
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %wset = alloca %struct.fd_set, align 8
  %optval = alloca i32, align 4
  %optlen = alloca i32, align 4
  %tv = alloca %struct.timeval, align 8
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  store i32 %sockfd, i32* %sockfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sockfd.addr, metadata !7368, metadata !451), !dbg !7369
  store %struct.sockaddr* %addr, %struct.sockaddr** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr.addr, metadata !7370, metadata !451), !dbg !7371
  store i32 %addrlen, i32* %addrlen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addrlen.addr, metadata !7372, metadata !451), !dbg !7373
  store %struct.timeval* %ro_tv, %struct.timeval** %ro_tv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timeval** %ro_tv.addr, metadata !7374, metadata !451), !dbg !7375
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !7376, metadata !451), !dbg !7377
  %0 = load i32, i32* %sockfd.addr, align 4, !dbg !7378
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !7379
  %1 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !7379
  store %struct.sockaddr* %1, %struct.sockaddr** %__sockaddr__, align 8, !dbg !7379
  %2 = load i32, i32* %addrlen.addr, align 4, !dbg !7380
  %coerce.dive = getelementptr inbounds %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !7381
  %3 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !7381
  %call = call i32 @connect(i32 %0, %struct.sockaddr* %3, i32 %2), !dbg !7381
  store i32 %call, i32* %rc, align 4, !dbg !7377
  %4 = load i32, i32* %rc, align 4, !dbg !7382
  %cmp = icmp eq i32 %4, -1, !dbg !7384
  br i1 %cmp, label %land.lhs.true, label %if.end15, !dbg !7385

land.lhs.true:                                    ; preds = %entry
  %call1 = call i32* @__errno_location() #9, !dbg !7386
  %5 = load i32, i32* %call1, align 4, !dbg !7386
  %cmp2 = icmp eq i32 %5, 115, !dbg !7387
  br i1 %cmp2, label %if.then, label %if.end15, !dbg !7388

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.fd_set* %wset, metadata !7389, metadata !451), !dbg !7391
  call void @llvm.dbg.declare(metadata i32* %optval, metadata !7392, metadata !451), !dbg !7393
  call void @llvm.dbg.declare(metadata i32* %optlen, metadata !7394, metadata !451), !dbg !7395
  store i32 4, i32* %optlen, align 4, !dbg !7395
  call void @llvm.dbg.declare(metadata %struct.timeval* %tv, metadata !7396, metadata !451), !dbg !7397
  %6 = load %struct.timeval*, %struct.timeval** %ro_tv.addr, align 8, !dbg !7398
  %7 = bitcast %struct.timeval* %tv to i8*, !dbg !7399
  %8 = bitcast %struct.timeval* %6 to i8*, !dbg !7399
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 16, i32 8, i1 false), !dbg !7399
  br label %do.body, !dbg !7400, !llvm.loop !7401

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %__d0, metadata !7402, metadata !451), !dbg !7404
  call void @llvm.dbg.declare(metadata i32* %__d1, metadata !7405, metadata !451), !dbg !7404
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %wset, i32 0, i32 0, !dbg !7404
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i64 0, i64 0, !dbg !7404
  %9 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #6, !dbg !7404, !srcloc !7406
  %asmresult = extractvalue { i64, i64* } %9, 0, !dbg !7404
  %asmresult3 = extractvalue { i64, i64* } %9, 1, !dbg !7404
  %10 = trunc i64 %asmresult to i32, !dbg !7404
  store i32 %10, i32* %__d0, align 4, !dbg !7404
  %11 = ptrtoint i64* %asmresult3 to i64, !dbg !7404
  %12 = trunc i64 %11 to i32, !dbg !7404
  store i32 %12, i32* %__d1, align 4, !dbg !7404
  br label %do.end, !dbg !7404

do.end:                                           ; preds = %do.body
  %13 = load i32, i32* %sockfd.addr, align 4, !dbg !7407
  %rem = srem i32 %13, 64, !dbg !7407
  %sh_prom = zext i32 %rem to i64, !dbg !7407
  %shl = shl i64 1, %sh_prom, !dbg !7407
  %fds_bits4 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %wset, i32 0, i32 0, !dbg !7407
  %14 = load i32, i32* %sockfd.addr, align 4, !dbg !7407
  %div = sdiv i32 %14, 64, !dbg !7407
  %idxprom = sext i32 %div to i64, !dbg !7407
  %arrayidx5 = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits4, i64 0, i64 %idxprom, !dbg !7407
  %15 = load i64, i64* %arrayidx5, align 8, !dbg !7407
  %or = or i64 %15, %shl, !dbg !7407
  store i64 %or, i64* %arrayidx5, align 8, !dbg !7407
  %16 = load i32, i32* %sockfd.addr, align 4, !dbg !7408
  %add = add nsw i32 %16, 1, !dbg !7409
  %call6 = call i32 @select(i32 %add, %struct.fd_set* null, %struct.fd_set* %wset, %struct.fd_set* null, %struct.timeval* %tv), !dbg !7410
  store i32 %call6, i32* %rc, align 4, !dbg !7411
  %17 = load i32, i32* %rc, align 4, !dbg !7412
  %cmp7 = icmp sle i32 %17, 0, !dbg !7414
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !7415

if.then8:                                         ; preds = %do.end
  store i32 -1, i32* %retval, align 4, !dbg !7416
  br label %return, !dbg !7416

if.end:                                           ; preds = %do.end
  %18 = load i32, i32* %sockfd.addr, align 4, !dbg !7418
  %19 = bitcast i32* %optval to i8*, !dbg !7419
  %call9 = call i32 @getsockopt(i32 %18, i32 1, i32 4, i8* %19, i32* %optlen) #6, !dbg !7420
  store i32 %call9, i32* %rc, align 4, !dbg !7421
  %20 = load i32, i32* %rc, align 4, !dbg !7422
  %cmp10 = icmp eq i32 %20, 0, !dbg !7424
  br i1 %cmp10, label %land.lhs.true11, label %if.else, !dbg !7425

land.lhs.true11:                                  ; preds = %if.end
  %21 = load i32, i32* %optval, align 4, !dbg !7426
  %cmp12 = icmp eq i32 %21, 0, !dbg !7427
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !7428

if.then13:                                        ; preds = %land.lhs.true11
  store i32 0, i32* %retval, align 4, !dbg !7429
  br label %return, !dbg !7429

if.else:                                          ; preds = %land.lhs.true11, %if.end
  %call14 = call i32* @__errno_location() #9, !dbg !7431
  store i32 111, i32* %call14, align 4, !dbg !7433
  store i32 -1, i32* %retval, align 4, !dbg !7434
  br label %return, !dbg !7434

if.end15:                                         ; preds = %land.lhs.true, %entry
  %22 = load i32, i32* %rc, align 4, !dbg !7435
  store i32 %22, i32* %retval, align 4, !dbg !7436
  br label %return, !dbg !7436

return:                                           ; preds = %if.end15, %if.else, %if.then13, %if.then8
  %23 = load i32, i32* %retval, align 4, !dbg !7437
  ret i32 %23, !dbg !7437
}

declare i32 @connect(i32, %struct.sockaddr*, i32) #4

; Function Attrs: nounwind
declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #2

declare i64 @send(i32, i8*, i64, i32) #4

; Function Attrs: noinline nounwind uwtable
define %struct._modbus.13* @modbus_new_tcp_pi(i8* %node, i8* %service) #0 !dbg !7438 {
entry:
  %retval = alloca %struct._modbus.13*, align 8
  %node.addr = alloca i8*, align 8
  %service.addr = alloca i8*, align 8
  %ctx = alloca %struct._modbus.13*, align 8
  %ctx_tcp_pi = alloca %struct._modbus_tcp_pi*, align 8
  %dest_size = alloca i64, align 8
  %ret_size = alloca i64, align 8
  store i8* %node, i8** %node.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %node.addr, metadata !7441, metadata !451), !dbg !7442
  store i8* %service, i8** %service.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %service.addr, metadata !7443, metadata !451), !dbg !7444
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx, metadata !7445, metadata !451), !dbg !7446
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp_pi** %ctx_tcp_pi, metadata !7447, metadata !451), !dbg !7448
  call void @llvm.dbg.declare(metadata i64* %dest_size, metadata !7449, metadata !451), !dbg !7450
  call void @llvm.dbg.declare(metadata i64* %ret_size, metadata !7451, metadata !451), !dbg !7452
  %call = call noalias i8* @malloc(i64 80) #6, !dbg !7453
  %0 = bitcast i8* %call to %struct._modbus.13*, !dbg !7454
  store %struct._modbus.13* %0, %struct._modbus.13** %ctx, align 8, !dbg !7455
  %1 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7456
  %cmp = icmp eq %struct._modbus.13* %1, null, !dbg !7458
  br i1 %cmp, label %if.then, label %if.end, !dbg !7459

if.then:                                          ; preds = %entry
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7460
  br label %return, !dbg !7460

if.end:                                           ; preds = %entry
  %2 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7462
  call void bitcast (void (%struct._modbus*)* @_modbus_init_common to void (%struct._modbus.13*)*)(%struct._modbus.13* %2), !dbg !7463
  %3 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7464
  %slave = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %3, i32 0, i32 0, !dbg !7465
  store i32 255, i32* %slave, align 8, !dbg !7466
  %4 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7467
  %backend = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %4, i32 0, i32 7, !dbg !7468
  store %struct._modbus_backend.12* bitcast ({ i32, i32, i32, i32, i32 (%struct._modbus.13*, i32)*, i32 (%struct._modbus.13*, i32, i32, i32, i8*)*, i32 (%struct._sft*, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*)*, i64 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i32)*, i32 (%struct._modbus.13*, i8*, i8*, i32)*, i32 (%struct._modbus.13*)*, void (%struct._modbus.13*)*, i32 (%struct._modbus.13*)*, i32 (%struct._modbus.13*, %struct.fd_set*, %struct.timeval*, i32)*, void (%struct._modbus.13*)* }* @_modbus_tcp_pi_backend to %struct._modbus_backend.12*), %struct._modbus_backend.12** %backend, align 8, !dbg !7469
  %call1 = call noalias i8* @malloc(i64 1068) #6, !dbg !7470
  %5 = bitcast i8* %call1 to %struct._modbus_tcp_pi*, !dbg !7471
  %6 = bitcast %struct._modbus_tcp_pi* %5 to i8*, !dbg !7471
  %7 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7472
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %7, i32 0, i32 8, !dbg !7473
  store i8* %6, i8** %backend_data, align 8, !dbg !7474
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7475
  %backend_data2 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 8, !dbg !7477
  %9 = load i8*, i8** %backend_data2, align 8, !dbg !7477
  %cmp3 = icmp eq i8* %9, null, !dbg !7478
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !7479

if.then4:                                         ; preds = %if.end
  %10 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7480
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %10), !dbg !7482
  %call5 = call i32* @__errno_location() #9, !dbg !7483
  store i32 12, i32* %call5, align 4, !dbg !7484
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7485
  br label %return, !dbg !7485

if.end6:                                          ; preds = %if.end
  %11 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7486
  %backend_data7 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %11, i32 0, i32 8, !dbg !7487
  %12 = load i8*, i8** %backend_data7, align 8, !dbg !7487
  %13 = bitcast i8* %12 to %struct._modbus_tcp_pi*, !dbg !7488
  store %struct._modbus_tcp_pi* %13, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7489
  %14 = load i8*, i8** %node.addr, align 8, !dbg !7490
  %cmp8 = icmp eq i8* %14, null, !dbg !7492
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !7493

if.then9:                                         ; preds = %if.end6
  %15 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7494
  %node10 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %15, i32 0, i32 2, !dbg !7496
  %arrayidx = getelementptr inbounds [1025 x i8], [1025 x i8]* %node10, i64 0, i64 0, !dbg !7494
  store i8 0, i8* %arrayidx, align 4, !dbg !7497
  br label %if.end23, !dbg !7498

if.else:                                          ; preds = %if.end6
  store i64 1025, i64* %dest_size, align 8, !dbg !7499
  %16 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7501
  %node11 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %16, i32 0, i32 2, !dbg !7502
  %arraydecay = getelementptr inbounds [1025 x i8], [1025 x i8]* %node11, i32 0, i32 0, !dbg !7501
  %17 = load i8*, i8** %node.addr, align 8, !dbg !7503
  %18 = load i64, i64* %dest_size, align 8, !dbg !7504
  %call12 = call i64 @strlcpy(i8* %arraydecay, i8* %17, i64 %18), !dbg !7505
  store i64 %call12, i64* %ret_size, align 8, !dbg !7506
  %19 = load i64, i64* %ret_size, align 8, !dbg !7507
  %cmp13 = icmp eq i64 %19, 0, !dbg !7509
  br i1 %cmp13, label %if.then14, label %if.end17, !dbg !7510

if.then14:                                        ; preds = %if.else
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7511
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10.84, i32 0, i32 0)), !dbg !7513
  %21 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7514
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %21), !dbg !7515
  %call16 = call i32* @__errno_location() #9, !dbg !7516
  store i32 22, i32* %call16, align 4, !dbg !7517
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7518
  br label %return, !dbg !7518

if.end17:                                         ; preds = %if.else
  %22 = load i64, i64* %ret_size, align 8, !dbg !7519
  %23 = load i64, i64* %dest_size, align 8, !dbg !7521
  %cmp18 = icmp uge i64 %22, %23, !dbg !7522
  br i1 %cmp18, label %if.then19, label %if.end22, !dbg !7523

if.then19:                                        ; preds = %if.end17
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7524
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11.85, i32 0, i32 0)), !dbg !7526
  %25 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7527
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %25), !dbg !7528
  %call21 = call i32* @__errno_location() #9, !dbg !7529
  store i32 22, i32* %call21, align 4, !dbg !7530
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7531
  br label %return, !dbg !7531

if.end22:                                         ; preds = %if.end17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then9
  %26 = load i8*, i8** %service.addr, align 8, !dbg !7532
  %cmp24 = icmp ne i8* %26, null, !dbg !7534
  br i1 %cmp24, label %if.then25, label %if.else29, !dbg !7535

if.then25:                                        ; preds = %if.end23
  store i64 32, i64* %dest_size, align 8, !dbg !7536
  %27 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7538
  %service26 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %27, i32 0, i32 3, !dbg !7539
  %arraydecay27 = getelementptr inbounds [32 x i8], [32 x i8]* %service26, i32 0, i32 0, !dbg !7538
  %28 = load i8*, i8** %service.addr, align 8, !dbg !7540
  %29 = load i64, i64* %dest_size, align 8, !dbg !7541
  %call28 = call i64 @strlcpy(i8* %arraydecay27, i8* %28, i64 %29), !dbg !7542
  store i64 %call28, i64* %ret_size, align 8, !dbg !7543
  br label %if.end30, !dbg !7544

if.else29:                                        ; preds = %if.end23
  store i64 0, i64* %ret_size, align 8, !dbg !7545
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.then25
  %30 = load i64, i64* %ret_size, align 8, !dbg !7547
  %cmp31 = icmp eq i64 %30, 0, !dbg !7549
  br i1 %cmp31, label %if.then32, label %if.end35, !dbg !7550

if.then32:                                        ; preds = %if.end30
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7551
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12.86, i32 0, i32 0)), !dbg !7553
  %32 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7554
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %32), !dbg !7555
  %call34 = call i32* @__errno_location() #9, !dbg !7556
  store i32 22, i32* %call34, align 4, !dbg !7557
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7558
  br label %return, !dbg !7558

if.end35:                                         ; preds = %if.end30
  %33 = load i64, i64* %ret_size, align 8, !dbg !7559
  %34 = load i64, i64* %dest_size, align 8, !dbg !7561
  %cmp36 = icmp uge i64 %33, %34, !dbg !7562
  br i1 %cmp36, label %if.then37, label %if.end40, !dbg !7563

if.then37:                                        ; preds = %if.end35
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7564
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13.87, i32 0, i32 0)), !dbg !7566
  %36 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7567
  call void bitcast (void (%struct._modbus*)* @modbus_free to void (%struct._modbus.13*)*)(%struct._modbus.13* %36), !dbg !7568
  %call39 = call i32* @__errno_location() #9, !dbg !7569
  store i32 22, i32* %call39, align 4, !dbg !7570
  store %struct._modbus.13* null, %struct._modbus.13** %retval, align 8, !dbg !7571
  br label %return, !dbg !7571

if.end40:                                         ; preds = %if.end35
  %37 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7572
  %t_id = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %37, i32 0, i32 0, !dbg !7573
  store i16 0, i16* %t_id, align 4, !dbg !7574
  %38 = load %struct._modbus.13*, %struct._modbus.13** %ctx, align 8, !dbg !7575
  store %struct._modbus.13* %38, %struct._modbus.13** %retval, align 8, !dbg !7576
  br label %return, !dbg !7576

return:                                           ; preds = %if.end40, %if.then37, %if.then32, %if.then19, %if.then14, %if.then4, %if.then
  %39 = load %struct._modbus.13*, %struct._modbus.13** %retval, align 8, !dbg !7577
  ret %struct._modbus.13* %39, !dbg !7577
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @_modbus_tcp_pi_connect(%struct._modbus.13* %ctx) #0 !dbg !7578 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct._modbus.13*, align 8
  %rc = alloca i32, align 4
  %ai_list = alloca %struct.addrinfo*, align 8
  %ai_ptr = alloca %struct.addrinfo*, align 8
  %ai_hints = alloca %struct.addrinfo, align 8
  %ctx_tcp_pi = alloca %struct._modbus_tcp_pi*, align 8
  %flags = alloca i32, align 4
  %s = alloca i32, align 4
  store %struct._modbus.13* %ctx, %struct._modbus.13** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._modbus.13** %ctx.addr, metadata !7579, metadata !451), !dbg !7580
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !7581, metadata !451), !dbg !7582
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %ai_list, metadata !7583, metadata !451), !dbg !7584
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %ai_ptr, metadata !7585, metadata !451), !dbg !7586
  call void @llvm.dbg.declare(metadata %struct.addrinfo* %ai_hints, metadata !7587, metadata !451), !dbg !7588
  call void @llvm.dbg.declare(metadata %struct._modbus_tcp_pi** %ctx_tcp_pi, metadata !7589, metadata !451), !dbg !7590
  %0 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7591
  %backend_data = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %0, i32 0, i32 8, !dbg !7592
  %1 = load i8*, i8** %backend_data, align 8, !dbg !7592
  %2 = bitcast i8* %1 to %struct._modbus_tcp_pi*, !dbg !7591
  store %struct._modbus_tcp_pi* %2, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7590
  %3 = bitcast %struct.addrinfo* %ai_hints to i8*, !dbg !7593
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 48, i32 8, i1 false), !dbg !7593
  %ai_flags = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 0, !dbg !7594
  %4 = load i32, i32* %ai_flags, align 8, !dbg !7595
  %or = or i32 %4, 32, !dbg !7595
  store i32 %or, i32* %ai_flags, align 8, !dbg !7595
  %ai_family = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 1, !dbg !7596
  store i32 0, i32* %ai_family, align 4, !dbg !7597
  %ai_socktype = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 2, !dbg !7598
  store i32 1, i32* %ai_socktype, align 8, !dbg !7599
  %ai_addr = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 5, !dbg !7600
  store %struct.sockaddr* null, %struct.sockaddr** %ai_addr, align 8, !dbg !7601
  %ai_canonname = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 6, !dbg !7602
  store i8* null, i8** %ai_canonname, align 8, !dbg !7603
  %ai_next = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai_hints, i32 0, i32 7, !dbg !7604
  store %struct.addrinfo* null, %struct.addrinfo** %ai_next, align 8, !dbg !7605
  store %struct.addrinfo* null, %struct.addrinfo** %ai_list, align 8, !dbg !7606
  %5 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7607
  %node = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %5, i32 0, i32 2, !dbg !7608
  %arraydecay = getelementptr inbounds [1025 x i8], [1025 x i8]* %node, i32 0, i32 0, !dbg !7607
  %6 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7609
  %service = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %6, i32 0, i32 3, !dbg !7610
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %service, i32 0, i32 0, !dbg !7609
  %call = call i32 @getaddrinfo(i8* %arraydecay, i8* %arraydecay1, %struct.addrinfo* %ai_hints, %struct.addrinfo** %ai_list), !dbg !7611
  store i32 %call, i32* %rc, align 4, !dbg !7612
  %7 = load i32, i32* %rc, align 4, !dbg !7613
  %cmp = icmp ne i32 %7, 0, !dbg !7615
  br i1 %cmp, label %if.then, label %if.end6, !dbg !7616

if.then:                                          ; preds = %entry
  %8 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7617
  %debug = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %8, i32 0, i32 2, !dbg !7620
  %9 = load i32, i32* %debug, align 8, !dbg !7620
  %tobool = icmp ne i32 %9, 0, !dbg !7617
  br i1 %tobool, label %if.then2, label %if.end, !dbg !7621

if.then2:                                         ; preds = %if.then
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7622
  %11 = load i32, i32* %rc, align 4, !dbg !7624
  %call3 = call i8* @gai_strerror(i32 %11) #6, !dbg !7625
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1.70, i32 0, i32 0), i8* %call3), !dbg !7626
  br label %if.end, !dbg !7627

if.end:                                           ; preds = %if.then2, %if.then
  %call5 = call i32* @__errno_location() #9, !dbg !7628
  store i32 111, i32* %call5, align 4, !dbg !7629
  store i32 -1, i32* %retval, align 4, !dbg !7630
  br label %return, !dbg !7630

if.end6:                                          ; preds = %entry
  %12 = load %struct.addrinfo*, %struct.addrinfo** %ai_list, align 8, !dbg !7631
  store %struct.addrinfo* %12, %struct.addrinfo** %ai_ptr, align 8, !dbg !7633
  br label %for.cond, !dbg !7634

for.cond:                                         ; preds = %for.inc, %if.end6
  %13 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7635
  %cmp7 = icmp ne %struct.addrinfo* %13, null, !dbg !7637
  br i1 %cmp7, label %for.body, label %for.end, !dbg !7638

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !7639, metadata !451), !dbg !7641
  %14 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7642
  %ai_socktype8 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %14, i32 0, i32 2, !dbg !7643
  %15 = load i32, i32* %ai_socktype8, align 8, !dbg !7643
  store i32 %15, i32* %flags, align 4, !dbg !7641
  call void @llvm.dbg.declare(metadata i32* %s, metadata !7644, metadata !451), !dbg !7645
  %16 = load i32, i32* %flags, align 4, !dbg !7646
  %or9 = or i32 %16, 524288, !dbg !7646
  store i32 %or9, i32* %flags, align 4, !dbg !7646
  %17 = load i32, i32* %flags, align 4, !dbg !7647
  %or10 = or i32 %17, 2048, !dbg !7647
  store i32 %or10, i32* %flags, align 4, !dbg !7647
  %18 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7648
  %ai_family11 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %18, i32 0, i32 1, !dbg !7649
  %19 = load i32, i32* %ai_family11, align 4, !dbg !7649
  %20 = load i32, i32* %flags, align 4, !dbg !7650
  %21 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7651
  %ai_protocol = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %21, i32 0, i32 3, !dbg !7652
  %22 = load i32, i32* %ai_protocol, align 4, !dbg !7652
  %call12 = call i32 @socket(i32 %19, i32 %20, i32 %22) #6, !dbg !7653
  store i32 %call12, i32* %s, align 4, !dbg !7654
  %23 = load i32, i32* %s, align 4, !dbg !7655
  %cmp13 = icmp slt i32 %23, 0, !dbg !7657
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !7658

if.then14:                                        ; preds = %for.body
  br label %for.inc, !dbg !7659

if.end15:                                         ; preds = %for.body
  %24 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7660
  %ai_family16 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %24, i32 0, i32 1, !dbg !7662
  %25 = load i32, i32* %ai_family16, align 4, !dbg !7662
  %cmp17 = icmp eq i32 %25, 2, !dbg !7663
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !7664

if.then18:                                        ; preds = %if.end15
  %26 = load i32, i32* %s, align 4, !dbg !7665
  %call19 = call i32 @_modbus_tcp_set_ipv4_options(i32 %26), !dbg !7666
  br label %if.end20, !dbg !7666

if.end20:                                         ; preds = %if.then18, %if.end15
  %27 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7667
  %debug21 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %27, i32 0, i32 2, !dbg !7669
  %28 = load i32, i32* %debug21, align 8, !dbg !7669
  %tobool22 = icmp ne i32 %28, 0, !dbg !7667
  br i1 %tobool22, label %if.then23, label %if.end29, !dbg !7670

if.then23:                                        ; preds = %if.end20
  %29 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7671
  %node24 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %29, i32 0, i32 2, !dbg !7673
  %arraydecay25 = getelementptr inbounds [1025 x i8], [1025 x i8]* %node24, i32 0, i32 0, !dbg !7671
  %30 = load %struct._modbus_tcp_pi*, %struct._modbus_tcp_pi** %ctx_tcp_pi, align 8, !dbg !7674
  %service26 = getelementptr inbounds %struct._modbus_tcp_pi, %struct._modbus_tcp_pi* %30, i32 0, i32 3, !dbg !7675
  %arraydecay27 = getelementptr inbounds [32 x i8], [32 x i8]* %service26, i32 0, i32 0, !dbg !7674
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18.88, i32 0, i32 0), i8* %arraydecay25, i8* %arraydecay27), !dbg !7676
  br label %if.end29, !dbg !7677

if.end29:                                         ; preds = %if.then23, %if.end20
  %31 = load i32, i32* %s, align 4, !dbg !7678
  %32 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7679
  %ai_addr30 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %32, i32 0, i32 5, !dbg !7680
  %33 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr30, align 8, !dbg !7680
  %34 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7681
  %ai_addrlen = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %34, i32 0, i32 4, !dbg !7682
  %35 = load i32, i32* %ai_addrlen, align 8, !dbg !7682
  %36 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7683
  %response_timeout = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %36, i32 0, i32 4, !dbg !7684
  %call31 = call i32 @_connect(i32 %31, %struct.sockaddr* %33, i32 %35, %struct.timeval* %response_timeout), !dbg !7685
  store i32 %call31, i32* %rc, align 4, !dbg !7686
  %37 = load i32, i32* %rc, align 4, !dbg !7687
  %cmp32 = icmp eq i32 %37, -1, !dbg !7689
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !7690

if.then33:                                        ; preds = %if.end29
  %38 = load i32, i32* %s, align 4, !dbg !7691
  %call34 = call i32 @close(i32 %38), !dbg !7693
  br label %for.inc, !dbg !7694

if.end35:                                         ; preds = %if.end29
  %39 = load i32, i32* %s, align 4, !dbg !7695
  %40 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7696
  %s36 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %40, i32 0, i32 1, !dbg !7697
  store i32 %39, i32* %s36, align 4, !dbg !7698
  br label %for.end, !dbg !7699

for.inc:                                          ; preds = %if.then33, %if.then14
  %41 = load %struct.addrinfo*, %struct.addrinfo** %ai_ptr, align 8, !dbg !7700
  %ai_next37 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %41, i32 0, i32 7, !dbg !7701
  %42 = load %struct.addrinfo*, %struct.addrinfo** %ai_next37, align 8, !dbg !7701
  store %struct.addrinfo* %42, %struct.addrinfo** %ai_ptr, align 8, !dbg !7702
  br label %for.cond, !dbg !7703, !llvm.loop !7704

for.end:                                          ; preds = %if.end35, %for.cond
  %43 = load %struct.addrinfo*, %struct.addrinfo** %ai_list, align 8, !dbg !7706
  call void @freeaddrinfo(%struct.addrinfo* %43) #6, !dbg !7707
  %44 = load %struct._modbus.13*, %struct._modbus.13** %ctx.addr, align 8, !dbg !7708
  %s38 = getelementptr inbounds %struct._modbus.13, %struct._modbus.13* %44, i32 0, i32 1, !dbg !7710
  %45 = load i32, i32* %s38, align 4, !dbg !7710
  %cmp39 = icmp slt i32 %45, 0, !dbg !7711
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !7712

if.then40:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !7713
  br label %return, !dbg !7713

if.end41:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !7715
  br label %return, !dbg !7715

return:                                           ; preds = %if.end41, %if.then40, %if.end
  %46 = load i32, i32* %retval, align 4, !dbg !7716
  ret i32 %46, !dbg !7716
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }

!llvm.dbg.cu = !{!2, !438, !77, !237}
!llvm.ident = !{!442, !442, !442, !442}
!llvm.module.flags = !{!443, !444, !445, !446}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "libmodbus_version_major", scope: !2, file: !3, line: 30, type: !71, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !39, globals: !68)
!3 = !DIFile(filename: "../../src/modbus.c", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!4 = !{!5, !10, !15, !21, !35}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 52, size: 32, elements: !7)
!6 = !DIFile(filename: "../../src/modbus-private.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!7 = !{!8, !9}
!8 = !DIEnumerator(name: "MSG_INDICATION", value: 0)
!9 = !DIEnumerator(name: "MSG_CONFIRMATION", value: 1)
!10 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 38, size: 32, elements: !11)
!11 = !{!12, !13, !14}
!12 = !DIEnumerator(name: "_STEP_FUNCTION", value: 0)
!13 = !DIEnumerator(name: "_STEP_META", value: 1)
!14 = !DIEnumerator(name: "_STEP_DATA", value: 2)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 172, size: 32, elements: !17)
!16 = !DIFile(filename: "../../src/modbus.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!17 = !{!18, !19, !20}
!18 = !DIEnumerator(name: "MODBUS_ERROR_RECOVERY_NONE", value: 0)
!19 = !DIEnumerator(name: "MODBUS_ERROR_RECOVERY_LINK", value: 2)
!20 = !DIEnumerator(name: "MODBUS_ERROR_RECOVERY_PROTOCOL", value: 4)
!21 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 117, size: 32, elements: !22)
!22 = !{!23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34}
!23 = !DIEnumerator(name: "MODBUS_EXCEPTION_ILLEGAL_FUNCTION", value: 1)
!24 = !DIEnumerator(name: "MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS", value: 2)
!25 = !DIEnumerator(name: "MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE", value: 3)
!26 = !DIEnumerator(name: "MODBUS_EXCEPTION_SLAVE_OR_SERVER_FAILURE", value: 4)
!27 = !DIEnumerator(name: "MODBUS_EXCEPTION_ACKNOWLEDGE", value: 5)
!28 = !DIEnumerator(name: "MODBUS_EXCEPTION_SLAVE_OR_SERVER_BUSY", value: 6)
!29 = !DIEnumerator(name: "MODBUS_EXCEPTION_NEGATIVE_ACKNOWLEDGE", value: 7)
!30 = !DIEnumerator(name: "MODBUS_EXCEPTION_MEMORY_PARITY", value: 8)
!31 = !DIEnumerator(name: "MODBUS_EXCEPTION_NOT_DEFINED", value: 9)
!32 = !DIEnumerator(name: "MODBUS_EXCEPTION_GATEWAY_PATH", value: 10)
!33 = !DIEnumerator(name: "MODBUS_EXCEPTION_GATEWAY_TARGET", value: 11)
!34 = !DIEnumerator(name: "MODBUS_EXCEPTION_MAX", value: 12)
!35 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 42, size: 32, elements: !36)
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "_MODBUS_BACKEND_TYPE_RTU", value: 0)
!38 = !DIEnumerator(name: "_MODBUS_BACKEND_TYPE_TCP", value: 1)
!39 = !{!40, !41, !44, !45, !48, !61, !64, !43}
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fd_mask", file: !42, line: 54, baseType: !43)
!42 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/select.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!43 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!44 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !46, line: 48, baseType: !47)
!46 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!47 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!48 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !49, size: 64)
!49 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_mapping_t", file: !16, line: 170, baseType: !50)
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !16, line: 157, size: 512, elements: !51)
!51 = !{!52, !53, !54, !55, !56, !57, !58, !59, !60, !62, !63, !67}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bits", scope: !50, file: !16, line: 158, baseType: !44, size: 32)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "start_bits", scope: !50, file: !16, line: 159, baseType: !44, size: 32, offset: 32)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "nb_input_bits", scope: !50, file: !16, line: 160, baseType: !44, size: 32, offset: 64)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "start_input_bits", scope: !50, file: !16, line: 161, baseType: !44, size: 32, offset: 96)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "nb_input_registers", scope: !50, file: !16, line: 162, baseType: !44, size: 32, offset: 128)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "start_input_registers", scope: !50, file: !16, line: 163, baseType: !44, size: 32, offset: 160)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "nb_registers", scope: !50, file: !16, line: 164, baseType: !44, size: 32, offset: 192)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "start_registers", scope: !50, file: !16, line: 165, baseType: !44, size: 32, offset: 224)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "tab_bits", scope: !50, file: !16, line: 166, baseType: !61, size: 64, offset: 256)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "tab_input_bits", scope: !50, file: !16, line: 167, baseType: !61, size: 64, offset: 320)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "tab_input_registers", scope: !50, file: !16, line: 168, baseType: !64, size: 64, offset: 384)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!65 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !46, line: 49, baseType: !66)
!66 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "tab_registers", scope: !50, file: !16, line: 169, baseType: !64, size: 64, offset: 448)
!68 = !{!0, !69, !73}
!69 = !DIGlobalVariableExpression(var: !70)
!70 = distinct !DIGlobalVariable(name: "libmodbus_version_minor", scope: !2, file: !3, line: 31, type: !71, isLocal: false, isDefinition: true)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !72)
!72 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!73 = !DIGlobalVariableExpression(var: !74)
!74 = distinct !DIGlobalVariable(name: "libmodbus_version_micro", scope: !2, file: !3, line: 32, type: !71, isLocal: false, isDefinition: true)
!75 = !DIGlobalVariableExpression(var: !76)
!76 = distinct !DIGlobalVariable(name: "_modbus_rtu_backend", scope: !77, file: !78, line: 1199, type: !140, isLocal: false, isDefinition: true)
!77 = distinct !DICompileUnit(language: DW_LANG_C99, file: !78, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !79, retainedTypes: !80, globals: !227)
!78 = !DIFile(filename: "../../src/modbus-rtu.c", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!79 = !{!35, !5, !15, !21}
!80 = !{!40, !81, !119, !87, !41, !44}
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_rtu_t", file: !83, line: 74, baseType: !84)
!83 = !DIFile(filename: "../../src/modbus-rtu-private.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!84 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_rtu", file: !83, line: 45, size: 896, elements: !85)
!85 = !{!86, !89, !90, !91, !92, !93, !111, !112, !113, !114, !115, !226}
!86 = !DIDerivedType(tag: DW_TAG_member, name: "device", scope: !84, file: !83, line: 47, baseType: !87, size: 64)
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !88, size: 64)
!88 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "baud", scope: !84, file: !83, line: 49, baseType: !44, size: 32, offset: 64)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "data_bit", scope: !84, file: !83, line: 51, baseType: !45, size: 8, offset: 96)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "stop_bit", scope: !84, file: !83, line: 53, baseType: !45, size: 8, offset: 104)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "parity", scope: !84, file: !83, line: 55, baseType: !88, size: 8, offset: 112)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "old_tios", scope: !84, file: !83, line: 61, baseType: !94, size: 480, offset: 128)
!94 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "termios", file: !95, line: 28, size: 480, elements: !96)
!95 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/termios.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!96 = !{!97, !99, !100, !101, !102, !104, !108, !110}
!97 = !DIDerivedType(tag: DW_TAG_member, name: "c_iflag", scope: !94, file: !95, line: 30, baseType: !98, size: 32)
!98 = !DIDerivedType(tag: DW_TAG_typedef, name: "tcflag_t", file: !95, line: 25, baseType: !72)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "c_oflag", scope: !94, file: !95, line: 31, baseType: !98, size: 32, offset: 32)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "c_cflag", scope: !94, file: !95, line: 32, baseType: !98, size: 32, offset: 64)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "c_lflag", scope: !94, file: !95, line: 33, baseType: !98, size: 32, offset: 96)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "c_line", scope: !94, file: !95, line: 34, baseType: !103, size: 8, offset: 128)
!103 = !DIDerivedType(tag: DW_TAG_typedef, name: "cc_t", file: !95, line: 23, baseType: !47)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "c_cc", scope: !94, file: !95, line: 35, baseType: !105, size: 256, offset: 136)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !103, size: 256, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 32)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "c_ispeed", scope: !94, file: !95, line: 36, baseType: !109, size: 32, offset: 416)
!109 = !DIDerivedType(tag: DW_TAG_typedef, name: "speed_t", file: !95, line: 24, baseType: !72)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "c_ospeed", scope: !94, file: !95, line: 37, baseType: !109, size: 32, offset: 448)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "serial_mode", scope: !84, file: !83, line: 64, baseType: !44, size: 32, offset: 608)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "rts", scope: !84, file: !83, line: 67, baseType: !44, size: 32, offset: 640)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "rts_delay", scope: !84, file: !83, line: 68, baseType: !44, size: 32, offset: 672)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "onebyte_time", scope: !84, file: !83, line: 69, baseType: !44, size: 32, offset: 704)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "set_rts", scope: !84, file: !83, line: 70, baseType: !116, size: 64, offset: 768)
!116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !117, size: 64)
!117 = !DISubroutineType(types: !118)
!118 = !{null, !119, !44}
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !120, size: 64)
!120 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_t", file: !16, line: 155, baseType: !121)
!121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus", file: !6, line: 92, size: 640, elements: !122)
!122 = !{!123, !124, !125, !126, !127, !136, !137, !138, !225}
!123 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !121, file: !6, line: 94, baseType: !44, size: 32)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !121, file: !6, line: 96, baseType: !44, size: 32, offset: 32)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !121, file: !6, line: 97, baseType: !44, size: 32, offset: 64)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "error_recovery", scope: !121, file: !6, line: 98, baseType: !44, size: 32, offset: 96)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "response_timeout", scope: !121, file: !6, line: 99, baseType: !128, size: 128, offset: 128)
!128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !129, line: 30, size: 128, elements: !130)
!129 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!130 = !{!131, !134}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !128, file: !129, line: 32, baseType: !132, size: 64)
!132 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !133, line: 139, baseType: !43)
!133 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!134 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !128, file: !129, line: 33, baseType: !135, size: 64, offset: 64)
!135 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !133, line: 141, baseType: !43)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "byte_timeout", scope: !121, file: !6, line: 100, baseType: !128, size: 128, offset: 256)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "indication_timeout", scope: !121, file: !6, line: 101, baseType: !128, size: 128, offset: 384)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "backend", scope: !121, file: !6, line: 102, baseType: !139, size: 64, offset: 512)
!139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !140, size: 64)
!140 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !141)
!141 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_backend_t", file: !6, line: 90, baseType: !142)
!142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_backend", file: !6, line: 67, size: 1088, elements: !143)
!143 = !{!144, !145, !146, !147, !148, !152, !156, !167, !174, !178, !185, !189, !193, !198, !202, !206, !210, !211, !224}
!144 = !DIDerivedType(tag: DW_TAG_member, name: "backend_type", scope: !142, file: !6, line: 68, baseType: !72, size: 32)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "header_length", scope: !142, file: !6, line: 69, baseType: !72, size: 32, offset: 32)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "checksum_length", scope: !142, file: !6, line: 70, baseType: !72, size: 32, offset: 64)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "max_adu_length", scope: !142, file: !6, line: 71, baseType: !72, size: 32, offset: 96)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "set_slave", scope: !142, file: !6, line: 72, baseType: !149, size: 64, offset: 128)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!150 = !DISubroutineType(types: !151)
!151 = !{!44, !119, !44}
!152 = !DIDerivedType(tag: DW_TAG_member, name: "build_request_basis", scope: !142, file: !6, line: 73, baseType: !153, size: 64, offset: 192)
!153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64)
!154 = !DISubroutineType(types: !155)
!155 = !{!44, !119, !44, !44, !44, !61}
!156 = !DIDerivedType(tag: DW_TAG_member, name: "build_response_basis", scope: !142, file: !6, line: 75, baseType: !157, size: 64, offset: 256)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DISubroutineType(types: !159)
!159 = !{!44, !160, !61}
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !161, size: 64)
!161 = !DIDerivedType(tag: DW_TAG_typedef, name: "sft_t", file: !6, line: 65, baseType: !162)
!162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sft", file: !6, line: 61, size: 96, elements: !163)
!163 = !{!164, !165, !166}
!164 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !162, file: !6, line: 62, baseType: !44, size: 32)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !162, file: !6, line: 63, baseType: !44, size: 32, offset: 32)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !162, file: !6, line: 64, baseType: !44, size: 32, offset: 64)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "prepare_response_tid", scope: !142, file: !6, line: 76, baseType: !168, size: 64, offset: 320)
!168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!169 = !DISubroutineType(types: !170)
!170 = !{!44, !171, !173}
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64)
!172 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !45)
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "send_msg_pre", scope: !142, file: !6, line: 77, baseType: !175, size: 64, offset: 384)
!175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !176, size: 64)
!176 = !DISubroutineType(types: !177)
!177 = !{!44, !61, !44}
!178 = !DIDerivedType(tag: DW_TAG_member, name: "send", scope: !142, file: !6, line: 78, baseType: !179, size: 64, offset: 448)
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!180 = !DISubroutineType(types: !181)
!181 = !{!182, !119, !171, !44}
!182 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !183, line: 102, baseType: !184)
!183 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!184 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !133, line: 172, baseType: !43)
!185 = !DIDerivedType(tag: DW_TAG_member, name: "receive", scope: !142, file: !6, line: 79, baseType: !186, size: 64, offset: 512)
!186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !187, size: 64)
!187 = !DISubroutineType(types: !188)
!188 = !{!44, !119, !61}
!189 = !DIDerivedType(tag: DW_TAG_member, name: "recv", scope: !142, file: !6, line: 80, baseType: !190, size: 64, offset: 576)
!190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !191, size: 64)
!191 = !DISubroutineType(types: !192)
!192 = !{!182, !119, !61, !44}
!193 = !DIDerivedType(tag: DW_TAG_member, name: "check_integrity", scope: !142, file: !6, line: 81, baseType: !194, size: 64, offset: 640)
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!195 = !DISubroutineType(types: !196)
!196 = !{!44, !119, !61, !197}
!197 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !44)
!198 = !DIDerivedType(tag: DW_TAG_member, name: "pre_check_confirmation", scope: !142, file: !6, line: 83, baseType: !199, size: 64, offset: 704)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DISubroutineType(types: !201)
!201 = !{!44, !119, !171, !171, !44}
!202 = !DIDerivedType(tag: DW_TAG_member, name: "connect", scope: !142, file: !6, line: 85, baseType: !203, size: 64, offset: 768)
!203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !204, size: 64)
!204 = !DISubroutineType(types: !205)
!205 = !{!44, !119}
!206 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !142, file: !6, line: 86, baseType: !207, size: 64, offset: 832)
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !208, size: 64)
!208 = !DISubroutineType(types: !209)
!209 = !{null, !119}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !142, file: !6, line: 87, baseType: !203, size: 64, offset: 896)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "select", scope: !142, file: !6, line: 88, baseType: !212, size: 64, offset: 960)
!212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !213, size: 64)
!213 = !DISubroutineType(types: !214)
!214 = !{!44, !119, !215, !223, !44}
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64)
!216 = !DIDerivedType(tag: DW_TAG_typedef, name: "fd_set", file: !42, line: 75, baseType: !217)
!217 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !42, line: 64, size: 1024, elements: !218)
!218 = !{!219}
!219 = !DIDerivedType(tag: DW_TAG_member, name: "fds_bits", scope: !217, file: !42, line: 69, baseType: !220, size: 1024)
!220 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 1024, elements: !221)
!221 = !{!222}
!222 = !DISubrange(count: 16)
!223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !142, file: !6, line: 89, baseType: !207, size: 64, offset: 1024)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "backend_data", scope: !121, file: !6, line: 103, baseType: !40, size: 64, offset: 576)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "confirmation_to_ignore", scope: !84, file: !83, line: 73, baseType: !44, size: 32, offset: 832)
!227 = !{!75, !228, !233}
!228 = !DIGlobalVariableExpression(var: !229)
!229 = distinct !DIGlobalVariable(name: "table_crc_hi", scope: !77, file: !78, line: 31, type: !230, isLocal: true, isDefinition: true)
!230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !172, size: 2048, elements: !231)
!231 = !{!232}
!232 = !DISubrange(count: 256)
!233 = !DIGlobalVariableExpression(var: !234)
!234 = distinct !DIGlobalVariable(name: "table_crc_lo", scope: !77, file: !78, line: 61, type: !230, isLocal: true, isDefinition: true)
!235 = !DIGlobalVariableExpression(var: !236)
!236 = distinct !DIGlobalVariable(name: "_modbus_tcp_backend", scope: !237, file: !238, line: 736, type: !340, isLocal: false, isDefinition: true)
!237 = distinct !DICompileUnit(language: DW_LANG_C99, file: !238, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !239, retainedTypes: !310, globals: !435)
!238 = !DIFile(filename: "../../src/modbus-tcp.c", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!239 = !{!240, !252, !281, !5, !21, !304}
!240 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__socket_type", file: !241, line: 24, size: 32, elements: !242)
!241 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/socket_type.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!242 = !{!243, !244, !245, !246, !247, !248, !249, !250, !251}
!243 = !DIEnumerator(name: "SOCK_STREAM", value: 1)
!244 = !DIEnumerator(name: "SOCK_DGRAM", value: 2)
!245 = !DIEnumerator(name: "SOCK_RAW", value: 3)
!246 = !DIEnumerator(name: "SOCK_RDM", value: 4)
!247 = !DIEnumerator(name: "SOCK_SEQPACKET", value: 5)
!248 = !DIEnumerator(name: "SOCK_DCCP", value: 6)
!249 = !DIEnumerator(name: "SOCK_PACKET", value: 10)
!250 = !DIEnumerator(name: "SOCK_CLOEXEC", value: 524288)
!251 = !DIEnumerator(name: "SOCK_NONBLOCK", value: 2048)
!252 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !253, line: 40, size: 32, elements: !254)
!253 = !DIFile(filename: "/usr/include/netinet/in.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!254 = !{!255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280}
!255 = !DIEnumerator(name: "IPPROTO_IP", value: 0)
!256 = !DIEnumerator(name: "IPPROTO_ICMP", value: 1)
!257 = !DIEnumerator(name: "IPPROTO_IGMP", value: 2)
!258 = !DIEnumerator(name: "IPPROTO_IPIP", value: 4)
!259 = !DIEnumerator(name: "IPPROTO_TCP", value: 6)
!260 = !DIEnumerator(name: "IPPROTO_EGP", value: 8)
!261 = !DIEnumerator(name: "IPPROTO_PUP", value: 12)
!262 = !DIEnumerator(name: "IPPROTO_UDP", value: 17)
!263 = !DIEnumerator(name: "IPPROTO_IDP", value: 22)
!264 = !DIEnumerator(name: "IPPROTO_TP", value: 29)
!265 = !DIEnumerator(name: "IPPROTO_DCCP", value: 33)
!266 = !DIEnumerator(name: "IPPROTO_IPV6", value: 41)
!267 = !DIEnumerator(name: "IPPROTO_RSVP", value: 46)
!268 = !DIEnumerator(name: "IPPROTO_GRE", value: 47)
!269 = !DIEnumerator(name: "IPPROTO_ESP", value: 50)
!270 = !DIEnumerator(name: "IPPROTO_AH", value: 51)
!271 = !DIEnumerator(name: "IPPROTO_MTP", value: 92)
!272 = !DIEnumerator(name: "IPPROTO_BEETPH", value: 94)
!273 = !DIEnumerator(name: "IPPROTO_ENCAP", value: 98)
!274 = !DIEnumerator(name: "IPPROTO_PIM", value: 103)
!275 = !DIEnumerator(name: "IPPROTO_COMP", value: 108)
!276 = !DIEnumerator(name: "IPPROTO_SCTP", value: 132)
!277 = !DIEnumerator(name: "IPPROTO_UDPLITE", value: 136)
!278 = !DIEnumerator(name: "IPPROTO_MPLS", value: 137)
!279 = !DIEnumerator(name: "IPPROTO_RAW", value: 255)
!280 = !DIEnumerator(name: "IPPROTO_MAX", value: 256)
!281 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !282, line: 175, size: 32, elements: !283)
!282 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/socket.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!283 = !{!284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303}
!284 = !DIEnumerator(name: "MSG_OOB", value: 1)
!285 = !DIEnumerator(name: "MSG_PEEK", value: 2)
!286 = !DIEnumerator(name: "MSG_DONTROUTE", value: 4)
!287 = !DIEnumerator(name: "MSG_TRYHARD", value: 4)
!288 = !DIEnumerator(name: "MSG_CTRUNC", value: 8)
!289 = !DIEnumerator(name: "MSG_PROXY", value: 16)
!290 = !DIEnumerator(name: "MSG_TRUNC", value: 32)
!291 = !DIEnumerator(name: "MSG_DONTWAIT", value: 64)
!292 = !DIEnumerator(name: "MSG_EOR", value: 128)
!293 = !DIEnumerator(name: "MSG_WAITALL", value: 256)
!294 = !DIEnumerator(name: "MSG_FIN", value: 512)
!295 = !DIEnumerator(name: "MSG_SYN", value: 1024)
!296 = !DIEnumerator(name: "MSG_CONFIRM", value: 2048)
!297 = !DIEnumerator(name: "MSG_RST", value: 4096)
!298 = !DIEnumerator(name: "MSG_ERRQUEUE", value: 8192)
!299 = !DIEnumerator(name: "MSG_NOSIGNAL", value: 16384)
!300 = !DIEnumerator(name: "MSG_MORE", value: 32768)
!301 = !DIEnumerator(name: "MSG_WAITFORONE", value: 65536)
!302 = !DIEnumerator(name: "MSG_FASTOPEN", value: 536870912)
!303 = !DIEnumerator(name: "MSG_CMSG_CLOEXEC", value: 1073741824)
!304 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !305, line: 52, size: 32, elements: !306)
!305 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/socket.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!306 = !{!307, !308, !309}
!307 = !DIEnumerator(name: "SHUT_RD", value: 0)
!308 = !DIEnumerator(name: "SHUT_WR", value: 1)
!309 = !DIEnumerator(name: "SHUT_RDWR", value: 2)
!310 = !{!40, !87, !311, !313, !323, !410, !419, !431, !433, !41, !44}
!311 = !DIDerivedType(tag: DW_TAG_typedef, name: "in_addr_t", file: !253, line: 30, baseType: !312)
!312 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !46, line: 51, baseType: !72)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64)
!314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !282, line: 153, size: 128, elements: !315)
!315 = !{!316, !319}
!316 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !314, file: !282, line: 155, baseType: !317, size: 16)
!317 = !DIDerivedType(tag: DW_TAG_typedef, name: "sa_family_t", file: !318, line: 28, baseType: !66)
!318 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sockaddr.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!319 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !314, file: !282, line: 156, baseType: !320, size: 112, offset: 16)
!320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 112, elements: !321)
!321 = !{!322}
!322 = !DISubrange(count: 14)
!323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !324, size: 64)
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_t", file: !16, line: 155, baseType: !325)
!325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus", file: !6, line: 92, size: 640, elements: !326)
!326 = !{!327, !328, !329, !330, !331, !336, !337, !338, !409}
!327 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !325, file: !6, line: 94, baseType: !44, size: 32)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !325, file: !6, line: 96, baseType: !44, size: 32, offset: 32)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !325, file: !6, line: 97, baseType: !44, size: 32, offset: 64)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "error_recovery", scope: !325, file: !6, line: 98, baseType: !44, size: 32, offset: 96)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "response_timeout", scope: !325, file: !6, line: 99, baseType: !332, size: 128, offset: 128)
!332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !129, line: 30, size: 128, elements: !333)
!333 = !{!334, !335}
!334 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !332, file: !129, line: 32, baseType: !132, size: 64)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !332, file: !129, line: 33, baseType: !135, size: 64, offset: 64)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "byte_timeout", scope: !325, file: !6, line: 100, baseType: !332, size: 128, offset: 256)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "indication_timeout", scope: !325, file: !6, line: 101, baseType: !332, size: 128, offset: 384)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "backend", scope: !325, file: !6, line: 102, baseType: !339, size: 64, offset: 512)
!339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!340 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !341)
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_backend_t", file: !6, line: 90, baseType: !342)
!342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_backend", file: !6, line: 67, size: 1088, elements: !343)
!343 = !{!344, !345, !346, !347, !348, !352, !356, !367, !368, !369, !373, !377, !381, !385, !389, !393, !397, !398, !408}
!344 = !DIDerivedType(tag: DW_TAG_member, name: "backend_type", scope: !342, file: !6, line: 68, baseType: !72, size: 32)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "header_length", scope: !342, file: !6, line: 69, baseType: !72, size: 32, offset: 32)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "checksum_length", scope: !342, file: !6, line: 70, baseType: !72, size: 32, offset: 64)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "max_adu_length", scope: !342, file: !6, line: 71, baseType: !72, size: 32, offset: 96)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "set_slave", scope: !342, file: !6, line: 72, baseType: !349, size: 64, offset: 128)
!349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !350, size: 64)
!350 = !DISubroutineType(types: !351)
!351 = !{!44, !323, !44}
!352 = !DIDerivedType(tag: DW_TAG_member, name: "build_request_basis", scope: !342, file: !6, line: 73, baseType: !353, size: 64, offset: 192)
!353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !354, size: 64)
!354 = !DISubroutineType(types: !355)
!355 = !{!44, !323, !44, !44, !44, !61}
!356 = !DIDerivedType(tag: DW_TAG_member, name: "build_response_basis", scope: !342, file: !6, line: 75, baseType: !357, size: 64, offset: 256)
!357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !358, size: 64)
!358 = !DISubroutineType(types: !359)
!359 = !{!44, !360, !61}
!360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !361, size: 64)
!361 = !DIDerivedType(tag: DW_TAG_typedef, name: "sft_t", file: !6, line: 65, baseType: !362)
!362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sft", file: !6, line: 61, size: 96, elements: !363)
!363 = !{!364, !365, !366}
!364 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !362, file: !6, line: 62, baseType: !44, size: 32)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !362, file: !6, line: 63, baseType: !44, size: 32, offset: 32)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !362, file: !6, line: 64, baseType: !44, size: 32, offset: 64)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "prepare_response_tid", scope: !342, file: !6, line: 76, baseType: !168, size: 64, offset: 320)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "send_msg_pre", scope: !342, file: !6, line: 77, baseType: !175, size: 64, offset: 384)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "send", scope: !342, file: !6, line: 78, baseType: !370, size: 64, offset: 448)
!370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !371, size: 64)
!371 = !DISubroutineType(types: !372)
!372 = !{!182, !323, !171, !44}
!373 = !DIDerivedType(tag: DW_TAG_member, name: "receive", scope: !342, file: !6, line: 79, baseType: !374, size: 64, offset: 512)
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64)
!375 = !DISubroutineType(types: !376)
!376 = !{!44, !323, !61}
!377 = !DIDerivedType(tag: DW_TAG_member, name: "recv", scope: !342, file: !6, line: 80, baseType: !378, size: 64, offset: 576)
!378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !379, size: 64)
!379 = !DISubroutineType(types: !380)
!380 = !{!182, !323, !61, !44}
!381 = !DIDerivedType(tag: DW_TAG_member, name: "check_integrity", scope: !342, file: !6, line: 81, baseType: !382, size: 64, offset: 640)
!382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !383, size: 64)
!383 = !DISubroutineType(types: !384)
!384 = !{!44, !323, !61, !197}
!385 = !DIDerivedType(tag: DW_TAG_member, name: "pre_check_confirmation", scope: !342, file: !6, line: 83, baseType: !386, size: 64, offset: 704)
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = !DISubroutineType(types: !388)
!388 = !{!44, !323, !171, !171, !44}
!389 = !DIDerivedType(tag: DW_TAG_member, name: "connect", scope: !342, file: !6, line: 85, baseType: !390, size: 64, offset: 768)
!390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !391, size: 64)
!391 = !DISubroutineType(types: !392)
!392 = !{!44, !323}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !342, file: !6, line: 86, baseType: !394, size: 64, offset: 832)
!394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !395, size: 64)
!395 = !DISubroutineType(types: !396)
!396 = !{null, !323}
!397 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !342, file: !6, line: 87, baseType: !390, size: 64, offset: 896)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "select", scope: !342, file: !6, line: 88, baseType: !399, size: 64, offset: 960)
!399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !400, size: 64)
!400 = !DISubroutineType(types: !401)
!401 = !{!44, !323, !402, !407, !44}
!402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !403, size: 64)
!403 = !DIDerivedType(tag: DW_TAG_typedef, name: "fd_set", file: !42, line: 75, baseType: !404)
!404 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !42, line: 64, size: 1024, elements: !405)
!405 = !{!406}
!406 = !DIDerivedType(tag: DW_TAG_member, name: "fds_bits", scope: !404, file: !42, line: 69, baseType: !220, size: 1024)
!407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !342, file: !6, line: 89, baseType: !394, size: 64, offset: 1024)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "backend_data", scope: !325, file: !6, line: 103, baseType: !40, size: 64, offset: 576)
!410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !411, size: 64)
!411 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_tcp_t", file: !412, line: 28, baseType: !413)
!412 = !DIFile(filename: "../../src/modbus-tcp-private.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_tcp", file: !412, line: 18, size: 192, elements: !414)
!414 = !{!415, !416, !417}
!415 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !413, file: !412, line: 23, baseType: !65, size: 16)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "port", scope: !413, file: !412, line: 25, baseType: !44, size: 32, offset: 32)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !413, file: !412, line: 27, baseType: !418, size: 128, offset: 64)
!418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 128, elements: !221)
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !420, size: 64)
!420 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_tcp_pi_t", file: !412, line: 42, baseType: !421)
!421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_tcp_pi", file: !412, line: 33, size: 8544, elements: !422)
!422 = !{!423, !424, !425, !429}
!423 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !421, file: !412, line: 35, baseType: !65, size: 16)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "port", scope: !421, file: !412, line: 37, baseType: !44, size: 32, offset: 32)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !421, file: !412, line: 39, baseType: !426, size: 8200, offset: 64)
!426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 8200, elements: !427)
!427 = !{!428}
!428 = !DISubrange(count: 1025)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "service", scope: !421, file: !412, line: 41, baseType: !430, size: 256, offset: 8264)
!430 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 256, elements: !106)
!431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !432, size: 64)
!432 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !88)
!433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !434, size: 64)
!434 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!435 = !{!235, !436}
!436 = !DIGlobalVariableExpression(var: !437)
!437 = distinct !DIGlobalVariable(name: "_modbus_tcp_pi_backend", scope: !237, file: !238, line: 759, type: !340, isLocal: false, isDefinition: true)
!438 = distinct !DICompileUnit(language: DW_LANG_C99, file: !439, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !440, retainedTypes: !441)
!439 = !DIFile(filename: "../../src/modbus-data.c", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!440 = !{}
!441 = !{!312, !66, !65}
!442 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!443 = !{i32 2, !"Dwarf Version", i32 4}
!444 = !{i32 2, !"Debug Info Version", i32 3}
!445 = !{i32 1, !"wchar_size", i32 4}
!446 = !{i32 7, !"PIC Level", i32 2}
!447 = distinct !DISubprogram(name: "modbus_strerror", scope: !3, file: !3, line: 44, type: !448, isLocal: false, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!448 = !DISubroutineType(types: !449)
!449 = !{!431, !44}
!450 = !DILocalVariable(name: "errnum", arg: 1, scope: !447, file: !3, line: 44, type: !44)
!451 = !DIExpression()
!452 = !DILocation(line: 44, column: 33, scope: !447)
!453 = !DILocation(line: 45, column: 13, scope: !447)
!454 = !DILocation(line: 45, column: 5, scope: !447)
!455 = !DILocation(line: 47, column: 9, scope: !456)
!456 = distinct !DILexicalBlock(scope: !447, file: !3, line: 45, column: 21)
!457 = !DILocation(line: 49, column: 9, scope: !456)
!458 = !DILocation(line: 51, column: 9, scope: !456)
!459 = !DILocation(line: 53, column: 9, scope: !456)
!460 = !DILocation(line: 55, column: 9, scope: !456)
!461 = !DILocation(line: 57, column: 9, scope: !456)
!462 = !DILocation(line: 59, column: 9, scope: !456)
!463 = !DILocation(line: 61, column: 9, scope: !456)
!464 = !DILocation(line: 63, column: 9, scope: !456)
!465 = !DILocation(line: 65, column: 9, scope: !456)
!466 = !DILocation(line: 67, column: 9, scope: !456)
!467 = !DILocation(line: 69, column: 9, scope: !456)
!468 = !DILocation(line: 71, column: 9, scope: !456)
!469 = !DILocation(line: 73, column: 9, scope: !456)
!470 = !DILocation(line: 75, column: 9, scope: !456)
!471 = !DILocation(line: 77, column: 25, scope: !456)
!472 = !DILocation(line: 77, column: 16, scope: !456)
!473 = !DILocation(line: 77, column: 9, scope: !456)
!474 = !DILocation(line: 79, column: 1, scope: !447)
!475 = distinct !DISubprogram(name: "_error_print", scope: !3, file: !3, line: 81, type: !476, isLocal: false, isDefinition: true, scopeLine: 82, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!476 = !DISubroutineType(types: !477)
!477 = !{null, !478, !431}
!478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !479, size: 64)
!479 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_t", file: !16, line: 155, baseType: !480)
!480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus", file: !6, line: 92, size: 640, elements: !481)
!481 = !{!482, !483, !484, !485, !486, !491, !492, !493, !564}
!482 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !480, file: !6, line: 94, baseType: !44, size: 32)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !480, file: !6, line: 96, baseType: !44, size: 32, offset: 32)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !480, file: !6, line: 97, baseType: !44, size: 32, offset: 64)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "error_recovery", scope: !480, file: !6, line: 98, baseType: !44, size: 32, offset: 96)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "response_timeout", scope: !480, file: !6, line: 99, baseType: !487, size: 128, offset: 128)
!487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !129, line: 30, size: 128, elements: !488)
!488 = !{!489, !490}
!489 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !487, file: !129, line: 32, baseType: !132, size: 64)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !487, file: !129, line: 33, baseType: !135, size: 64, offset: 64)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "byte_timeout", scope: !480, file: !6, line: 100, baseType: !487, size: 128, offset: 256)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "indication_timeout", scope: !480, file: !6, line: 101, baseType: !487, size: 128, offset: 384)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "backend", scope: !480, file: !6, line: 102, baseType: !494, size: 64, offset: 512)
!494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !495, size: 64)
!495 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !496)
!496 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_backend_t", file: !6, line: 90, baseType: !497)
!497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_modbus_backend", file: !6, line: 67, size: 1088, elements: !498)
!498 = !{!499, !500, !501, !502, !503, !507, !511, !522, !523, !524, !528, !532, !536, !540, !544, !548, !552, !553, !563}
!499 = !DIDerivedType(tag: DW_TAG_member, name: "backend_type", scope: !497, file: !6, line: 68, baseType: !72, size: 32)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "header_length", scope: !497, file: !6, line: 69, baseType: !72, size: 32, offset: 32)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "checksum_length", scope: !497, file: !6, line: 70, baseType: !72, size: 32, offset: 64)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "max_adu_length", scope: !497, file: !6, line: 71, baseType: !72, size: 32, offset: 96)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "set_slave", scope: !497, file: !6, line: 72, baseType: !504, size: 64, offset: 128)
!504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !505, size: 64)
!505 = !DISubroutineType(types: !506)
!506 = !{!44, !478, !44}
!507 = !DIDerivedType(tag: DW_TAG_member, name: "build_request_basis", scope: !497, file: !6, line: 73, baseType: !508, size: 64, offset: 192)
!508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !509, size: 64)
!509 = !DISubroutineType(types: !510)
!510 = !{!44, !478, !44, !44, !44, !61}
!511 = !DIDerivedType(tag: DW_TAG_member, name: "build_response_basis", scope: !497, file: !6, line: 75, baseType: !512, size: 64, offset: 256)
!512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !513, size: 64)
!513 = !DISubroutineType(types: !514)
!514 = !{!44, !515, !61}
!515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !516, size: 64)
!516 = !DIDerivedType(tag: DW_TAG_typedef, name: "sft_t", file: !6, line: 65, baseType: !517)
!517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sft", file: !6, line: 61, size: 96, elements: !518)
!518 = !{!519, !520, !521}
!519 = !DIDerivedType(tag: DW_TAG_member, name: "slave", scope: !517, file: !6, line: 62, baseType: !44, size: 32)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !517, file: !6, line: 63, baseType: !44, size: 32, offset: 32)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !517, file: !6, line: 64, baseType: !44, size: 32, offset: 64)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "prepare_response_tid", scope: !497, file: !6, line: 76, baseType: !168, size: 64, offset: 320)
!523 = !DIDerivedType(tag: DW_TAG_member, name: "send_msg_pre", scope: !497, file: !6, line: 77, baseType: !175, size: 64, offset: 384)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "send", scope: !497, file: !6, line: 78, baseType: !525, size: 64, offset: 448)
!525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !526, size: 64)
!526 = !DISubroutineType(types: !527)
!527 = !{!182, !478, !171, !44}
!528 = !DIDerivedType(tag: DW_TAG_member, name: "receive", scope: !497, file: !6, line: 79, baseType: !529, size: 64, offset: 512)
!529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !530, size: 64)
!530 = !DISubroutineType(types: !531)
!531 = !{!44, !478, !61}
!532 = !DIDerivedType(tag: DW_TAG_member, name: "recv", scope: !497, file: !6, line: 80, baseType: !533, size: 64, offset: 576)
!533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !534, size: 64)
!534 = !DISubroutineType(types: !535)
!535 = !{!182, !478, !61, !44}
!536 = !DIDerivedType(tag: DW_TAG_member, name: "check_integrity", scope: !497, file: !6, line: 81, baseType: !537, size: 64, offset: 640)
!537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !538, size: 64)
!538 = !DISubroutineType(types: !539)
!539 = !{!44, !478, !61, !197}
!540 = !DIDerivedType(tag: DW_TAG_member, name: "pre_check_confirmation", scope: !497, file: !6, line: 83, baseType: !541, size: 64, offset: 704)
!541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !542, size: 64)
!542 = !DISubroutineType(types: !543)
!543 = !{!44, !478, !171, !171, !44}
!544 = !DIDerivedType(tag: DW_TAG_member, name: "connect", scope: !497, file: !6, line: 85, baseType: !545, size: 64, offset: 768)
!545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !546, size: 64)
!546 = !DISubroutineType(types: !547)
!547 = !{!44, !478}
!548 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !497, file: !6, line: 86, baseType: !549, size: 64, offset: 832)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !550, size: 64)
!550 = !DISubroutineType(types: !551)
!551 = !{null, !478}
!552 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !497, file: !6, line: 87, baseType: !545, size: 64, offset: 896)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "select", scope: !497, file: !6, line: 88, baseType: !554, size: 64, offset: 960)
!554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !555, size: 64)
!555 = !DISubroutineType(types: !556)
!556 = !{!44, !478, !557, !562, !44}
!557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !558, size: 64)
!558 = !DIDerivedType(tag: DW_TAG_typedef, name: "fd_set", file: !42, line: 75, baseType: !559)
!559 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !42, line: 64, size: 1024, elements: !560)
!560 = !{!561}
!561 = !DIDerivedType(tag: DW_TAG_member, name: "fds_bits", scope: !559, file: !42, line: 69, baseType: !220, size: 1024)
!562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !487, size: 64)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !497, file: !6, line: 89, baseType: !549, size: 64, offset: 1024)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "backend_data", scope: !480, file: !6, line: 103, baseType: !40, size: 64, offset: 576)
!565 = !DILocalVariable(name: "ctx", arg: 1, scope: !475, file: !3, line: 81, type: !478)
!566 = !DILocation(line: 81, column: 29, scope: !475)
!567 = !DILocalVariable(name: "context", arg: 2, scope: !475, file: !3, line: 81, type: !431)
!568 = !DILocation(line: 81, column: 46, scope: !475)
!569 = !DILocation(line: 83, column: 9, scope: !570)
!570 = distinct !DILexicalBlock(scope: !475, file: !3, line: 83, column: 9)
!571 = !DILocation(line: 83, column: 14, scope: !570)
!572 = !DILocation(line: 83, column: 9, scope: !475)
!573 = !DILocation(line: 84, column: 17, scope: !574)
!574 = distinct !DILexicalBlock(scope: !570, file: !3, line: 83, column: 21)
!575 = !DILocation(line: 84, column: 53, scope: !574)
!576 = !DILocation(line: 84, column: 37, scope: !574)
!577 = !DILocation(line: 84, column: 9, scope: !574)
!578 = !DILocation(line: 85, column: 13, scope: !579)
!579 = distinct !DILexicalBlock(scope: !574, file: !3, line: 85, column: 13)
!580 = !DILocation(line: 85, column: 21, scope: !579)
!581 = !DILocation(line: 85, column: 13, scope: !574)
!582 = !DILocation(line: 86, column: 21, scope: !583)
!583 = distinct !DILexicalBlock(scope: !579, file: !3, line: 85, column: 30)
!584 = !DILocation(line: 86, column: 39, scope: !583)
!585 = !DILocation(line: 86, column: 13, scope: !583)
!586 = !DILocation(line: 87, column: 9, scope: !583)
!587 = !DILocation(line: 88, column: 21, scope: !588)
!588 = distinct !DILexicalBlock(scope: !579, file: !3, line: 87, column: 16)
!589 = !DILocation(line: 88, column: 13, scope: !588)
!590 = !DILocation(line: 90, column: 5, scope: !574)
!591 = !DILocation(line: 91, column: 1, scope: !475)
!592 = distinct !DISubprogram(name: "modbus_flush", scope: !3, file: !3, line: 111, type: !546, isLocal: false, isDefinition: true, scopeLine: 112, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!593 = !DILocalVariable(name: "ctx", arg: 1, scope: !592, file: !3, line: 111, type: !478)
!594 = !DILocation(line: 111, column: 28, scope: !592)
!595 = !DILocalVariable(name: "rc", scope: !592, file: !3, line: 113, type: !44)
!596 = !DILocation(line: 113, column: 9, scope: !592)
!597 = !DILocation(line: 115, column: 9, scope: !598)
!598 = distinct !DILexicalBlock(scope: !592, file: !3, line: 115, column: 9)
!599 = !DILocation(line: 115, column: 13, scope: !598)
!600 = !DILocation(line: 115, column: 9, scope: !592)
!601 = !DILocation(line: 116, column: 9, scope: !602)
!602 = distinct !DILexicalBlock(scope: !598, file: !3, line: 115, column: 22)
!603 = !DILocation(line: 116, column: 15, scope: !602)
!604 = !DILocation(line: 117, column: 9, scope: !602)
!605 = !DILocation(line: 120, column: 10, scope: !592)
!606 = !DILocation(line: 120, column: 15, scope: !592)
!607 = !DILocation(line: 120, column: 24, scope: !592)
!608 = !DILocation(line: 120, column: 30, scope: !592)
!609 = !DILocation(line: 120, column: 8, scope: !592)
!610 = !DILocation(line: 121, column: 9, scope: !611)
!611 = distinct !DILexicalBlock(scope: !592, file: !3, line: 121, column: 9)
!612 = !DILocation(line: 121, column: 12, scope: !611)
!613 = !DILocation(line: 121, column: 18, scope: !611)
!614 = !DILocation(line: 121, column: 21, scope: !611)
!615 = !DILocation(line: 121, column: 26, scope: !611)
!616 = !DILocation(line: 121, column: 9, scope: !592)
!617 = !DILocation(line: 123, column: 40, scope: !618)
!618 = distinct !DILexicalBlock(scope: !611, file: !3, line: 121, column: 33)
!619 = !DILocation(line: 123, column: 9, scope: !618)
!620 = !DILocation(line: 124, column: 5, scope: !618)
!621 = !DILocation(line: 125, column: 12, scope: !592)
!622 = !DILocation(line: 125, column: 5, scope: !592)
!623 = !DILocation(line: 126, column: 1, scope: !592)
!624 = distinct !DISubprogram(name: "modbus_send_raw_request", scope: !3, file: !3, line: 210, type: !625, isLocal: false, isDefinition: true, scopeLine: 211, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!625 = !DISubroutineType(types: !626)
!626 = !{!44, !478, !61, !44}
!627 = !DILocalVariable(name: "ctx", arg: 1, scope: !624, file: !3, line: 210, type: !478)
!628 = !DILocation(line: 210, column: 39, scope: !624)
!629 = !DILocalVariable(name: "raw_req", arg: 2, scope: !624, file: !3, line: 210, type: !61)
!630 = !DILocation(line: 210, column: 53, scope: !624)
!631 = !DILocalVariable(name: "raw_req_length", arg: 3, scope: !624, file: !3, line: 210, type: !44)
!632 = !DILocation(line: 210, column: 66, scope: !624)
!633 = !DILocalVariable(name: "sft", scope: !624, file: !3, line: 212, type: !516)
!634 = !DILocation(line: 212, column: 11, scope: !624)
!635 = !DILocalVariable(name: "req", scope: !624, file: !3, line: 213, type: !636)
!636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 2080, elements: !637)
!637 = !{!638}
!638 = !DISubrange(count: 260)
!639 = !DILocation(line: 213, column: 13, scope: !624)
!640 = !DILocalVariable(name: "req_length", scope: !624, file: !3, line: 214, type: !44)
!641 = !DILocation(line: 214, column: 9, scope: !624)
!642 = !DILocation(line: 216, column: 9, scope: !643)
!643 = distinct !DILexicalBlock(scope: !624, file: !3, line: 216, column: 9)
!644 = !DILocation(line: 216, column: 13, scope: !643)
!645 = !DILocation(line: 216, column: 9, scope: !624)
!646 = !DILocation(line: 217, column: 9, scope: !647)
!647 = distinct !DILexicalBlock(scope: !643, file: !3, line: 216, column: 22)
!648 = !DILocation(line: 217, column: 15, scope: !647)
!649 = !DILocation(line: 218, column: 9, scope: !647)
!650 = !DILocation(line: 221, column: 9, scope: !651)
!651 = distinct !DILexicalBlock(scope: !624, file: !3, line: 221, column: 9)
!652 = !DILocation(line: 221, column: 24, scope: !651)
!653 = !DILocation(line: 221, column: 28, scope: !651)
!654 = !DILocation(line: 221, column: 31, scope: !651)
!655 = !DILocation(line: 221, column: 46, scope: !651)
!656 = !DILocation(line: 221, column: 9, scope: !624)
!657 = !DILocation(line: 225, column: 9, scope: !658)
!658 = distinct !DILexicalBlock(scope: !651, file: !3, line: 221, column: 77)
!659 = !DILocation(line: 225, column: 15, scope: !658)
!660 = !DILocation(line: 226, column: 9, scope: !658)
!661 = !DILocation(line: 229, column: 17, scope: !624)
!662 = !DILocation(line: 229, column: 9, scope: !624)
!663 = !DILocation(line: 229, column: 15, scope: !624)
!664 = !DILocation(line: 230, column: 20, scope: !624)
!665 = !DILocation(line: 230, column: 9, scope: !624)
!666 = !DILocation(line: 230, column: 18, scope: !624)
!667 = !DILocation(line: 232, column: 9, scope: !624)
!668 = !DILocation(line: 232, column: 14, scope: !624)
!669 = !DILocation(line: 234, column: 18, scope: !624)
!670 = !DILocation(line: 234, column: 23, scope: !624)
!671 = !DILocation(line: 234, column: 32, scope: !624)
!672 = !DILocation(line: 234, column: 59, scope: !624)
!673 = !DILocation(line: 234, column: 16, scope: !624)
!674 = !DILocation(line: 236, column: 9, scope: !675)
!675 = distinct !DILexicalBlock(scope: !624, file: !3, line: 236, column: 9)
!676 = !DILocation(line: 236, column: 24, scope: !675)
!677 = !DILocation(line: 236, column: 9, scope: !624)
!678 = !DILocation(line: 238, column: 16, scope: !679)
!679 = distinct !DILexicalBlock(scope: !675, file: !3, line: 236, column: 29)
!680 = !DILocation(line: 238, column: 22, scope: !679)
!681 = !DILocation(line: 238, column: 20, scope: !679)
!682 = !DILocation(line: 238, column: 34, scope: !679)
!683 = !DILocation(line: 238, column: 42, scope: !679)
!684 = !DILocation(line: 238, column: 47, scope: !679)
!685 = !DILocation(line: 238, column: 62, scope: !679)
!686 = !DILocation(line: 238, column: 9, scope: !679)
!687 = !DILocation(line: 239, column: 23, scope: !679)
!688 = !DILocation(line: 239, column: 38, scope: !679)
!689 = !DILocation(line: 239, column: 20, scope: !679)
!690 = !DILocation(line: 240, column: 5, scope: !679)
!691 = !DILocation(line: 242, column: 21, scope: !624)
!692 = !DILocation(line: 242, column: 26, scope: !624)
!693 = !DILocation(line: 242, column: 31, scope: !624)
!694 = !DILocation(line: 242, column: 12, scope: !624)
!695 = !DILocation(line: 242, column: 5, scope: !624)
!696 = !DILocation(line: 243, column: 1, scope: !624)
!697 = distinct !DISubprogram(name: "send_msg", scope: !3, file: !3, line: 166, type: !625, isLocal: true, isDefinition: true, scopeLine: 167, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!698 = !DILocalVariable(name: "ctx", arg: 1, scope: !697, file: !3, line: 166, type: !478)
!699 = !DILocation(line: 166, column: 31, scope: !697)
!700 = !DILocalVariable(name: "msg", arg: 2, scope: !697, file: !3, line: 166, type: !61)
!701 = !DILocation(line: 166, column: 45, scope: !697)
!702 = !DILocalVariable(name: "msg_length", arg: 3, scope: !697, file: !3, line: 166, type: !44)
!703 = !DILocation(line: 166, column: 54, scope: !697)
!704 = !DILocalVariable(name: "rc", scope: !697, file: !3, line: 168, type: !44)
!705 = !DILocation(line: 168, column: 9, scope: !697)
!706 = !DILocalVariable(name: "i", scope: !697, file: !3, line: 169, type: !44)
!707 = !DILocation(line: 169, column: 9, scope: !697)
!708 = !DILocation(line: 171, column: 18, scope: !697)
!709 = !DILocation(line: 171, column: 23, scope: !697)
!710 = !DILocation(line: 171, column: 32, scope: !697)
!711 = !DILocation(line: 171, column: 45, scope: !697)
!712 = !DILocation(line: 171, column: 50, scope: !697)
!713 = !DILocation(line: 171, column: 16, scope: !697)
!714 = !DILocation(line: 173, column: 9, scope: !715)
!715 = distinct !DILexicalBlock(scope: !697, file: !3, line: 173, column: 9)
!716 = !DILocation(line: 173, column: 14, scope: !715)
!717 = !DILocation(line: 173, column: 9, scope: !697)
!718 = !DILocation(line: 174, column: 16, scope: !719)
!719 = distinct !DILexicalBlock(scope: !720, file: !3, line: 174, column: 9)
!720 = distinct !DILexicalBlock(scope: !715, file: !3, line: 173, column: 21)
!721 = !DILocation(line: 174, column: 14, scope: !719)
!722 = !DILocation(line: 174, column: 21, scope: !723)
!723 = distinct !DILexicalBlock(scope: !719, file: !3, line: 174, column: 9)
!724 = !DILocation(line: 174, column: 25, scope: !723)
!725 = !DILocation(line: 174, column: 23, scope: !723)
!726 = !DILocation(line: 174, column: 9, scope: !719)
!727 = !DILocation(line: 175, column: 30, scope: !723)
!728 = !DILocation(line: 175, column: 34, scope: !723)
!729 = !DILocation(line: 175, column: 13, scope: !723)
!730 = !DILocation(line: 174, column: 38, scope: !723)
!731 = !DILocation(line: 174, column: 9, scope: !723)
!732 = distinct !{!732, !726, !733}
!733 = !DILocation(line: 175, column: 36, scope: !719)
!734 = !DILocation(line: 176, column: 9, scope: !720)
!735 = !DILocation(line: 177, column: 5, scope: !720)
!736 = !DILocation(line: 181, column: 5, scope: !697)
!737 = distinct !{!737, !736, !738}
!738 = !DILocation(line: 200, column: 22, scope: !697)
!739 = !DILocation(line: 182, column: 14, scope: !740)
!740 = distinct !DILexicalBlock(scope: !697, file: !3, line: 181, column: 8)
!741 = !DILocation(line: 182, column: 19, scope: !740)
!742 = !DILocation(line: 182, column: 28, scope: !740)
!743 = !DILocation(line: 182, column: 33, scope: !740)
!744 = !DILocation(line: 182, column: 38, scope: !740)
!745 = !DILocation(line: 182, column: 43, scope: !740)
!746 = !DILocation(line: 182, column: 12, scope: !740)
!747 = !DILocation(line: 183, column: 13, scope: !748)
!748 = distinct !DILexicalBlock(scope: !740, file: !3, line: 183, column: 13)
!749 = !DILocation(line: 183, column: 16, scope: !748)
!750 = !DILocation(line: 183, column: 13, scope: !740)
!751 = !DILocation(line: 184, column: 26, scope: !752)
!752 = distinct !DILexicalBlock(scope: !748, file: !3, line: 183, column: 23)
!753 = !DILocation(line: 184, column: 13, scope: !752)
!754 = !DILocation(line: 185, column: 17, scope: !755)
!755 = distinct !DILexicalBlock(scope: !752, file: !3, line: 185, column: 17)
!756 = !DILocation(line: 185, column: 22, scope: !755)
!757 = !DILocation(line: 185, column: 37, scope: !755)
!758 = !DILocation(line: 185, column: 17, scope: !752)
!759 = !DILocalVariable(name: "saved_errno", scope: !760, file: !3, line: 186, type: !44)
!760 = distinct !DILexicalBlock(scope: !755, file: !3, line: 185, column: 67)
!761 = !DILocation(line: 186, column: 21, scope: !760)
!762 = !DILocation(line: 186, column: 35, scope: !760)
!763 = !DILocation(line: 188, column: 22, scope: !764)
!764 = distinct !DILexicalBlock(scope: !760, file: !3, line: 188, column: 21)
!765 = !DILocation(line: 188, column: 28, scope: !764)
!766 = !DILocation(line: 188, column: 37, scope: !764)
!767 = !DILocation(line: 188, column: 40, scope: !764)
!768 = !DILocation(line: 188, column: 46, scope: !764)
!769 = !DILocation(line: 188, column: 60, scope: !764)
!770 = !DILocation(line: 188, column: 63, scope: !764)
!771 = !DILocation(line: 188, column: 69, scope: !764)
!772 = !DILocation(line: 188, column: 21, scope: !760)
!773 = !DILocation(line: 189, column: 34, scope: !774)
!774 = distinct !DILexicalBlock(scope: !764, file: !3, line: 188, column: 80)
!775 = !DILocation(line: 189, column: 21, scope: !774)
!776 = !DILocation(line: 190, column: 45, scope: !774)
!777 = !DILocation(line: 190, column: 21, scope: !774)
!778 = !DILocation(line: 191, column: 36, scope: !774)
!779 = !DILocation(line: 191, column: 21, scope: !774)
!780 = !DILocation(line: 192, column: 17, scope: !774)
!781 = !DILocation(line: 193, column: 45, scope: !782)
!782 = distinct !DILexicalBlock(scope: !764, file: !3, line: 192, column: 24)
!783 = !DILocation(line: 193, column: 21, scope: !782)
!784 = !DILocation(line: 194, column: 34, scope: !782)
!785 = !DILocation(line: 194, column: 21, scope: !782)
!786 = !DILocation(line: 196, column: 25, scope: !760)
!787 = !DILocation(line: 196, column: 17, scope: !760)
!788 = !DILocation(line: 196, column: 23, scope: !760)
!789 = !DILocation(line: 197, column: 13, scope: !760)
!790 = !DILocation(line: 198, column: 9, scope: !752)
!791 = !DILocation(line: 199, column: 5, scope: !740)
!792 = !DILocation(line: 199, column: 15, scope: !697)
!793 = !DILocation(line: 199, column: 20, scope: !697)
!794 = !DILocation(line: 199, column: 35, scope: !697)
!795 = !DILocation(line: 199, column: 65, scope: !697)
!796 = !DILocation(line: 200, column: 14, scope: !697)
!797 = !DILocation(line: 200, column: 17, scope: !697)
!798 = !DILocation(line: 202, column: 9, scope: !799)
!799 = distinct !DILexicalBlock(scope: !697, file: !3, line: 202, column: 9)
!800 = !DILocation(line: 202, column: 12, scope: !799)
!801 = !DILocation(line: 202, column: 16, scope: !799)
!802 = !DILocation(line: 202, column: 19, scope: !799)
!803 = !DILocation(line: 202, column: 25, scope: !799)
!804 = !DILocation(line: 202, column: 22, scope: !799)
!805 = !DILocation(line: 202, column: 9, scope: !697)
!806 = !DILocation(line: 203, column: 9, scope: !807)
!807 = distinct !DILexicalBlock(scope: !799, file: !3, line: 202, column: 37)
!808 = !DILocation(line: 203, column: 15, scope: !807)
!809 = !DILocation(line: 204, column: 9, scope: !807)
!810 = !DILocation(line: 207, column: 12, scope: !697)
!811 = !DILocation(line: 207, column: 5, scope: !697)
!812 = !DILocation(line: 208, column: 1, scope: !697)
!813 = distinct !DISubprogram(name: "modbus_close", scope: !3, file: !3, line: 1734, type: !550, isLocal: false, isDefinition: true, scopeLine: 1735, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!814 = !DILocalVariable(name: "ctx", arg: 1, scope: !813, file: !3, line: 1734, type: !478)
!815 = !DILocation(line: 1734, column: 29, scope: !813)
!816 = !DILocation(line: 1736, column: 9, scope: !817)
!817 = distinct !DILexicalBlock(scope: !813, file: !3, line: 1736, column: 9)
!818 = !DILocation(line: 1736, column: 13, scope: !817)
!819 = !DILocation(line: 1736, column: 9, scope: !813)
!820 = !DILocation(line: 1737, column: 9, scope: !817)
!821 = !DILocation(line: 1739, column: 5, scope: !813)
!822 = !DILocation(line: 1739, column: 10, scope: !813)
!823 = !DILocation(line: 1739, column: 19, scope: !813)
!824 = !DILocation(line: 1739, column: 25, scope: !813)
!825 = !DILocation(line: 1740, column: 1, scope: !813)
!826 = distinct !DISubprogram(name: "_sleep_response_timeout", scope: !3, file: !3, line: 93, type: !550, isLocal: true, isDefinition: true, scopeLine: 94, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!827 = !DILocalVariable(name: "ctx", arg: 1, scope: !826, file: !3, line: 93, type: !478)
!828 = !DILocation(line: 93, column: 47, scope: !826)
!829 = !DILocalVariable(name: "request", scope: !826, file: !3, line: 102, type: !830)
!830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !831, line: 120, size: 128, elements: !832)
!831 = !DIFile(filename: "/usr/include/time.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!832 = !{!833, !834}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !830, file: !831, line: 122, baseType: !132, size: 64)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !830, file: !831, line: 123, baseType: !835, size: 64, offset: 64)
!835 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !133, line: 175, baseType: !43)
!836 = !DILocation(line: 102, column: 21, scope: !826)
!837 = !DILocalVariable(name: "remaining", scope: !826, file: !3, line: 102, type: !830)
!838 = !DILocation(line: 102, column: 30, scope: !826)
!839 = !DILocation(line: 103, column: 22, scope: !826)
!840 = !DILocation(line: 103, column: 27, scope: !826)
!841 = !DILocation(line: 103, column: 44, scope: !826)
!842 = !DILocation(line: 103, column: 13, scope: !826)
!843 = !DILocation(line: 103, column: 20, scope: !826)
!844 = !DILocation(line: 104, column: 34, scope: !826)
!845 = !DILocation(line: 104, column: 39, scope: !826)
!846 = !DILocation(line: 104, column: 56, scope: !826)
!847 = !DILocation(line: 104, column: 65, scope: !826)
!848 = !DILocation(line: 104, column: 13, scope: !826)
!849 = !DILocation(line: 104, column: 21, scope: !826)
!850 = !DILocation(line: 105, column: 5, scope: !826)
!851 = !DILocation(line: 105, column: 12, scope: !826)
!852 = !DILocation(line: 105, column: 44, scope: !826)
!853 = !DILocation(line: 105, column: 50, scope: !826)
!854 = !DILocation(line: 105, column: 53, scope: !826)
!855 = !DILocation(line: 105, column: 59, scope: !826)
!856 = !DILocation(line: 106, column: 19, scope: !857)
!857 = distinct !DILexicalBlock(scope: !826, file: !3, line: 105, column: 69)
!858 = distinct !{!858, !850, !859}
!859 = !DILocation(line: 107, column: 5, scope: !826)
!860 = !DILocation(line: 109, column: 1, scope: !826)
!861 = distinct !DISubprogram(name: "modbus_connect", scope: !3, file: !3, line: 1724, type: !546, isLocal: false, isDefinition: true, scopeLine: 1725, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!862 = !DILocalVariable(name: "ctx", arg: 1, scope: !861, file: !3, line: 1724, type: !478)
!863 = !DILocation(line: 1724, column: 30, scope: !861)
!864 = !DILocation(line: 1726, column: 9, scope: !865)
!865 = distinct !DILexicalBlock(scope: !861, file: !3, line: 1726, column: 9)
!866 = !DILocation(line: 1726, column: 13, scope: !865)
!867 = !DILocation(line: 1726, column: 9, scope: !861)
!868 = !DILocation(line: 1727, column: 9, scope: !869)
!869 = distinct !DILexicalBlock(scope: !865, file: !3, line: 1726, column: 22)
!870 = !DILocation(line: 1727, column: 15, scope: !869)
!871 = !DILocation(line: 1728, column: 9, scope: !869)
!872 = !DILocation(line: 1731, column: 12, scope: !861)
!873 = !DILocation(line: 1731, column: 17, scope: !861)
!874 = !DILocation(line: 1731, column: 26, scope: !861)
!875 = !DILocation(line: 1731, column: 34, scope: !861)
!876 = !DILocation(line: 1731, column: 5, scope: !861)
!877 = !DILocation(line: 1732, column: 1, scope: !861)
!878 = distinct !DISubprogram(name: "_modbus_receive_msg", scope: !3, file: !3, line: 340, type: !879, isLocal: false, isDefinition: true, scopeLine: 341, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!879 = !DISubroutineType(types: !880)
!880 = !{!44, !478, !61, !881}
!881 = !DIDerivedType(tag: DW_TAG_typedef, name: "msg_type_t", file: !6, line: 57, baseType: !5)
!882 = !DILocalVariable(name: "ctx", arg: 1, scope: !878, file: !3, line: 340, type: !478)
!883 = !DILocation(line: 340, column: 35, scope: !878)
!884 = !DILocalVariable(name: "msg", arg: 2, scope: !878, file: !3, line: 340, type: !61)
!885 = !DILocation(line: 340, column: 49, scope: !878)
!886 = !DILocalVariable(name: "msg_type", arg: 3, scope: !878, file: !3, line: 340, type: !881)
!887 = !DILocation(line: 340, column: 65, scope: !878)
!888 = !DILocalVariable(name: "rc", scope: !878, file: !3, line: 342, type: !44)
!889 = !DILocation(line: 342, column: 9, scope: !878)
!890 = !DILocalVariable(name: "rset", scope: !878, file: !3, line: 343, type: !558)
!891 = !DILocation(line: 343, column: 12, scope: !878)
!892 = !DILocalVariable(name: "tv", scope: !878, file: !3, line: 344, type: !487)
!893 = !DILocation(line: 344, column: 20, scope: !878)
!894 = !DILocalVariable(name: "p_tv", scope: !878, file: !3, line: 345, type: !562)
!895 = !DILocation(line: 345, column: 21, scope: !878)
!896 = !DILocalVariable(name: "length_to_read", scope: !878, file: !3, line: 346, type: !44)
!897 = !DILocation(line: 346, column: 9, scope: !878)
!898 = !DILocalVariable(name: "msg_length", scope: !878, file: !3, line: 347, type: !44)
!899 = !DILocation(line: 347, column: 9, scope: !878)
!900 = !DILocalVariable(name: "step", scope: !878, file: !3, line: 348, type: !901)
!901 = !DIDerivedType(tag: DW_TAG_typedef, name: "_step_t", file: !3, line: 42, baseType: !10)
!902 = !DILocation(line: 348, column: 13, scope: !878)
!903 = !DILocation(line: 350, column: 9, scope: !904)
!904 = distinct !DILexicalBlock(scope: !878, file: !3, line: 350, column: 9)
!905 = !DILocation(line: 350, column: 14, scope: !904)
!906 = !DILocation(line: 350, column: 9, scope: !878)
!907 = !DILocation(line: 351, column: 13, scope: !908)
!908 = distinct !DILexicalBlock(scope: !909, file: !3, line: 351, column: 13)
!909 = distinct !DILexicalBlock(scope: !904, file: !3, line: 350, column: 21)
!910 = !DILocation(line: 351, column: 22, scope: !908)
!911 = !DILocation(line: 351, column: 13, scope: !909)
!912 = !DILocation(line: 352, column: 13, scope: !913)
!913 = distinct !DILexicalBlock(scope: !908, file: !3, line: 351, column: 41)
!914 = !DILocation(line: 353, column: 9, scope: !913)
!915 = !DILocation(line: 354, column: 13, scope: !916)
!916 = distinct !DILexicalBlock(scope: !908, file: !3, line: 353, column: 16)
!917 = !DILocation(line: 356, column: 5, scope: !909)
!918 = !DILocation(line: 359, column: 5, scope: !878)
!919 = distinct !{!919, !918, !918}
!920 = !DILocalVariable(name: "__d0", scope: !921, file: !3, line: 359, type: !44)
!921 = distinct !DILexicalBlock(scope: !878, file: !3, line: 359, column: 5)
!922 = !DILocation(line: 359, column: 5, scope: !921)
!923 = !DILocalVariable(name: "__d1", scope: !921, file: !3, line: 359, type: !44)
!924 = !{i32 -2146758666}
!925 = !DILocation(line: 360, column: 5, scope: !878)
!926 = !DILocation(line: 365, column: 10, scope: !878)
!927 = !DILocation(line: 366, column: 22, scope: !878)
!928 = !DILocation(line: 366, column: 27, scope: !878)
!929 = !DILocation(line: 366, column: 36, scope: !878)
!930 = !DILocation(line: 366, column: 50, scope: !878)
!931 = !DILocation(line: 366, column: 20, scope: !878)
!932 = !DILocation(line: 368, column: 9, scope: !933)
!933 = distinct !DILexicalBlock(scope: !878, file: !3, line: 368, column: 9)
!934 = !DILocation(line: 368, column: 18, scope: !933)
!935 = !DILocation(line: 368, column: 9, scope: !878)
!936 = !DILocation(line: 371, column: 13, scope: !937)
!937 = distinct !DILexicalBlock(scope: !938, file: !3, line: 371, column: 13)
!938 = distinct !DILexicalBlock(scope: !933, file: !3, line: 368, column: 37)
!939 = !DILocation(line: 371, column: 18, scope: !937)
!940 = !DILocation(line: 371, column: 37, scope: !937)
!941 = !DILocation(line: 371, column: 44, scope: !937)
!942 = !DILocation(line: 371, column: 49, scope: !937)
!943 = !DILocation(line: 371, column: 52, scope: !937)
!944 = !DILocation(line: 371, column: 57, scope: !937)
!945 = !DILocation(line: 371, column: 76, scope: !937)
!946 = !DILocation(line: 371, column: 84, scope: !937)
!947 = !DILocation(line: 371, column: 13, scope: !938)
!948 = !DILocation(line: 373, column: 18, scope: !949)
!949 = distinct !DILexicalBlock(scope: !937, file: !3, line: 371, column: 90)
!950 = !DILocation(line: 374, column: 9, scope: !949)
!951 = !DILocation(line: 376, column: 25, scope: !952)
!952 = distinct !DILexicalBlock(scope: !937, file: !3, line: 374, column: 16)
!953 = !DILocation(line: 376, column: 30, scope: !952)
!954 = !DILocation(line: 376, column: 49, scope: !952)
!955 = !DILocation(line: 376, column: 16, scope: !952)
!956 = !DILocation(line: 376, column: 23, scope: !952)
!957 = !DILocation(line: 377, column: 26, scope: !952)
!958 = !DILocation(line: 377, column: 31, scope: !952)
!959 = !DILocation(line: 377, column: 50, scope: !952)
!960 = !DILocation(line: 377, column: 16, scope: !952)
!961 = !DILocation(line: 377, column: 24, scope: !952)
!962 = !DILocation(line: 378, column: 18, scope: !952)
!963 = !DILocation(line: 380, column: 5, scope: !938)
!964 = !DILocation(line: 381, column: 21, scope: !965)
!965 = distinct !DILexicalBlock(scope: !933, file: !3, line: 380, column: 12)
!966 = !DILocation(line: 381, column: 26, scope: !965)
!967 = !DILocation(line: 381, column: 43, scope: !965)
!968 = !DILocation(line: 381, column: 12, scope: !965)
!969 = !DILocation(line: 381, column: 19, scope: !965)
!970 = !DILocation(line: 382, column: 22, scope: !965)
!971 = !DILocation(line: 382, column: 27, scope: !965)
!972 = !DILocation(line: 382, column: 44, scope: !965)
!973 = !DILocation(line: 382, column: 12, scope: !965)
!974 = !DILocation(line: 382, column: 20, scope: !965)
!975 = !DILocation(line: 383, column: 14, scope: !965)
!976 = !DILocation(line: 386, column: 5, scope: !878)
!977 = !DILocation(line: 386, column: 12, scope: !878)
!978 = !DILocation(line: 386, column: 27, scope: !878)
!979 = !DILocation(line: 387, column: 14, scope: !980)
!980 = distinct !DILexicalBlock(scope: !878, file: !3, line: 386, column: 33)
!981 = !DILocation(line: 387, column: 19, scope: !980)
!982 = !DILocation(line: 387, column: 28, scope: !980)
!983 = !DILocation(line: 387, column: 35, scope: !980)
!984 = !DILocation(line: 387, column: 47, scope: !980)
!985 = !DILocation(line: 387, column: 53, scope: !980)
!986 = !DILocation(line: 387, column: 12, scope: !980)
!987 = !DILocation(line: 388, column: 13, scope: !988)
!988 = distinct !DILexicalBlock(scope: !980, file: !3, line: 388, column: 13)
!989 = !DILocation(line: 388, column: 16, scope: !988)
!990 = !DILocation(line: 388, column: 13, scope: !980)
!991 = !DILocation(line: 389, column: 26, scope: !992)
!992 = distinct !DILexicalBlock(scope: !988, file: !3, line: 388, column: 23)
!993 = !DILocation(line: 389, column: 13, scope: !992)
!994 = !DILocation(line: 390, column: 17, scope: !995)
!995 = distinct !DILexicalBlock(scope: !992, file: !3, line: 390, column: 17)
!996 = !DILocation(line: 390, column: 22, scope: !995)
!997 = !DILocation(line: 390, column: 37, scope: !995)
!998 = !DILocation(line: 390, column: 17, scope: !992)
!999 = !DILocalVariable(name: "saved_errno", scope: !1000, file: !3, line: 391, type: !44)
!1000 = distinct !DILexicalBlock(scope: !995, file: !3, line: 390, column: 67)
!1001 = !DILocation(line: 391, column: 21, scope: !1000)
!1002 = !DILocation(line: 391, column: 35, scope: !1000)
!1003 = !DILocation(line: 393, column: 21, scope: !1004)
!1004 = distinct !DILexicalBlock(scope: !1000, file: !3, line: 393, column: 21)
!1005 = !DILocation(line: 393, column: 27, scope: !1004)
!1006 = !DILocation(line: 393, column: 21, scope: !1000)
!1007 = !DILocation(line: 394, column: 45, scope: !1008)
!1008 = distinct !DILexicalBlock(scope: !1004, file: !3, line: 393, column: 41)
!1009 = !DILocation(line: 394, column: 21, scope: !1008)
!1010 = !DILocation(line: 395, column: 34, scope: !1008)
!1011 = !DILocation(line: 395, column: 21, scope: !1008)
!1012 = !DILocation(line: 396, column: 17, scope: !1008)
!1013 = !DILocation(line: 396, column: 28, scope: !1014)
!1014 = distinct !DILexicalBlock(scope: !1004, file: !3, line: 396, column: 28)
!1015 = !DILocation(line: 396, column: 34, scope: !1014)
!1016 = !DILocation(line: 396, column: 28, scope: !1004)
!1017 = !DILocation(line: 397, column: 34, scope: !1018)
!1018 = distinct !DILexicalBlock(scope: !1014, file: !3, line: 396, column: 44)
!1019 = !DILocation(line: 397, column: 21, scope: !1018)
!1020 = !DILocation(line: 398, column: 36, scope: !1018)
!1021 = !DILocation(line: 398, column: 21, scope: !1018)
!1022 = !DILocation(line: 399, column: 17, scope: !1018)
!1023 = !DILocation(line: 400, column: 25, scope: !1000)
!1024 = !DILocation(line: 400, column: 17, scope: !1000)
!1025 = !DILocation(line: 400, column: 23, scope: !1000)
!1026 = !DILocation(line: 401, column: 13, scope: !1000)
!1027 = !DILocation(line: 402, column: 13, scope: !992)
!1028 = !DILocation(line: 405, column: 14, scope: !980)
!1029 = !DILocation(line: 405, column: 19, scope: !980)
!1030 = !DILocation(line: 405, column: 28, scope: !980)
!1031 = !DILocation(line: 405, column: 33, scope: !980)
!1032 = !DILocation(line: 405, column: 38, scope: !980)
!1033 = !DILocation(line: 405, column: 44, scope: !980)
!1034 = !DILocation(line: 405, column: 42, scope: !980)
!1035 = !DILocation(line: 405, column: 56, scope: !980)
!1036 = !DILocation(line: 405, column: 12, scope: !980)
!1037 = !DILocation(line: 406, column: 13, scope: !1038)
!1038 = distinct !DILexicalBlock(scope: !980, file: !3, line: 406, column: 13)
!1039 = !DILocation(line: 406, column: 16, scope: !1038)
!1040 = !DILocation(line: 406, column: 13, scope: !980)
!1041 = !DILocation(line: 407, column: 13, scope: !1042)
!1042 = distinct !DILexicalBlock(scope: !1038, file: !3, line: 406, column: 22)
!1043 = !DILocation(line: 407, column: 19, scope: !1042)
!1044 = !DILocation(line: 408, column: 16, scope: !1042)
!1045 = !DILocation(line: 409, column: 9, scope: !1042)
!1046 = !DILocation(line: 411, column: 13, scope: !1047)
!1047 = distinct !DILexicalBlock(scope: !980, file: !3, line: 411, column: 13)
!1048 = !DILocation(line: 411, column: 16, scope: !1047)
!1049 = !DILocation(line: 411, column: 13, scope: !980)
!1050 = !DILocation(line: 412, column: 26, scope: !1051)
!1051 = distinct !DILexicalBlock(scope: !1047, file: !3, line: 411, column: 23)
!1052 = !DILocation(line: 412, column: 13, scope: !1051)
!1053 = !DILocation(line: 413, column: 18, scope: !1054)
!1054 = distinct !DILexicalBlock(scope: !1051, file: !3, line: 413, column: 17)
!1055 = !DILocation(line: 413, column: 23, scope: !1054)
!1056 = !DILocation(line: 413, column: 38, scope: !1054)
!1057 = !DILocation(line: 413, column: 68, scope: !1054)
!1058 = !DILocation(line: 414, column: 18, scope: !1054)
!1059 = !DILocation(line: 414, column: 24, scope: !1054)
!1060 = !DILocation(line: 414, column: 38, scope: !1054)
!1061 = !DILocation(line: 414, column: 41, scope: !1054)
!1062 = !DILocation(line: 414, column: 47, scope: !1054)
!1063 = !DILocation(line: 414, column: 63, scope: !1054)
!1064 = !DILocation(line: 415, column: 18, scope: !1054)
!1065 = !DILocation(line: 415, column: 24, scope: !1054)
!1066 = !DILocation(line: 413, column: 17, scope: !1051)
!1067 = !DILocalVariable(name: "saved_errno", scope: !1068, file: !3, line: 416, type: !44)
!1068 = distinct !DILexicalBlock(scope: !1054, file: !3, line: 415, column: 35)
!1069 = !DILocation(line: 416, column: 21, scope: !1068)
!1070 = !DILocation(line: 416, column: 35, scope: !1068)
!1071 = !DILocation(line: 417, column: 30, scope: !1068)
!1072 = !DILocation(line: 417, column: 17, scope: !1068)
!1073 = !DILocation(line: 418, column: 32, scope: !1068)
!1074 = !DILocation(line: 418, column: 17, scope: !1068)
!1075 = !DILocation(line: 420, column: 25, scope: !1068)
!1076 = !DILocation(line: 420, column: 17, scope: !1068)
!1077 = !DILocation(line: 420, column: 23, scope: !1068)
!1078 = !DILocation(line: 421, column: 13, scope: !1068)
!1079 = !DILocation(line: 422, column: 13, scope: !1051)
!1080 = !DILocation(line: 426, column: 13, scope: !1081)
!1081 = distinct !DILexicalBlock(scope: !980, file: !3, line: 426, column: 13)
!1082 = !DILocation(line: 426, column: 18, scope: !1081)
!1083 = !DILocation(line: 426, column: 13, scope: !980)
!1084 = !DILocalVariable(name: "i", scope: !1085, file: !3, line: 427, type: !44)
!1085 = distinct !DILexicalBlock(scope: !1081, file: !3, line: 426, column: 25)
!1086 = !DILocation(line: 427, column: 17, scope: !1085)
!1087 = !DILocation(line: 428, column: 19, scope: !1088)
!1088 = distinct !DILexicalBlock(scope: !1085, file: !3, line: 428, column: 13)
!1089 = !DILocation(line: 428, column: 18, scope: !1088)
!1090 = !DILocation(line: 428, column: 23, scope: !1091)
!1091 = distinct !DILexicalBlock(scope: !1088, file: !3, line: 428, column: 13)
!1092 = !DILocation(line: 428, column: 27, scope: !1091)
!1093 = !DILocation(line: 428, column: 25, scope: !1091)
!1094 = !DILocation(line: 428, column: 13, scope: !1088)
!1095 = !DILocation(line: 429, column: 34, scope: !1091)
!1096 = !DILocation(line: 429, column: 38, scope: !1091)
!1097 = !DILocation(line: 429, column: 51, scope: !1091)
!1098 = !DILocation(line: 429, column: 49, scope: !1091)
!1099 = !DILocation(line: 429, column: 17, scope: !1091)
!1100 = !DILocation(line: 428, column: 32, scope: !1091)
!1101 = !DILocation(line: 428, column: 13, scope: !1091)
!1102 = distinct !{!1102, !1094, !1103}
!1103 = !DILocation(line: 429, column: 53, scope: !1088)
!1104 = !DILocation(line: 430, column: 9, scope: !1085)
!1105 = !DILocation(line: 433, column: 23, scope: !980)
!1106 = !DILocation(line: 433, column: 20, scope: !980)
!1107 = !DILocation(line: 435, column: 27, scope: !980)
!1108 = !DILocation(line: 435, column: 24, scope: !980)
!1109 = !DILocation(line: 437, column: 13, scope: !1110)
!1110 = distinct !DILexicalBlock(scope: !980, file: !3, line: 437, column: 13)
!1111 = !DILocation(line: 437, column: 28, scope: !1110)
!1112 = !DILocation(line: 437, column: 13, scope: !980)
!1113 = !DILocation(line: 438, column: 21, scope: !1114)
!1114 = distinct !DILexicalBlock(scope: !1110, file: !3, line: 437, column: 34)
!1115 = !DILocation(line: 438, column: 13, scope: !1114)
!1116 = !DILocation(line: 442, column: 21, scope: !1117)
!1117 = distinct !DILexicalBlock(scope: !1114, file: !3, line: 438, column: 27)
!1118 = !DILocation(line: 442, column: 25, scope: !1117)
!1119 = !DILocation(line: 442, column: 30, scope: !1117)
!1120 = !DILocation(line: 442, column: 39, scope: !1117)
!1121 = !DILocation(line: 443, column: 21, scope: !1117)
!1122 = !DILocation(line: 441, column: 34, scope: !1117)
!1123 = !DILocation(line: 441, column: 32, scope: !1117)
!1124 = !DILocation(line: 444, column: 21, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1117, file: !3, line: 444, column: 21)
!1126 = !DILocation(line: 444, column: 36, scope: !1125)
!1127 = !DILocation(line: 444, column: 21, scope: !1117)
!1128 = !DILocation(line: 445, column: 26, scope: !1129)
!1129 = distinct !DILexicalBlock(scope: !1125, file: !3, line: 444, column: 42)
!1130 = !DILocation(line: 446, column: 21, scope: !1129)
!1131 = !DILocation(line: 444, column: 39, scope: !1125)
!1132 = !DILocation(line: 450, column: 21, scope: !1117)
!1133 = !DILocation(line: 450, column: 26, scope: !1117)
!1134 = !DILocation(line: 450, column: 31, scope: !1117)
!1135 = !DILocation(line: 449, column: 34, scope: !1117)
!1136 = !DILocation(line: 449, column: 32, scope: !1117)
!1137 = !DILocation(line: 451, column: 22, scope: !1138)
!1138 = distinct !DILexicalBlock(scope: !1117, file: !3, line: 451, column: 21)
!1139 = !DILocation(line: 451, column: 35, scope: !1138)
!1140 = !DILocation(line: 451, column: 33, scope: !1138)
!1141 = !DILocation(line: 451, column: 58, scope: !1138)
!1142 = !DILocation(line: 451, column: 63, scope: !1138)
!1143 = !DILocation(line: 451, column: 72, scope: !1138)
!1144 = !DILocation(line: 451, column: 51, scope: !1138)
!1145 = !DILocation(line: 451, column: 21, scope: !1117)
!1146 = !DILocation(line: 452, column: 21, scope: !1147)
!1147 = distinct !DILexicalBlock(scope: !1138, file: !3, line: 451, column: 88)
!1148 = !DILocation(line: 452, column: 27, scope: !1147)
!1149 = !DILocation(line: 453, column: 34, scope: !1147)
!1150 = !DILocation(line: 453, column: 21, scope: !1147)
!1151 = !DILocation(line: 454, column: 21, scope: !1147)
!1152 = !DILocation(line: 456, column: 22, scope: !1117)
!1153 = !DILocation(line: 457, column: 17, scope: !1117)
!1154 = !DILocation(line: 459, column: 17, scope: !1117)
!1155 = !DILocation(line: 461, column: 9, scope: !1114)
!1156 = !DILocation(line: 463, column: 13, scope: !1157)
!1157 = distinct !DILexicalBlock(scope: !980, file: !3, line: 463, column: 13)
!1158 = !DILocation(line: 463, column: 28, scope: !1157)
!1159 = !DILocation(line: 463, column: 32, scope: !1157)
!1160 = !DILocation(line: 464, column: 14, scope: !1157)
!1161 = !DILocation(line: 464, column: 19, scope: !1157)
!1162 = !DILocation(line: 464, column: 32, scope: !1157)
!1163 = !DILocation(line: 464, column: 39, scope: !1157)
!1164 = !DILocation(line: 464, column: 43, scope: !1157)
!1165 = !DILocation(line: 464, column: 46, scope: !1157)
!1166 = !DILocation(line: 464, column: 51, scope: !1157)
!1167 = !DILocation(line: 464, column: 64, scope: !1157)
!1168 = !DILocation(line: 464, column: 72, scope: !1157)
!1169 = !DILocation(line: 463, column: 13, scope: !980)
!1170 = !DILocation(line: 468, column: 25, scope: !1171)
!1171 = distinct !DILexicalBlock(scope: !1157, file: !3, line: 464, column: 78)
!1172 = !DILocation(line: 468, column: 30, scope: !1171)
!1173 = !DILocation(line: 468, column: 43, scope: !1171)
!1174 = !DILocation(line: 468, column: 16, scope: !1171)
!1175 = !DILocation(line: 468, column: 23, scope: !1171)
!1176 = !DILocation(line: 469, column: 26, scope: !1171)
!1177 = !DILocation(line: 469, column: 31, scope: !1171)
!1178 = !DILocation(line: 469, column: 44, scope: !1171)
!1179 = !DILocation(line: 469, column: 16, scope: !1171)
!1180 = !DILocation(line: 469, column: 24, scope: !1171)
!1181 = !DILocation(line: 470, column: 18, scope: !1171)
!1182 = !DILocation(line: 471, column: 9, scope: !1171)
!1183 = distinct !{!1183, !976, !1184}
!1184 = !DILocation(line: 474, column: 5, scope: !878)
!1185 = !DILocation(line: 476, column: 9, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !878, file: !3, line: 476, column: 9)
!1187 = !DILocation(line: 476, column: 14, scope: !1186)
!1188 = !DILocation(line: 476, column: 9, scope: !878)
!1189 = !DILocation(line: 477, column: 9, scope: !1186)
!1190 = !DILocation(line: 479, column: 12, scope: !878)
!1191 = !DILocation(line: 479, column: 17, scope: !878)
!1192 = !DILocation(line: 479, column: 26, scope: !878)
!1193 = !DILocation(line: 479, column: 42, scope: !878)
!1194 = !DILocation(line: 479, column: 47, scope: !878)
!1195 = !DILocation(line: 479, column: 52, scope: !878)
!1196 = !DILocation(line: 479, column: 5, scope: !878)
!1197 = !DILocation(line: 480, column: 1, scope: !878)
!1198 = distinct !DISubprogram(name: "compute_meta_length_after_function", scope: !3, file: !3, line: 252, type: !1199, isLocal: true, isDefinition: true, scopeLine: 254, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!1199 = !DISubroutineType(types: !1200)
!1200 = !{!45, !44, !881}
!1201 = !DILocalVariable(name: "function", arg: 1, scope: !1198, file: !3, line: 252, type: !44)
!1202 = !DILocation(line: 252, column: 55, scope: !1198)
!1203 = !DILocalVariable(name: "msg_type", arg: 2, scope: !1198, file: !3, line: 253, type: !881)
!1204 = !DILocation(line: 253, column: 62, scope: !1198)
!1205 = !DILocalVariable(name: "length", scope: !1198, file: !3, line: 255, type: !44)
!1206 = !DILocation(line: 255, column: 9, scope: !1198)
!1207 = !DILocation(line: 257, column: 9, scope: !1208)
!1208 = distinct !DILexicalBlock(scope: !1198, file: !3, line: 257, column: 9)
!1209 = !DILocation(line: 257, column: 18, scope: !1208)
!1210 = !DILocation(line: 257, column: 9, scope: !1198)
!1211 = !DILocation(line: 258, column: 13, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1213, file: !3, line: 258, column: 13)
!1213 = distinct !DILexicalBlock(scope: !1208, file: !3, line: 257, column: 37)
!1214 = !DILocation(line: 258, column: 22, scope: !1212)
!1215 = !DILocation(line: 258, column: 13, scope: !1213)
!1216 = !DILocation(line: 259, column: 20, scope: !1217)
!1217 = distinct !DILexicalBlock(scope: !1212, file: !3, line: 258, column: 58)
!1218 = !DILocation(line: 260, column: 9, scope: !1217)
!1219 = !DILocation(line: 260, column: 20, scope: !1220)
!1220 = distinct !DILexicalBlock(scope: !1212, file: !3, line: 260, column: 20)
!1221 = !DILocation(line: 260, column: 29, scope: !1220)
!1222 = !DILocation(line: 260, column: 63, scope: !1220)
!1223 = !DILocation(line: 261, column: 20, scope: !1220)
!1224 = !DILocation(line: 261, column: 29, scope: !1220)
!1225 = !DILocation(line: 260, column: 20, scope: !1212)
!1226 = !DILocation(line: 262, column: 20, scope: !1227)
!1227 = distinct !DILexicalBlock(scope: !1220, file: !3, line: 261, column: 68)
!1228 = !DILocation(line: 263, column: 9, scope: !1227)
!1229 = !DILocation(line: 263, column: 20, scope: !1230)
!1230 = distinct !DILexicalBlock(scope: !1220, file: !3, line: 263, column: 20)
!1231 = !DILocation(line: 263, column: 29, scope: !1230)
!1232 = !DILocation(line: 263, column: 20, scope: !1220)
!1233 = !DILocation(line: 264, column: 20, scope: !1234)
!1234 = distinct !DILexicalBlock(scope: !1230, file: !3, line: 263, column: 63)
!1235 = !DILocation(line: 265, column: 9, scope: !1234)
!1236 = !DILocation(line: 265, column: 20, scope: !1237)
!1237 = distinct !DILexicalBlock(scope: !1230, file: !3, line: 265, column: 20)
!1238 = !DILocation(line: 265, column: 29, scope: !1237)
!1239 = !DILocation(line: 265, column: 20, scope: !1230)
!1240 = !DILocation(line: 266, column: 20, scope: !1241)
!1241 = distinct !DILexicalBlock(scope: !1237, file: !3, line: 265, column: 68)
!1242 = !DILocation(line: 267, column: 9, scope: !1241)
!1243 = !DILocation(line: 269, column: 20, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1237, file: !3, line: 267, column: 16)
!1245 = !DILocation(line: 271, column: 5, scope: !1213)
!1246 = !DILocation(line: 273, column: 17, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !1208, file: !3, line: 271, column: 12)
!1248 = !DILocation(line: 273, column: 9, scope: !1247)
!1249 = !DILocation(line: 278, column: 20, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1247, file: !3, line: 273, column: 27)
!1251 = !DILocation(line: 279, column: 13, scope: !1250)
!1252 = !DILocation(line: 281, column: 20, scope: !1250)
!1253 = !DILocation(line: 282, column: 13, scope: !1250)
!1254 = !DILocation(line: 284, column: 20, scope: !1250)
!1255 = !DILocation(line: 285, column: 9, scope: !1250)
!1256 = !DILocation(line: 288, column: 12, scope: !1198)
!1257 = !DILocation(line: 288, column: 5, scope: !1198)
!1258 = distinct !DISubprogram(name: "compute_data_length_after_meta", scope: !3, file: !3, line: 292, type: !879, isLocal: true, isDefinition: true, scopeLine: 294, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!1259 = !DILocalVariable(name: "ctx", arg: 1, scope: !1258, file: !3, line: 292, type: !478)
!1260 = !DILocation(line: 292, column: 53, scope: !1258)
!1261 = !DILocalVariable(name: "msg", arg: 2, scope: !1258, file: !3, line: 292, type: !61)
!1262 = !DILocation(line: 292, column: 67, scope: !1258)
!1263 = !DILocalVariable(name: "msg_type", arg: 3, scope: !1258, file: !3, line: 293, type: !881)
!1264 = !DILocation(line: 293, column: 54, scope: !1258)
!1265 = !DILocalVariable(name: "function", scope: !1258, file: !3, line: 295, type: !44)
!1266 = !DILocation(line: 295, column: 9, scope: !1258)
!1267 = !DILocation(line: 295, column: 20, scope: !1258)
!1268 = !DILocation(line: 295, column: 24, scope: !1258)
!1269 = !DILocation(line: 295, column: 29, scope: !1258)
!1270 = !DILocation(line: 295, column: 38, scope: !1258)
!1271 = !DILocalVariable(name: "length", scope: !1258, file: !3, line: 296, type: !44)
!1272 = !DILocation(line: 296, column: 9, scope: !1258)
!1273 = !DILocation(line: 298, column: 9, scope: !1274)
!1274 = distinct !DILexicalBlock(scope: !1258, file: !3, line: 298, column: 9)
!1275 = !DILocation(line: 298, column: 18, scope: !1274)
!1276 = !DILocation(line: 298, column: 9, scope: !1258)
!1277 = !DILocation(line: 299, column: 17, scope: !1278)
!1278 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 298, column: 37)
!1279 = !DILocation(line: 299, column: 9, scope: !1278)
!1280 = !DILocation(line: 302, column: 22, scope: !1281)
!1281 = distinct !DILexicalBlock(scope: !1278, file: !3, line: 299, column: 27)
!1282 = !DILocation(line: 302, column: 26, scope: !1281)
!1283 = !DILocation(line: 302, column: 31, scope: !1281)
!1284 = !DILocation(line: 302, column: 40, scope: !1281)
!1285 = !DILocation(line: 302, column: 54, scope: !1281)
!1286 = !DILocation(line: 302, column: 20, scope: !1281)
!1287 = !DILocation(line: 303, column: 13, scope: !1281)
!1288 = !DILocation(line: 305, column: 22, scope: !1281)
!1289 = !DILocation(line: 305, column: 26, scope: !1281)
!1290 = !DILocation(line: 305, column: 31, scope: !1281)
!1291 = !DILocation(line: 305, column: 40, scope: !1281)
!1292 = !DILocation(line: 305, column: 54, scope: !1281)
!1293 = !DILocation(line: 305, column: 20, scope: !1281)
!1294 = !DILocation(line: 306, column: 13, scope: !1281)
!1295 = !DILocation(line: 308, column: 20, scope: !1281)
!1296 = !DILocation(line: 309, column: 9, scope: !1281)
!1297 = !DILocation(line: 310, column: 5, scope: !1278)
!1298 = !DILocation(line: 312, column: 13, scope: !1299)
!1299 = distinct !DILexicalBlock(scope: !1300, file: !3, line: 312, column: 13)
!1300 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 310, column: 12)
!1301 = !DILocation(line: 312, column: 22, scope: !1299)
!1302 = !DILocation(line: 312, column: 56, scope: !1299)
!1303 = !DILocation(line: 313, column: 13, scope: !1299)
!1304 = !DILocation(line: 313, column: 22, scope: !1299)
!1305 = !DILocation(line: 313, column: 51, scope: !1299)
!1306 = !DILocation(line: 314, column: 13, scope: !1299)
!1307 = !DILocation(line: 314, column: 22, scope: !1299)
!1308 = !DILocation(line: 312, column: 13, scope: !1300)
!1309 = !DILocation(line: 315, column: 22, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1299, file: !3, line: 314, column: 61)
!1311 = !DILocation(line: 315, column: 26, scope: !1310)
!1312 = !DILocation(line: 315, column: 31, scope: !1310)
!1313 = !DILocation(line: 315, column: 40, scope: !1310)
!1314 = !DILocation(line: 315, column: 54, scope: !1310)
!1315 = !DILocation(line: 315, column: 20, scope: !1310)
!1316 = !DILocation(line: 316, column: 9, scope: !1310)
!1317 = !DILocation(line: 317, column: 20, scope: !1318)
!1318 = distinct !DILexicalBlock(scope: !1299, file: !3, line: 316, column: 16)
!1319 = !DILocation(line: 321, column: 15, scope: !1258)
!1320 = !DILocation(line: 321, column: 20, scope: !1258)
!1321 = !DILocation(line: 321, column: 29, scope: !1258)
!1322 = !DILocation(line: 321, column: 12, scope: !1258)
!1323 = !DILocation(line: 323, column: 12, scope: !1258)
!1324 = !DILocation(line: 323, column: 5, scope: !1258)
!1325 = distinct !DISubprogram(name: "modbus_receive", scope: !3, file: !3, line: 483, type: !530, isLocal: false, isDefinition: true, scopeLine: 484, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!1326 = !DILocalVariable(name: "ctx", arg: 1, scope: !1325, file: !3, line: 483, type: !478)
!1327 = !DILocation(line: 483, column: 30, scope: !1325)
!1328 = !DILocalVariable(name: "req", arg: 2, scope: !1325, file: !3, line: 483, type: !61)
!1329 = !DILocation(line: 483, column: 44, scope: !1325)
!1330 = !DILocation(line: 485, column: 9, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1325, file: !3, line: 485, column: 9)
!1332 = !DILocation(line: 485, column: 13, scope: !1331)
!1333 = !DILocation(line: 485, column: 9, scope: !1325)
!1334 = !DILocation(line: 486, column: 9, scope: !1335)
!1335 = distinct !DILexicalBlock(scope: !1331, file: !3, line: 485, column: 22)
!1336 = !DILocation(line: 486, column: 15, scope: !1335)
!1337 = !DILocation(line: 487, column: 9, scope: !1335)
!1338 = !DILocation(line: 490, column: 12, scope: !1325)
!1339 = !DILocation(line: 490, column: 17, scope: !1325)
!1340 = !DILocation(line: 490, column: 26, scope: !1325)
!1341 = !DILocation(line: 490, column: 34, scope: !1325)
!1342 = !DILocation(line: 490, column: 39, scope: !1325)
!1343 = !DILocation(line: 490, column: 5, scope: !1325)
!1344 = !DILocation(line: 491, column: 1, scope: !1325)
!1345 = distinct !DISubprogram(name: "modbus_receive_confirmation", scope: !3, file: !3, line: 501, type: !530, isLocal: false, isDefinition: true, scopeLine: 502, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!1346 = !DILocalVariable(name: "ctx", arg: 1, scope: !1345, file: !3, line: 501, type: !478)
!1347 = !DILocation(line: 501, column: 43, scope: !1345)
!1348 = !DILocalVariable(name: "rsp", arg: 2, scope: !1345, file: !3, line: 501, type: !61)
!1349 = !DILocation(line: 501, column: 57, scope: !1345)
!1350 = !DILocation(line: 503, column: 9, scope: !1351)
!1351 = distinct !DILexicalBlock(scope: !1345, file: !3, line: 503, column: 9)
!1352 = !DILocation(line: 503, column: 13, scope: !1351)
!1353 = !DILocation(line: 503, column: 9, scope: !1345)
!1354 = !DILocation(line: 504, column: 9, scope: !1355)
!1355 = distinct !DILexicalBlock(scope: !1351, file: !3, line: 503, column: 22)
!1356 = !DILocation(line: 504, column: 15, scope: !1355)
!1357 = !DILocation(line: 505, column: 9, scope: !1355)
!1358 = !DILocation(line: 508, column: 32, scope: !1345)
!1359 = !DILocation(line: 508, column: 37, scope: !1345)
!1360 = !DILocation(line: 508, column: 12, scope: !1345)
!1361 = !DILocation(line: 508, column: 5, scope: !1345)
!1362 = !DILocation(line: 509, column: 1, scope: !1345)
!1363 = distinct !DISubprogram(name: "modbus_reply", scope: !3, file: !3, line: 705, type: !1364, isLocal: false, isDefinition: true, scopeLine: 707, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!1364 = !DISubroutineType(types: !1365)
!1365 = !{!44, !478, !171, !44, !48}
!1366 = !DILocalVariable(name: "ctx", arg: 1, scope: !1363, file: !3, line: 705, type: !478)
!1367 = !DILocation(line: 705, column: 28, scope: !1363)
!1368 = !DILocalVariable(name: "req", arg: 2, scope: !1363, file: !3, line: 705, type: !171)
!1369 = !DILocation(line: 705, column: 48, scope: !1363)
!1370 = !DILocalVariable(name: "req_length", arg: 3, scope: !1363, file: !3, line: 706, type: !44)
!1371 = !DILocation(line: 706, column: 22, scope: !1363)
!1372 = !DILocalVariable(name: "mb_mapping", arg: 4, scope: !1363, file: !3, line: 706, type: !48)
!1373 = !DILocation(line: 706, column: 52, scope: !1363)
!1374 = !DILocalVariable(name: "offset", scope: !1363, file: !3, line: 708, type: !44)
!1375 = !DILocation(line: 708, column: 9, scope: !1363)
!1376 = !DILocalVariable(name: "slave", scope: !1363, file: !3, line: 709, type: !44)
!1377 = !DILocation(line: 709, column: 9, scope: !1363)
!1378 = !DILocalVariable(name: "function", scope: !1363, file: !3, line: 710, type: !44)
!1379 = !DILocation(line: 710, column: 9, scope: !1363)
!1380 = !DILocalVariable(name: "address", scope: !1363, file: !3, line: 711, type: !65)
!1381 = !DILocation(line: 711, column: 14, scope: !1363)
!1382 = !DILocalVariable(name: "rsp", scope: !1363, file: !3, line: 712, type: !636)
!1383 = !DILocation(line: 712, column: 13, scope: !1363)
!1384 = !DILocalVariable(name: "rsp_length", scope: !1363, file: !3, line: 713, type: !44)
!1385 = !DILocation(line: 713, column: 9, scope: !1363)
!1386 = !DILocalVariable(name: "sft", scope: !1363, file: !3, line: 714, type: !516)
!1387 = !DILocation(line: 714, column: 11, scope: !1363)
!1388 = !DILocation(line: 716, column: 9, scope: !1389)
!1389 = distinct !DILexicalBlock(scope: !1363, file: !3, line: 716, column: 9)
!1390 = !DILocation(line: 716, column: 13, scope: !1389)
!1391 = !DILocation(line: 716, column: 9, scope: !1363)
!1392 = !DILocation(line: 717, column: 9, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1389, file: !3, line: 716, column: 22)
!1394 = !DILocation(line: 717, column: 15, scope: !1393)
!1395 = !DILocation(line: 718, column: 9, scope: !1393)
!1396 = !DILocation(line: 721, column: 14, scope: !1363)
!1397 = !DILocation(line: 721, column: 19, scope: !1363)
!1398 = !DILocation(line: 721, column: 28, scope: !1363)
!1399 = !DILocation(line: 721, column: 12, scope: !1363)
!1400 = !DILocation(line: 722, column: 13, scope: !1363)
!1401 = !DILocation(line: 722, column: 17, scope: !1363)
!1402 = !DILocation(line: 722, column: 24, scope: !1363)
!1403 = !DILocation(line: 722, column: 11, scope: !1363)
!1404 = !DILocation(line: 723, column: 16, scope: !1363)
!1405 = !DILocation(line: 723, column: 20, scope: !1363)
!1406 = !DILocation(line: 723, column: 14, scope: !1363)
!1407 = !DILocation(line: 724, column: 16, scope: !1363)
!1408 = !DILocation(line: 724, column: 20, scope: !1363)
!1409 = !DILocation(line: 724, column: 27, scope: !1363)
!1410 = !DILocation(line: 724, column: 32, scope: !1363)
!1411 = !DILocation(line: 724, column: 40, scope: !1363)
!1412 = !DILocation(line: 724, column: 44, scope: !1363)
!1413 = !DILocation(line: 724, column: 51, scope: !1363)
!1414 = !DILocation(line: 724, column: 38, scope: !1363)
!1415 = !DILocation(line: 724, column: 15, scope: !1363)
!1416 = !DILocation(line: 724, column: 13, scope: !1363)
!1417 = !DILocation(line: 726, column: 17, scope: !1363)
!1418 = !DILocation(line: 726, column: 9, scope: !1363)
!1419 = !DILocation(line: 726, column: 15, scope: !1363)
!1420 = !DILocation(line: 727, column: 20, scope: !1363)
!1421 = !DILocation(line: 727, column: 9, scope: !1363)
!1422 = !DILocation(line: 727, column: 18, scope: !1363)
!1423 = !DILocation(line: 728, column: 16, scope: !1363)
!1424 = !DILocation(line: 728, column: 21, scope: !1363)
!1425 = !DILocation(line: 728, column: 30, scope: !1363)
!1426 = !DILocation(line: 728, column: 51, scope: !1363)
!1427 = !DILocation(line: 728, column: 9, scope: !1363)
!1428 = !DILocation(line: 728, column: 14, scope: !1363)
!1429 = !DILocation(line: 731, column: 13, scope: !1363)
!1430 = !DILocation(line: 731, column: 5, scope: !1363)
!1431 = !DILocalVariable(name: "is_input", scope: !1432, file: !3, line: 734, type: !72)
!1432 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 733, column: 42)
!1433 = distinct !DILexicalBlock(scope: !1363, file: !3, line: 731, column: 23)
!1434 = !DILocation(line: 734, column: 22, scope: !1432)
!1435 = !DILocation(line: 734, column: 34, scope: !1432)
!1436 = !DILocation(line: 734, column: 43, scope: !1432)
!1437 = !DILocalVariable(name: "start_bits", scope: !1432, file: !3, line: 735, type: !44)
!1438 = !DILocation(line: 735, column: 13, scope: !1432)
!1439 = !DILocation(line: 735, column: 26, scope: !1432)
!1440 = !DILocation(line: 735, column: 37, scope: !1432)
!1441 = !DILocation(line: 735, column: 49, scope: !1432)
!1442 = !DILocation(line: 735, column: 68, scope: !1432)
!1443 = !DILocation(line: 735, column: 80, scope: !1432)
!1444 = !DILocalVariable(name: "nb_bits", scope: !1432, file: !3, line: 736, type: !44)
!1445 = !DILocation(line: 736, column: 13, scope: !1432)
!1446 = !DILocation(line: 736, column: 23, scope: !1432)
!1447 = !DILocation(line: 736, column: 34, scope: !1432)
!1448 = !DILocation(line: 736, column: 46, scope: !1432)
!1449 = !DILocation(line: 736, column: 62, scope: !1432)
!1450 = !DILocation(line: 736, column: 74, scope: !1432)
!1451 = !DILocalVariable(name: "tab_bits", scope: !1432, file: !3, line: 737, type: !61)
!1452 = !DILocation(line: 737, column: 18, scope: !1432)
!1453 = !DILocation(line: 737, column: 29, scope: !1432)
!1454 = !DILocation(line: 737, column: 40, scope: !1432)
!1455 = !DILocation(line: 737, column: 52, scope: !1432)
!1456 = !DILocation(line: 737, column: 69, scope: !1432)
!1457 = !DILocation(line: 737, column: 81, scope: !1432)
!1458 = !DILocalVariable(name: "name", scope: !1432, file: !3, line: 738, type: !1459)
!1459 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !431)
!1460 = !DILocation(line: 738, column: 28, scope: !1432)
!1461 = !DILocation(line: 738, column: 35, scope: !1432)
!1462 = !DILocalVariable(name: "nb", scope: !1432, file: !3, line: 739, type: !44)
!1463 = !DILocation(line: 739, column: 13, scope: !1432)
!1464 = !DILocation(line: 739, column: 19, scope: !1432)
!1465 = !DILocation(line: 739, column: 23, scope: !1432)
!1466 = !DILocation(line: 739, column: 30, scope: !1432)
!1467 = !DILocation(line: 739, column: 35, scope: !1432)
!1468 = !DILocation(line: 739, column: 43, scope: !1432)
!1469 = !DILocation(line: 739, column: 47, scope: !1432)
!1470 = !DILocation(line: 739, column: 54, scope: !1432)
!1471 = !DILocation(line: 739, column: 41, scope: !1432)
!1472 = !DILocalVariable(name: "mapping_address", scope: !1432, file: !3, line: 742, type: !44)
!1473 = !DILocation(line: 742, column: 13, scope: !1432)
!1474 = !DILocation(line: 742, column: 31, scope: !1432)
!1475 = !DILocation(line: 742, column: 41, scope: !1432)
!1476 = !DILocation(line: 742, column: 39, scope: !1432)
!1477 = !DILocation(line: 744, column: 13, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1432, file: !3, line: 744, column: 13)
!1479 = !DILocation(line: 744, column: 16, scope: !1478)
!1480 = !DILocation(line: 744, column: 20, scope: !1478)
!1481 = !DILocation(line: 744, column: 46, scope: !1478)
!1482 = !DILocation(line: 744, column: 44, scope: !1478)
!1483 = !DILocation(line: 744, column: 13, scope: !1432)
!1484 = !DILocation(line: 746, column: 17, scope: !1485)
!1485 = distinct !DILexicalBlock(scope: !1478, file: !3, line: 744, column: 50)
!1486 = !DILocation(line: 746, column: 65, scope: !1485)
!1487 = !DILocation(line: 748, column: 17, scope: !1485)
!1488 = !DILocation(line: 748, column: 21, scope: !1485)
!1489 = !DILocation(line: 745, column: 26, scope: !1485)
!1490 = !DILocation(line: 745, column: 24, scope: !1485)
!1491 = !DILocation(line: 749, column: 9, scope: !1485)
!1492 = !DILocation(line: 749, column: 20, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1478, file: !3, line: 749, column: 20)
!1494 = !DILocation(line: 749, column: 36, scope: !1493)
!1495 = !DILocation(line: 749, column: 40, scope: !1493)
!1496 = !DILocation(line: 749, column: 44, scope: !1493)
!1497 = !DILocation(line: 749, column: 62, scope: !1493)
!1498 = !DILocation(line: 749, column: 60, scope: !1493)
!1499 = !DILocation(line: 749, column: 68, scope: !1493)
!1500 = !DILocation(line: 749, column: 66, scope: !1493)
!1501 = !DILocation(line: 749, column: 20, scope: !1478)
!1502 = !DILocation(line: 751, column: 17, scope: !1503)
!1503 = distinct !DILexicalBlock(scope: !1493, file: !3, line: 749, column: 77)
!1504 = !DILocation(line: 752, column: 56, scope: !1503)
!1505 = !DILocation(line: 754, column: 17, scope: !1503)
!1506 = !DILocation(line: 754, column: 33, scope: !1503)
!1507 = !DILocation(line: 754, column: 39, scope: !1503)
!1508 = !DILocation(line: 754, column: 49, scope: !1503)
!1509 = !DILocation(line: 754, column: 59, scope: !1503)
!1510 = !DILocation(line: 754, column: 57, scope: !1503)
!1511 = !DILocation(line: 754, column: 63, scope: !1503)
!1512 = !DILocation(line: 750, column: 26, scope: !1503)
!1513 = !DILocation(line: 750, column: 24, scope: !1503)
!1514 = !DILocation(line: 755, column: 9, scope: !1503)
!1515 = !DILocation(line: 756, column: 26, scope: !1516)
!1516 = distinct !DILexicalBlock(scope: !1493, file: !3, line: 755, column: 16)
!1517 = !DILocation(line: 756, column: 31, scope: !1516)
!1518 = !DILocation(line: 756, column: 40, scope: !1516)
!1519 = !DILocation(line: 756, column: 67, scope: !1516)
!1520 = !DILocation(line: 756, column: 24, scope: !1516)
!1521 = !DILocation(line: 757, column: 34, scope: !1516)
!1522 = !DILocation(line: 757, column: 37, scope: !1516)
!1523 = !DILocation(line: 757, column: 46, scope: !1516)
!1524 = !DILocation(line: 757, column: 49, scope: !1516)
!1525 = !DILocation(line: 757, column: 45, scope: !1516)
!1526 = !DILocation(line: 757, column: 42, scope: !1516)
!1527 = !DILocation(line: 757, column: 33, scope: !1516)
!1528 = !DILocation(line: 757, column: 27, scope: !1516)
!1529 = !DILocation(line: 757, column: 13, scope: !1516)
!1530 = !DILocation(line: 757, column: 31, scope: !1516)
!1531 = !DILocation(line: 758, column: 45, scope: !1516)
!1532 = !DILocation(line: 758, column: 55, scope: !1516)
!1533 = !DILocation(line: 758, column: 72, scope: !1516)
!1534 = !DILocation(line: 759, column: 45, scope: !1516)
!1535 = !DILocation(line: 759, column: 50, scope: !1516)
!1536 = !DILocation(line: 758, column: 26, scope: !1516)
!1537 = !DILocation(line: 758, column: 24, scope: !1516)
!1538 = !DILocation(line: 762, column: 9, scope: !1433)
!1539 = !DILocalVariable(name: "is_input", scope: !1540, file: !3, line: 765, type: !72)
!1540 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 764, column: 42)
!1541 = !DILocation(line: 765, column: 22, scope: !1540)
!1542 = !DILocation(line: 765, column: 34, scope: !1540)
!1543 = !DILocation(line: 765, column: 43, scope: !1540)
!1544 = !DILocalVariable(name: "start_registers", scope: !1540, file: !3, line: 766, type: !44)
!1545 = !DILocation(line: 766, column: 13, scope: !1540)
!1546 = !DILocation(line: 766, column: 31, scope: !1540)
!1547 = !DILocation(line: 766, column: 42, scope: !1540)
!1548 = !DILocation(line: 766, column: 54, scope: !1540)
!1549 = !DILocation(line: 766, column: 78, scope: !1540)
!1550 = !DILocation(line: 766, column: 90, scope: !1540)
!1551 = !DILocalVariable(name: "nb_registers", scope: !1540, file: !3, line: 767, type: !44)
!1552 = !DILocation(line: 767, column: 13, scope: !1540)
!1553 = !DILocation(line: 767, column: 28, scope: !1540)
!1554 = !DILocation(line: 767, column: 39, scope: !1540)
!1555 = !DILocation(line: 767, column: 51, scope: !1540)
!1556 = !DILocation(line: 767, column: 72, scope: !1540)
!1557 = !DILocation(line: 767, column: 84, scope: !1540)
!1558 = !DILocalVariable(name: "tab_registers", scope: !1540, file: !3, line: 768, type: !64)
!1559 = !DILocation(line: 768, column: 19, scope: !1540)
!1560 = !DILocation(line: 768, column: 35, scope: !1540)
!1561 = !DILocation(line: 768, column: 46, scope: !1540)
!1562 = !DILocation(line: 768, column: 58, scope: !1540)
!1563 = !DILocation(line: 768, column: 80, scope: !1540)
!1564 = !DILocation(line: 768, column: 92, scope: !1540)
!1565 = !DILocalVariable(name: "name", scope: !1540, file: !3, line: 769, type: !1459)
!1566 = !DILocation(line: 769, column: 28, scope: !1540)
!1567 = !DILocation(line: 769, column: 35, scope: !1540)
!1568 = !DILocalVariable(name: "nb", scope: !1540, file: !3, line: 770, type: !44)
!1569 = !DILocation(line: 770, column: 13, scope: !1540)
!1570 = !DILocation(line: 770, column: 19, scope: !1540)
!1571 = !DILocation(line: 770, column: 23, scope: !1540)
!1572 = !DILocation(line: 770, column: 30, scope: !1540)
!1573 = !DILocation(line: 770, column: 35, scope: !1540)
!1574 = !DILocation(line: 770, column: 43, scope: !1540)
!1575 = !DILocation(line: 770, column: 47, scope: !1540)
!1576 = !DILocation(line: 770, column: 54, scope: !1540)
!1577 = !DILocation(line: 770, column: 41, scope: !1540)
!1578 = !DILocalVariable(name: "mapping_address", scope: !1540, file: !3, line: 773, type: !44)
!1579 = !DILocation(line: 773, column: 13, scope: !1540)
!1580 = !DILocation(line: 773, column: 31, scope: !1540)
!1581 = !DILocation(line: 773, column: 41, scope: !1540)
!1582 = !DILocation(line: 773, column: 39, scope: !1540)
!1583 = !DILocation(line: 775, column: 13, scope: !1584)
!1584 = distinct !DILexicalBlock(scope: !1540, file: !3, line: 775, column: 13)
!1585 = !DILocation(line: 775, column: 16, scope: !1584)
!1586 = !DILocation(line: 775, column: 20, scope: !1584)
!1587 = !DILocation(line: 775, column: 51, scope: !1584)
!1588 = !DILocation(line: 775, column: 49, scope: !1584)
!1589 = !DILocation(line: 775, column: 13, scope: !1540)
!1590 = !DILocation(line: 777, column: 17, scope: !1591)
!1591 = distinct !DILexicalBlock(scope: !1584, file: !3, line: 775, column: 55)
!1592 = !DILocation(line: 777, column: 65, scope: !1591)
!1593 = !DILocation(line: 779, column: 17, scope: !1591)
!1594 = !DILocation(line: 779, column: 21, scope: !1591)
!1595 = !DILocation(line: 776, column: 26, scope: !1591)
!1596 = !DILocation(line: 776, column: 24, scope: !1591)
!1597 = !DILocation(line: 780, column: 9, scope: !1591)
!1598 = !DILocation(line: 780, column: 20, scope: !1599)
!1599 = distinct !DILexicalBlock(scope: !1584, file: !3, line: 780, column: 20)
!1600 = !DILocation(line: 780, column: 36, scope: !1599)
!1601 = !DILocation(line: 780, column: 40, scope: !1599)
!1602 = !DILocation(line: 780, column: 44, scope: !1599)
!1603 = !DILocation(line: 780, column: 62, scope: !1599)
!1604 = !DILocation(line: 780, column: 60, scope: !1599)
!1605 = !DILocation(line: 780, column: 68, scope: !1599)
!1606 = !DILocation(line: 780, column: 66, scope: !1599)
!1607 = !DILocation(line: 780, column: 20, scope: !1584)
!1608 = !DILocation(line: 782, column: 17, scope: !1609)
!1609 = distinct !DILexicalBlock(scope: !1599, file: !3, line: 780, column: 82)
!1610 = !DILocation(line: 782, column: 67, scope: !1609)
!1611 = !DILocation(line: 784, column: 17, scope: !1609)
!1612 = !DILocation(line: 784, column: 33, scope: !1609)
!1613 = !DILocation(line: 784, column: 39, scope: !1609)
!1614 = !DILocation(line: 784, column: 49, scope: !1609)
!1615 = !DILocation(line: 784, column: 59, scope: !1609)
!1616 = !DILocation(line: 784, column: 57, scope: !1609)
!1617 = !DILocation(line: 784, column: 63, scope: !1609)
!1618 = !DILocation(line: 781, column: 26, scope: !1609)
!1619 = !DILocation(line: 781, column: 24, scope: !1609)
!1620 = !DILocation(line: 785, column: 9, scope: !1609)
!1621 = !DILocalVariable(name: "i", scope: !1622, file: !3, line: 786, type: !44)
!1622 = distinct !DILexicalBlock(scope: !1599, file: !3, line: 785, column: 16)
!1623 = !DILocation(line: 786, column: 17, scope: !1622)
!1624 = !DILocation(line: 788, column: 26, scope: !1622)
!1625 = !DILocation(line: 788, column: 31, scope: !1622)
!1626 = !DILocation(line: 788, column: 40, scope: !1622)
!1627 = !DILocation(line: 788, column: 67, scope: !1622)
!1628 = !DILocation(line: 788, column: 24, scope: !1622)
!1629 = !DILocation(line: 789, column: 33, scope: !1622)
!1630 = !DILocation(line: 789, column: 36, scope: !1622)
!1631 = !DILocation(line: 789, column: 27, scope: !1622)
!1632 = !DILocation(line: 789, column: 13, scope: !1622)
!1633 = !DILocation(line: 789, column: 31, scope: !1622)
!1634 = !DILocation(line: 790, column: 22, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1622, file: !3, line: 790, column: 13)
!1636 = !DILocation(line: 790, column: 20, scope: !1635)
!1637 = !DILocation(line: 790, column: 18, scope: !1635)
!1638 = !DILocation(line: 790, column: 39, scope: !1639)
!1639 = distinct !DILexicalBlock(scope: !1635, file: !3, line: 790, column: 13)
!1640 = !DILocation(line: 790, column: 43, scope: !1639)
!1641 = !DILocation(line: 790, column: 61, scope: !1639)
!1642 = !DILocation(line: 790, column: 59, scope: !1639)
!1643 = !DILocation(line: 790, column: 41, scope: !1639)
!1644 = !DILocation(line: 790, column: 13, scope: !1635)
!1645 = !DILocation(line: 791, column: 37, scope: !1646)
!1646 = distinct !DILexicalBlock(scope: !1639, file: !3, line: 790, column: 70)
!1647 = !DILocation(line: 791, column: 51, scope: !1646)
!1648 = !DILocation(line: 791, column: 54, scope: !1646)
!1649 = !DILocation(line: 791, column: 31, scope: !1646)
!1650 = !DILocation(line: 791, column: 17, scope: !1646)
!1651 = !DILocation(line: 791, column: 35, scope: !1646)
!1652 = !DILocation(line: 792, column: 37, scope: !1646)
!1653 = !DILocation(line: 792, column: 51, scope: !1646)
!1654 = !DILocation(line: 792, column: 54, scope: !1646)
!1655 = !DILocation(line: 792, column: 31, scope: !1646)
!1656 = !DILocation(line: 792, column: 17, scope: !1646)
!1657 = !DILocation(line: 792, column: 35, scope: !1646)
!1658 = !DILocation(line: 793, column: 13, scope: !1646)
!1659 = !DILocation(line: 790, column: 66, scope: !1639)
!1660 = !DILocation(line: 790, column: 13, scope: !1639)
!1661 = distinct !{!1661, !1644, !1662}
!1662 = !DILocation(line: 793, column: 13, scope: !1635)
!1663 = !DILocation(line: 796, column: 9, scope: !1433)
!1664 = !DILocalVariable(name: "mapping_address", scope: !1665, file: !3, line: 798, type: !44)
!1665 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 797, column: 39)
!1666 = !DILocation(line: 798, column: 13, scope: !1665)
!1667 = !DILocation(line: 798, column: 31, scope: !1665)
!1668 = !DILocation(line: 798, column: 41, scope: !1665)
!1669 = !DILocation(line: 798, column: 53, scope: !1665)
!1670 = !DILocation(line: 798, column: 39, scope: !1665)
!1671 = !DILocation(line: 800, column: 13, scope: !1672)
!1672 = distinct !DILexicalBlock(scope: !1665, file: !3, line: 800, column: 13)
!1673 = !DILocation(line: 800, column: 29, scope: !1672)
!1674 = !DILocation(line: 800, column: 33, scope: !1672)
!1675 = !DILocation(line: 800, column: 36, scope: !1672)
!1676 = !DILocation(line: 800, column: 55, scope: !1672)
!1677 = !DILocation(line: 800, column: 67, scope: !1672)
!1678 = !DILocation(line: 800, column: 52, scope: !1672)
!1679 = !DILocation(line: 800, column: 13, scope: !1665)
!1680 = !DILocation(line: 802, column: 17, scope: !1681)
!1681 = distinct !DILexicalBlock(scope: !1672, file: !3, line: 800, column: 76)
!1682 = !DILocation(line: 802, column: 67, scope: !1681)
!1683 = !DILocation(line: 804, column: 17, scope: !1681)
!1684 = !DILocation(line: 801, column: 26, scope: !1681)
!1685 = !DILocation(line: 801, column: 24, scope: !1681)
!1686 = !DILocation(line: 805, column: 9, scope: !1681)
!1687 = !DILocalVariable(name: "data", scope: !1688, file: !3, line: 806, type: !44)
!1688 = distinct !DILexicalBlock(scope: !1672, file: !3, line: 805, column: 16)
!1689 = !DILocation(line: 806, column: 17, scope: !1688)
!1690 = !DILocation(line: 806, column: 25, scope: !1688)
!1691 = !DILocation(line: 806, column: 29, scope: !1688)
!1692 = !DILocation(line: 806, column: 36, scope: !1688)
!1693 = !DILocation(line: 806, column: 41, scope: !1688)
!1694 = !DILocation(line: 806, column: 49, scope: !1688)
!1695 = !DILocation(line: 806, column: 53, scope: !1688)
!1696 = !DILocation(line: 806, column: 60, scope: !1688)
!1697 = !DILocation(line: 806, column: 47, scope: !1688)
!1698 = !DILocation(line: 808, column: 17, scope: !1699)
!1699 = distinct !DILexicalBlock(scope: !1688, file: !3, line: 808, column: 17)
!1700 = !DILocation(line: 808, column: 22, scope: !1699)
!1701 = !DILocation(line: 808, column: 32, scope: !1699)
!1702 = !DILocation(line: 808, column: 35, scope: !1699)
!1703 = !DILocation(line: 808, column: 40, scope: !1699)
!1704 = !DILocation(line: 808, column: 17, scope: !1688)
!1705 = !DILocation(line: 809, column: 57, scope: !1706)
!1706 = distinct !DILexicalBlock(scope: !1699, file: !3, line: 808, column: 48)
!1707 = !DILocation(line: 809, column: 17, scope: !1706)
!1708 = !DILocation(line: 809, column: 29, scope: !1706)
!1709 = !DILocation(line: 809, column: 38, scope: !1706)
!1710 = !DILocation(line: 809, column: 55, scope: !1706)
!1711 = !DILocation(line: 810, column: 17, scope: !1706)
!1712 = !DILocation(line: 810, column: 29, scope: !1706)
!1713 = !DILocation(line: 810, column: 34, scope: !1706)
!1714 = !DILocation(line: 811, column: 30, scope: !1706)
!1715 = !DILocation(line: 811, column: 28, scope: !1706)
!1716 = !DILocation(line: 812, column: 13, scope: !1706)
!1717 = !DILocation(line: 814, column: 21, scope: !1718)
!1718 = distinct !DILexicalBlock(scope: !1699, file: !3, line: 812, column: 20)
!1719 = !DILocation(line: 815, column: 58, scope: !1718)
!1720 = !DILocation(line: 817, column: 21, scope: !1718)
!1721 = !DILocation(line: 817, column: 27, scope: !1718)
!1722 = !DILocation(line: 813, column: 30, scope: !1718)
!1723 = !DILocation(line: 813, column: 28, scope: !1718)
!1724 = !DILocation(line: 821, column: 9, scope: !1433)
!1725 = !DILocalVariable(name: "mapping_address", scope: !1726, file: !3, line: 823, type: !44)
!1726 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 822, column: 43)
!1727 = !DILocation(line: 823, column: 13, scope: !1726)
!1728 = !DILocation(line: 823, column: 31, scope: !1726)
!1729 = !DILocation(line: 823, column: 41, scope: !1726)
!1730 = !DILocation(line: 823, column: 53, scope: !1726)
!1731 = !DILocation(line: 823, column: 39, scope: !1726)
!1732 = !DILocation(line: 825, column: 13, scope: !1733)
!1733 = distinct !DILexicalBlock(scope: !1726, file: !3, line: 825, column: 13)
!1734 = !DILocation(line: 825, column: 29, scope: !1733)
!1735 = !DILocation(line: 825, column: 33, scope: !1733)
!1736 = !DILocation(line: 825, column: 36, scope: !1733)
!1737 = !DILocation(line: 825, column: 55, scope: !1733)
!1738 = !DILocation(line: 825, column: 67, scope: !1733)
!1739 = !DILocation(line: 825, column: 52, scope: !1733)
!1740 = !DILocation(line: 825, column: 13, scope: !1726)
!1741 = !DILocation(line: 827, column: 17, scope: !1742)
!1742 = distinct !DILexicalBlock(scope: !1733, file: !3, line: 825, column: 81)
!1743 = !DILocation(line: 828, column: 56, scope: !1742)
!1744 = !DILocation(line: 830, column: 17, scope: !1742)
!1745 = !DILocation(line: 826, column: 26, scope: !1742)
!1746 = !DILocation(line: 826, column: 24, scope: !1742)
!1747 = !DILocation(line: 831, column: 9, scope: !1742)
!1748 = !DILocalVariable(name: "data", scope: !1749, file: !3, line: 832, type: !44)
!1749 = distinct !DILexicalBlock(scope: !1733, file: !3, line: 831, column: 16)
!1750 = !DILocation(line: 832, column: 17, scope: !1749)
!1751 = !DILocation(line: 832, column: 25, scope: !1749)
!1752 = !DILocation(line: 832, column: 29, scope: !1749)
!1753 = !DILocation(line: 832, column: 36, scope: !1749)
!1754 = !DILocation(line: 832, column: 41, scope: !1749)
!1755 = !DILocation(line: 832, column: 49, scope: !1749)
!1756 = !DILocation(line: 832, column: 53, scope: !1749)
!1757 = !DILocation(line: 832, column: 60, scope: !1749)
!1758 = !DILocation(line: 832, column: 47, scope: !1749)
!1759 = !DILocation(line: 834, column: 58, scope: !1749)
!1760 = !DILocation(line: 834, column: 13, scope: !1749)
!1761 = !DILocation(line: 834, column: 25, scope: !1749)
!1762 = !DILocation(line: 834, column: 39, scope: !1749)
!1763 = !DILocation(line: 834, column: 56, scope: !1749)
!1764 = !DILocation(line: 835, column: 13, scope: !1749)
!1765 = !DILocation(line: 835, column: 25, scope: !1749)
!1766 = !DILocation(line: 835, column: 30, scope: !1749)
!1767 = !DILocation(line: 836, column: 26, scope: !1749)
!1768 = !DILocation(line: 836, column: 24, scope: !1749)
!1769 = !DILocation(line: 839, column: 9, scope: !1433)
!1770 = !DILocalVariable(name: "nb", scope: !1771, file: !3, line: 841, type: !44)
!1771 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 840, column: 42)
!1772 = !DILocation(line: 841, column: 13, scope: !1771)
!1773 = !DILocation(line: 841, column: 19, scope: !1771)
!1774 = !DILocation(line: 841, column: 23, scope: !1771)
!1775 = !DILocation(line: 841, column: 30, scope: !1771)
!1776 = !DILocation(line: 841, column: 35, scope: !1771)
!1777 = !DILocation(line: 841, column: 43, scope: !1771)
!1778 = !DILocation(line: 841, column: 47, scope: !1771)
!1779 = !DILocation(line: 841, column: 54, scope: !1771)
!1780 = !DILocation(line: 841, column: 41, scope: !1771)
!1781 = !DILocalVariable(name: "mapping_address", scope: !1771, file: !3, line: 842, type: !44)
!1782 = !DILocation(line: 842, column: 13, scope: !1771)
!1783 = !DILocation(line: 842, column: 31, scope: !1771)
!1784 = !DILocation(line: 842, column: 41, scope: !1771)
!1785 = !DILocation(line: 842, column: 53, scope: !1771)
!1786 = !DILocation(line: 842, column: 39, scope: !1771)
!1787 = !DILocation(line: 844, column: 13, scope: !1788)
!1788 = distinct !DILexicalBlock(scope: !1771, file: !3, line: 844, column: 13)
!1789 = !DILocation(line: 844, column: 16, scope: !1788)
!1790 = !DILocation(line: 844, column: 20, scope: !1788)
!1791 = !DILocation(line: 844, column: 47, scope: !1788)
!1792 = !DILocation(line: 844, column: 45, scope: !1788)
!1793 = !DILocation(line: 844, column: 13, scope: !1771)
!1794 = !DILocation(line: 849, column: 17, scope: !1795)
!1795 = distinct !DILexicalBlock(scope: !1788, file: !3, line: 844, column: 51)
!1796 = !DILocation(line: 849, column: 65, scope: !1795)
!1797 = !DILocation(line: 851, column: 17, scope: !1795)
!1798 = !DILocation(line: 848, column: 26, scope: !1795)
!1799 = !DILocation(line: 848, column: 24, scope: !1795)
!1800 = !DILocation(line: 852, column: 9, scope: !1795)
!1801 = !DILocation(line: 852, column: 20, scope: !1802)
!1802 = distinct !DILexicalBlock(scope: !1788, file: !3, line: 852, column: 20)
!1803 = !DILocation(line: 852, column: 36, scope: !1802)
!1804 = !DILocation(line: 852, column: 40, scope: !1802)
!1805 = !DILocation(line: 853, column: 21, scope: !1802)
!1806 = !DILocation(line: 853, column: 39, scope: !1802)
!1807 = !DILocation(line: 853, column: 37, scope: !1802)
!1808 = !DILocation(line: 853, column: 45, scope: !1802)
!1809 = !DILocation(line: 853, column: 57, scope: !1802)
!1810 = !DILocation(line: 853, column: 43, scope: !1802)
!1811 = !DILocation(line: 852, column: 20, scope: !1788)
!1812 = !DILocation(line: 855, column: 17, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1802, file: !3, line: 853, column: 66)
!1814 = !DILocation(line: 856, column: 56, scope: !1813)
!1815 = !DILocation(line: 858, column: 17, scope: !1813)
!1816 = !DILocation(line: 858, column: 33, scope: !1813)
!1817 = !DILocation(line: 858, column: 39, scope: !1813)
!1818 = !DILocation(line: 858, column: 49, scope: !1813)
!1819 = !DILocation(line: 858, column: 59, scope: !1813)
!1820 = !DILocation(line: 858, column: 57, scope: !1813)
!1821 = !DILocation(line: 854, column: 26, scope: !1813)
!1822 = !DILocation(line: 854, column: 24, scope: !1813)
!1823 = !DILocation(line: 859, column: 9, scope: !1813)
!1824 = !DILocation(line: 861, column: 40, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1802, file: !3, line: 859, column: 16)
!1826 = !DILocation(line: 861, column: 52, scope: !1825)
!1827 = !DILocation(line: 861, column: 62, scope: !1825)
!1828 = !DILocation(line: 861, column: 79, scope: !1825)
!1829 = !DILocation(line: 862, column: 41, scope: !1825)
!1830 = !DILocation(line: 862, column: 45, scope: !1825)
!1831 = !DILocation(line: 862, column: 52, scope: !1825)
!1832 = !DILocation(line: 861, column: 13, scope: !1825)
!1833 = !DILocation(line: 864, column: 26, scope: !1825)
!1834 = !DILocation(line: 864, column: 31, scope: !1825)
!1835 = !DILocation(line: 864, column: 40, scope: !1825)
!1836 = !DILocation(line: 864, column: 67, scope: !1825)
!1837 = !DILocation(line: 864, column: 24, scope: !1825)
!1838 = !DILocation(line: 866, column: 20, scope: !1825)
!1839 = !DILocation(line: 866, column: 26, scope: !1825)
!1840 = !DILocation(line: 866, column: 24, scope: !1825)
!1841 = !DILocation(line: 866, column: 38, scope: !1825)
!1842 = !DILocation(line: 866, column: 44, scope: !1825)
!1843 = !DILocation(line: 866, column: 42, scope: !1825)
!1844 = !DILocation(line: 866, column: 13, scope: !1825)
!1845 = !DILocation(line: 867, column: 24, scope: !1825)
!1846 = !DILocation(line: 870, column: 9, scope: !1433)
!1847 = !DILocalVariable(name: "nb", scope: !1848, file: !3, line: 872, type: !44)
!1848 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 871, column: 46)
!1849 = !DILocation(line: 872, column: 13, scope: !1848)
!1850 = !DILocation(line: 872, column: 19, scope: !1848)
!1851 = !DILocation(line: 872, column: 23, scope: !1848)
!1852 = !DILocation(line: 872, column: 30, scope: !1848)
!1853 = !DILocation(line: 872, column: 35, scope: !1848)
!1854 = !DILocation(line: 872, column: 43, scope: !1848)
!1855 = !DILocation(line: 872, column: 47, scope: !1848)
!1856 = !DILocation(line: 872, column: 54, scope: !1848)
!1857 = !DILocation(line: 872, column: 41, scope: !1848)
!1858 = !DILocalVariable(name: "mapping_address", scope: !1848, file: !3, line: 873, type: !44)
!1859 = !DILocation(line: 873, column: 13, scope: !1848)
!1860 = !DILocation(line: 873, column: 31, scope: !1848)
!1861 = !DILocation(line: 873, column: 41, scope: !1848)
!1862 = !DILocation(line: 873, column: 53, scope: !1848)
!1863 = !DILocation(line: 873, column: 39, scope: !1848)
!1864 = !DILocation(line: 875, column: 13, scope: !1865)
!1865 = distinct !DILexicalBlock(scope: !1848, file: !3, line: 875, column: 13)
!1866 = !DILocation(line: 875, column: 16, scope: !1865)
!1867 = !DILocation(line: 875, column: 20, scope: !1865)
!1868 = !DILocation(line: 875, column: 52, scope: !1865)
!1869 = !DILocation(line: 875, column: 50, scope: !1865)
!1870 = !DILocation(line: 875, column: 13, scope: !1848)
!1871 = !DILocation(line: 877, column: 17, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1865, file: !3, line: 875, column: 56)
!1873 = !DILocation(line: 877, column: 65, scope: !1872)
!1874 = !DILocation(line: 879, column: 17, scope: !1872)
!1875 = !DILocation(line: 876, column: 26, scope: !1872)
!1876 = !DILocation(line: 876, column: 24, scope: !1872)
!1877 = !DILocation(line: 880, column: 9, scope: !1872)
!1878 = !DILocation(line: 880, column: 20, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1865, file: !3, line: 880, column: 20)
!1880 = !DILocation(line: 880, column: 36, scope: !1879)
!1881 = !DILocation(line: 880, column: 40, scope: !1879)
!1882 = !DILocation(line: 881, column: 21, scope: !1879)
!1883 = !DILocation(line: 881, column: 39, scope: !1879)
!1884 = !DILocation(line: 881, column: 37, scope: !1879)
!1885 = !DILocation(line: 881, column: 45, scope: !1879)
!1886 = !DILocation(line: 881, column: 57, scope: !1879)
!1887 = !DILocation(line: 881, column: 43, scope: !1879)
!1888 = !DILocation(line: 880, column: 20, scope: !1865)
!1889 = !DILocation(line: 883, column: 17, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1879, file: !3, line: 881, column: 71)
!1891 = !DILocation(line: 883, column: 67, scope: !1890)
!1892 = !DILocation(line: 885, column: 17, scope: !1890)
!1893 = !DILocation(line: 885, column: 33, scope: !1890)
!1894 = !DILocation(line: 885, column: 39, scope: !1890)
!1895 = !DILocation(line: 885, column: 49, scope: !1890)
!1896 = !DILocation(line: 885, column: 59, scope: !1890)
!1897 = !DILocation(line: 885, column: 57, scope: !1890)
!1898 = !DILocation(line: 882, column: 26, scope: !1890)
!1899 = !DILocation(line: 882, column: 24, scope: !1890)
!1900 = !DILocation(line: 886, column: 9, scope: !1890)
!1901 = !DILocalVariable(name: "i", scope: !1902, file: !3, line: 887, type: !44)
!1902 = distinct !DILexicalBlock(scope: !1879, file: !3, line: 886, column: 16)
!1903 = !DILocation(line: 887, column: 17, scope: !1902)
!1904 = !DILocalVariable(name: "j", scope: !1902, file: !3, line: 887, type: !44)
!1905 = !DILocation(line: 887, column: 20, scope: !1902)
!1906 = !DILocation(line: 888, column: 22, scope: !1907)
!1907 = distinct !DILexicalBlock(scope: !1902, file: !3, line: 888, column: 13)
!1908 = !DILocation(line: 888, column: 20, scope: !1907)
!1909 = !DILocation(line: 888, column: 41, scope: !1907)
!1910 = !DILocation(line: 888, column: 18, scope: !1907)
!1911 = !DILocation(line: 888, column: 46, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1907, file: !3, line: 888, column: 13)
!1913 = !DILocation(line: 888, column: 50, scope: !1912)
!1914 = !DILocation(line: 888, column: 68, scope: !1912)
!1915 = !DILocation(line: 888, column: 66, scope: !1912)
!1916 = !DILocation(line: 888, column: 48, scope: !1912)
!1917 = !DILocation(line: 888, column: 13, scope: !1907)
!1918 = !DILocation(line: 891, column: 22, scope: !1919)
!1919 = distinct !DILexicalBlock(scope: !1912, file: !3, line: 888, column: 85)
!1920 = !DILocation(line: 891, column: 26, scope: !1919)
!1921 = !DILocation(line: 891, column: 35, scope: !1919)
!1922 = !DILocation(line: 891, column: 33, scope: !1919)
!1923 = !DILocation(line: 891, column: 38, scope: !1919)
!1924 = !DILocation(line: 891, column: 46, scope: !1919)
!1925 = !DILocation(line: 891, column: 50, scope: !1919)
!1926 = !DILocation(line: 891, column: 59, scope: !1919)
!1927 = !DILocation(line: 891, column: 57, scope: !1919)
!1928 = !DILocation(line: 891, column: 61, scope: !1919)
!1929 = !DILocation(line: 891, column: 44, scope: !1919)
!1930 = !DILocation(line: 891, column: 21, scope: !1919)
!1931 = !DILocation(line: 890, column: 17, scope: !1919)
!1932 = !DILocation(line: 890, column: 29, scope: !1919)
!1933 = !DILocation(line: 890, column: 43, scope: !1919)
!1934 = !DILocation(line: 890, column: 46, scope: !1919)
!1935 = !DILocation(line: 892, column: 13, scope: !1919)
!1936 = !DILocation(line: 888, column: 73, scope: !1912)
!1937 = !DILocation(line: 888, column: 79, scope: !1912)
!1938 = !DILocation(line: 888, column: 13, scope: !1912)
!1939 = distinct !{!1939, !1917, !1940}
!1940 = !DILocation(line: 892, column: 13, scope: !1907)
!1941 = !DILocation(line: 894, column: 26, scope: !1902)
!1942 = !DILocation(line: 894, column: 31, scope: !1902)
!1943 = !DILocation(line: 894, column: 40, scope: !1902)
!1944 = !DILocation(line: 894, column: 67, scope: !1902)
!1945 = !DILocation(line: 894, column: 24, scope: !1902)
!1946 = !DILocation(line: 896, column: 20, scope: !1902)
!1947 = !DILocation(line: 896, column: 26, scope: !1902)
!1948 = !DILocation(line: 896, column: 24, scope: !1902)
!1949 = !DILocation(line: 896, column: 38, scope: !1902)
!1950 = !DILocation(line: 896, column: 44, scope: !1902)
!1951 = !DILocation(line: 896, column: 42, scope: !1902)
!1952 = !DILocation(line: 896, column: 13, scope: !1902)
!1953 = !DILocation(line: 897, column: 24, scope: !1902)
!1954 = !DILocation(line: 900, column: 9, scope: !1433)
!1955 = !DILocalVariable(name: "str_len", scope: !1956, file: !3, line: 902, type: !44)
!1956 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 901, column: 37)
!1957 = !DILocation(line: 902, column: 13, scope: !1956)
!1958 = !DILocalVariable(name: "byte_count_pos", scope: !1956, file: !3, line: 903, type: !44)
!1959 = !DILocation(line: 903, column: 13, scope: !1956)
!1960 = !DILocation(line: 905, column: 22, scope: !1956)
!1961 = !DILocation(line: 905, column: 27, scope: !1956)
!1962 = !DILocation(line: 905, column: 36, scope: !1956)
!1963 = !DILocation(line: 905, column: 63, scope: !1956)
!1964 = !DILocation(line: 905, column: 20, scope: !1956)
!1965 = !DILocation(line: 907, column: 36, scope: !1956)
!1966 = !DILocation(line: 907, column: 24, scope: !1956)
!1967 = !DILocation(line: 908, column: 23, scope: !1956)
!1968 = !DILocation(line: 908, column: 9, scope: !1956)
!1969 = !DILocation(line: 908, column: 27, scope: !1956)
!1970 = !DILocation(line: 910, column: 23, scope: !1956)
!1971 = !DILocation(line: 910, column: 9, scope: !1956)
!1972 = !DILocation(line: 910, column: 27, scope: !1956)
!1973 = !DILocation(line: 912, column: 17, scope: !1956)
!1974 = !DILocation(line: 913, column: 16, scope: !1956)
!1975 = !DILocation(line: 913, column: 22, scope: !1956)
!1976 = !DILocation(line: 913, column: 20, scope: !1956)
!1977 = !DILocation(line: 913, column: 66, scope: !1956)
!1978 = !DILocation(line: 913, column: 9, scope: !1956)
!1979 = !DILocation(line: 914, column: 23, scope: !1956)
!1980 = !DILocation(line: 914, column: 20, scope: !1956)
!1981 = !DILocation(line: 915, column: 31, scope: !1956)
!1982 = !DILocation(line: 915, column: 44, scope: !1956)
!1983 = !DILocation(line: 915, column: 42, scope: !1956)
!1984 = !DILocation(line: 915, column: 59, scope: !1956)
!1985 = !DILocation(line: 915, column: 13, scope: !1956)
!1986 = !DILocation(line: 915, column: 9, scope: !1956)
!1987 = !DILocation(line: 915, column: 29, scope: !1956)
!1988 = !DILocation(line: 917, column: 9, scope: !1433)
!1989 = !DILocation(line: 919, column: 13, scope: !1990)
!1990 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 919, column: 13)
!1991 = !DILocation(line: 919, column: 18, scope: !1990)
!1992 = !DILocation(line: 919, column: 13, scope: !1433)
!1993 = !DILocation(line: 920, column: 21, scope: !1994)
!1994 = distinct !DILexicalBlock(scope: !1990, file: !3, line: 919, column: 25)
!1995 = !DILocation(line: 920, column: 13, scope: !1994)
!1996 = !DILocation(line: 921, column: 9, scope: !1994)
!1997 = !DILocation(line: 922, column: 9, scope: !1433)
!1998 = !DILocation(line: 922, column: 15, scope: !1433)
!1999 = !DILocation(line: 923, column: 9, scope: !1433)
!2000 = !DILocalVariable(name: "mapping_address", scope: !2001, file: !3, line: 926, type: !44)
!2001 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 925, column: 41)
!2002 = !DILocation(line: 926, column: 13, scope: !2001)
!2003 = !DILocation(line: 926, column: 31, scope: !2001)
!2004 = !DILocation(line: 926, column: 41, scope: !2001)
!2005 = !DILocation(line: 926, column: 53, scope: !2001)
!2006 = !DILocation(line: 926, column: 39, scope: !2001)
!2007 = !DILocation(line: 928, column: 13, scope: !2008)
!2008 = distinct !DILexicalBlock(scope: !2001, file: !3, line: 928, column: 13)
!2009 = !DILocation(line: 928, column: 29, scope: !2008)
!2010 = !DILocation(line: 928, column: 33, scope: !2008)
!2011 = !DILocation(line: 928, column: 36, scope: !2008)
!2012 = !DILocation(line: 928, column: 55, scope: !2008)
!2013 = !DILocation(line: 928, column: 67, scope: !2008)
!2014 = !DILocation(line: 928, column: 52, scope: !2008)
!2015 = !DILocation(line: 928, column: 13, scope: !2001)
!2016 = !DILocation(line: 930, column: 17, scope: !2017)
!2017 = distinct !DILexicalBlock(scope: !2008, file: !3, line: 928, column: 81)
!2018 = !DILocation(line: 930, column: 67, scope: !2017)
!2019 = !DILocation(line: 932, column: 17, scope: !2017)
!2020 = !DILocation(line: 929, column: 26, scope: !2017)
!2021 = !DILocation(line: 929, column: 24, scope: !2017)
!2022 = !DILocation(line: 933, column: 9, scope: !2017)
!2023 = !DILocalVariable(name: "data", scope: !2024, file: !3, line: 934, type: !65)
!2024 = distinct !DILexicalBlock(scope: !2008, file: !3, line: 933, column: 16)
!2025 = !DILocation(line: 934, column: 22, scope: !2024)
!2026 = !DILocation(line: 934, column: 29, scope: !2024)
!2027 = !DILocation(line: 934, column: 41, scope: !2024)
!2028 = !DILocation(line: 934, column: 55, scope: !2024)
!2029 = !DILocalVariable(name: "and", scope: !2024, file: !3, line: 935, type: !65)
!2030 = !DILocation(line: 935, column: 22, scope: !2024)
!2031 = !DILocation(line: 935, column: 29, scope: !2024)
!2032 = !DILocation(line: 935, column: 33, scope: !2024)
!2033 = !DILocation(line: 935, column: 40, scope: !2024)
!2034 = !DILocation(line: 935, column: 45, scope: !2024)
!2035 = !DILocation(line: 935, column: 53, scope: !2024)
!2036 = !DILocation(line: 935, column: 57, scope: !2024)
!2037 = !DILocation(line: 935, column: 64, scope: !2024)
!2038 = !DILocation(line: 935, column: 51, scope: !2024)
!2039 = !DILocation(line: 935, column: 28, scope: !2024)
!2040 = !DILocalVariable(name: "or", scope: !2024, file: !3, line: 936, type: !65)
!2041 = !DILocation(line: 936, column: 22, scope: !2024)
!2042 = !DILocation(line: 936, column: 28, scope: !2024)
!2043 = !DILocation(line: 936, column: 32, scope: !2024)
!2044 = !DILocation(line: 936, column: 39, scope: !2024)
!2045 = !DILocation(line: 936, column: 44, scope: !2024)
!2046 = !DILocation(line: 936, column: 52, scope: !2024)
!2047 = !DILocation(line: 936, column: 56, scope: !2024)
!2048 = !DILocation(line: 936, column: 63, scope: !2024)
!2049 = !DILocation(line: 936, column: 50, scope: !2024)
!2050 = !DILocation(line: 936, column: 27, scope: !2024)
!2051 = !DILocation(line: 938, column: 21, scope: !2024)
!2052 = !DILocation(line: 938, column: 28, scope: !2024)
!2053 = !DILocation(line: 938, column: 26, scope: !2024)
!2054 = !DILocation(line: 938, column: 36, scope: !2024)
!2055 = !DILocation(line: 938, column: 43, scope: !2024)
!2056 = !DILocation(line: 938, column: 42, scope: !2024)
!2057 = !DILocation(line: 938, column: 39, scope: !2024)
!2058 = !DILocation(line: 938, column: 33, scope: !2024)
!2059 = !DILocation(line: 938, column: 20, scope: !2024)
!2060 = !DILocation(line: 938, column: 18, scope: !2024)
!2061 = !DILocation(line: 939, column: 58, scope: !2024)
!2062 = !DILocation(line: 939, column: 13, scope: !2024)
!2063 = !DILocation(line: 939, column: 25, scope: !2024)
!2064 = !DILocation(line: 939, column: 39, scope: !2024)
!2065 = !DILocation(line: 939, column: 56, scope: !2024)
!2066 = !DILocation(line: 940, column: 13, scope: !2024)
!2067 = !DILocation(line: 940, column: 25, scope: !2024)
!2068 = !DILocation(line: 940, column: 30, scope: !2024)
!2069 = !DILocation(line: 941, column: 26, scope: !2024)
!2070 = !DILocation(line: 941, column: 24, scope: !2024)
!2071 = !DILocation(line: 944, column: 9, scope: !1433)
!2072 = !DILocalVariable(name: "nb", scope: !2073, file: !3, line: 946, type: !44)
!2073 = distinct !DILexicalBlock(scope: !1433, file: !3, line: 945, column: 46)
!2074 = !DILocation(line: 946, column: 13, scope: !2073)
!2075 = !DILocation(line: 946, column: 19, scope: !2073)
!2076 = !DILocation(line: 946, column: 23, scope: !2073)
!2077 = !DILocation(line: 946, column: 30, scope: !2073)
!2078 = !DILocation(line: 946, column: 35, scope: !2073)
!2079 = !DILocation(line: 946, column: 43, scope: !2073)
!2080 = !DILocation(line: 946, column: 47, scope: !2073)
!2081 = !DILocation(line: 946, column: 54, scope: !2073)
!2082 = !DILocation(line: 946, column: 41, scope: !2073)
!2083 = !DILocalVariable(name: "address_write", scope: !2073, file: !3, line: 947, type: !65)
!2084 = !DILocation(line: 947, column: 18, scope: !2073)
!2085 = !DILocation(line: 947, column: 35, scope: !2073)
!2086 = !DILocation(line: 947, column: 39, scope: !2073)
!2087 = !DILocation(line: 947, column: 46, scope: !2073)
!2088 = !DILocation(line: 947, column: 51, scope: !2073)
!2089 = !DILocation(line: 947, column: 59, scope: !2073)
!2090 = !DILocation(line: 947, column: 63, scope: !2073)
!2091 = !DILocation(line: 947, column: 70, scope: !2073)
!2092 = !DILocation(line: 947, column: 57, scope: !2073)
!2093 = !DILocation(line: 947, column: 34, scope: !2073)
!2094 = !DILocalVariable(name: "nb_write", scope: !2073, file: !3, line: 948, type: !44)
!2095 = !DILocation(line: 948, column: 13, scope: !2073)
!2096 = !DILocation(line: 948, column: 25, scope: !2073)
!2097 = !DILocation(line: 948, column: 29, scope: !2073)
!2098 = !DILocation(line: 948, column: 36, scope: !2073)
!2099 = !DILocation(line: 948, column: 41, scope: !2073)
!2100 = !DILocation(line: 948, column: 49, scope: !2073)
!2101 = !DILocation(line: 948, column: 53, scope: !2073)
!2102 = !DILocation(line: 948, column: 60, scope: !2073)
!2103 = !DILocation(line: 948, column: 47, scope: !2073)
!2104 = !DILocalVariable(name: "nb_write_bytes", scope: !2073, file: !3, line: 949, type: !44)
!2105 = !DILocation(line: 949, column: 13, scope: !2073)
!2106 = !DILocation(line: 949, column: 30, scope: !2073)
!2107 = !DILocation(line: 949, column: 34, scope: !2073)
!2108 = !DILocation(line: 949, column: 41, scope: !2073)
!2109 = !DILocalVariable(name: "mapping_address", scope: !2073, file: !3, line: 950, type: !44)
!2110 = !DILocation(line: 950, column: 13, scope: !2073)
!2111 = !DILocation(line: 950, column: 31, scope: !2073)
!2112 = !DILocation(line: 950, column: 41, scope: !2073)
!2113 = !DILocation(line: 950, column: 53, scope: !2073)
!2114 = !DILocation(line: 950, column: 39, scope: !2073)
!2115 = !DILocalVariable(name: "mapping_address_write", scope: !2073, file: !3, line: 951, type: !44)
!2116 = !DILocation(line: 951, column: 13, scope: !2073)
!2117 = !DILocation(line: 951, column: 37, scope: !2073)
!2118 = !DILocation(line: 951, column: 53, scope: !2073)
!2119 = !DILocation(line: 951, column: 65, scope: !2073)
!2120 = !DILocation(line: 951, column: 51, scope: !2073)
!2121 = !DILocation(line: 953, column: 13, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 953, column: 13)
!2123 = !DILocation(line: 953, column: 22, scope: !2122)
!2124 = !DILocation(line: 953, column: 26, scope: !2122)
!2125 = !DILocation(line: 953, column: 61, scope: !2122)
!2126 = !DILocation(line: 953, column: 59, scope: !2122)
!2127 = !DILocation(line: 953, column: 70, scope: !2122)
!2128 = !DILocation(line: 954, column: 13, scope: !2122)
!2129 = !DILocation(line: 954, column: 16, scope: !2122)
!2130 = !DILocation(line: 954, column: 20, scope: !2122)
!2131 = !DILocation(line: 954, column: 54, scope: !2122)
!2132 = !DILocation(line: 954, column: 52, scope: !2122)
!2133 = !DILocation(line: 954, column: 57, scope: !2122)
!2134 = !DILocation(line: 955, column: 13, scope: !2122)
!2135 = !DILocation(line: 955, column: 31, scope: !2122)
!2136 = !DILocation(line: 955, column: 40, scope: !2122)
!2137 = !DILocation(line: 955, column: 28, scope: !2122)
!2138 = !DILocation(line: 953, column: 13, scope: !2073)
!2139 = !DILocation(line: 957, column: 17, scope: !2140)
!2140 = distinct !DILexicalBlock(scope: !2122, file: !3, line: 955, column: 45)
!2141 = !DILocation(line: 957, column: 65, scope: !2140)
!2142 = !DILocation(line: 959, column: 17, scope: !2140)
!2143 = !DILocation(line: 959, column: 27, scope: !2140)
!2144 = !DILocation(line: 956, column: 26, scope: !2140)
!2145 = !DILocation(line: 956, column: 24, scope: !2140)
!2146 = !DILocation(line: 960, column: 9, scope: !2140)
!2147 = !DILocation(line: 960, column: 20, scope: !2148)
!2148 = distinct !DILexicalBlock(scope: !2122, file: !3, line: 960, column: 20)
!2149 = !DILocation(line: 960, column: 36, scope: !2148)
!2150 = !DILocation(line: 960, column: 40, scope: !2148)
!2151 = !DILocation(line: 961, column: 21, scope: !2148)
!2152 = !DILocation(line: 961, column: 39, scope: !2148)
!2153 = !DILocation(line: 961, column: 37, scope: !2148)
!2154 = !DILocation(line: 961, column: 45, scope: !2148)
!2155 = !DILocation(line: 961, column: 57, scope: !2148)
!2156 = !DILocation(line: 961, column: 43, scope: !2148)
!2157 = !DILocation(line: 961, column: 70, scope: !2148)
!2158 = !DILocation(line: 962, column: 20, scope: !2148)
!2159 = !DILocation(line: 962, column: 36, scope: !2148)
!2160 = !DILocation(line: 962, column: 40, scope: !2148)
!2161 = !DILocation(line: 963, column: 21, scope: !2148)
!2162 = !DILocation(line: 963, column: 45, scope: !2148)
!2163 = !DILocation(line: 963, column: 43, scope: !2148)
!2164 = !DILocation(line: 963, column: 57, scope: !2148)
!2165 = !DILocation(line: 963, column: 69, scope: !2148)
!2166 = !DILocation(line: 963, column: 55, scope: !2148)
!2167 = !DILocation(line: 960, column: 20, scope: !2122)
!2168 = !DILocation(line: 965, column: 17, scope: !2169)
!2169 = distinct !DILexicalBlock(scope: !2148, file: !3, line: 963, column: 83)
!2170 = !DILocation(line: 965, column: 67, scope: !2169)
!2171 = !DILocation(line: 967, column: 17, scope: !2169)
!2172 = !DILocation(line: 967, column: 33, scope: !2169)
!2173 = !DILocation(line: 967, column: 39, scope: !2169)
!2174 = !DILocation(line: 967, column: 49, scope: !2169)
!2175 = !DILocation(line: 967, column: 59, scope: !2169)
!2176 = !DILocation(line: 967, column: 57, scope: !2169)
!2177 = !DILocation(line: 968, column: 17, scope: !2169)
!2178 = !DILocation(line: 968, column: 39, scope: !2169)
!2179 = !DILocation(line: 968, column: 45, scope: !2169)
!2180 = !DILocation(line: 968, column: 61, scope: !2169)
!2181 = !DILocation(line: 968, column: 77, scope: !2169)
!2182 = !DILocation(line: 968, column: 75, scope: !2169)
!2183 = !DILocation(line: 964, column: 26, scope: !2169)
!2184 = !DILocation(line: 964, column: 24, scope: !2169)
!2185 = !DILocation(line: 969, column: 9, scope: !2169)
!2186 = !DILocalVariable(name: "i", scope: !2187, file: !3, line: 970, type: !44)
!2187 = distinct !DILexicalBlock(scope: !2148, file: !3, line: 969, column: 16)
!2188 = !DILocation(line: 970, column: 17, scope: !2187)
!2189 = !DILocalVariable(name: "j", scope: !2187, file: !3, line: 970, type: !44)
!2190 = !DILocation(line: 970, column: 20, scope: !2187)
!2191 = !DILocation(line: 971, column: 26, scope: !2187)
!2192 = !DILocation(line: 971, column: 31, scope: !2187)
!2193 = !DILocation(line: 971, column: 40, scope: !2187)
!2194 = !DILocation(line: 971, column: 67, scope: !2187)
!2195 = !DILocation(line: 971, column: 24, scope: !2187)
!2196 = !DILocation(line: 972, column: 33, scope: !2187)
!2197 = !DILocation(line: 972, column: 36, scope: !2187)
!2198 = !DILocation(line: 972, column: 27, scope: !2187)
!2199 = !DILocation(line: 972, column: 13, scope: !2187)
!2200 = !DILocation(line: 972, column: 31, scope: !2187)
!2201 = !DILocation(line: 976, column: 22, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2187, file: !3, line: 976, column: 13)
!2203 = !DILocation(line: 976, column: 20, scope: !2202)
!2204 = !DILocation(line: 976, column: 47, scope: !2202)
!2205 = !DILocation(line: 976, column: 18, scope: !2202)
!2206 = !DILocation(line: 977, column: 18, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 976, column: 13)
!2208 = !DILocation(line: 977, column: 22, scope: !2207)
!2209 = !DILocation(line: 977, column: 46, scope: !2207)
!2210 = !DILocation(line: 977, column: 44, scope: !2207)
!2211 = !DILocation(line: 977, column: 20, scope: !2207)
!2212 = !DILocation(line: 976, column: 13, scope: !2202)
!2213 = !DILocation(line: 979, column: 22, scope: !2214)
!2214 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 977, column: 69)
!2215 = !DILocation(line: 979, column: 26, scope: !2214)
!2216 = !DILocation(line: 979, column: 35, scope: !2214)
!2217 = !DILocation(line: 979, column: 33, scope: !2214)
!2218 = !DILocation(line: 979, column: 38, scope: !2214)
!2219 = !DILocation(line: 979, column: 46, scope: !2214)
!2220 = !DILocation(line: 979, column: 50, scope: !2214)
!2221 = !DILocation(line: 979, column: 59, scope: !2214)
!2222 = !DILocation(line: 979, column: 57, scope: !2214)
!2223 = !DILocation(line: 979, column: 61, scope: !2214)
!2224 = !DILocation(line: 979, column: 44, scope: !2214)
!2225 = !DILocation(line: 979, column: 21, scope: !2214)
!2226 = !DILocation(line: 978, column: 17, scope: !2214)
!2227 = !DILocation(line: 978, column: 29, scope: !2214)
!2228 = !DILocation(line: 978, column: 43, scope: !2214)
!2229 = !DILocation(line: 978, column: 46, scope: !2214)
!2230 = !DILocation(line: 980, column: 13, scope: !2214)
!2231 = !DILocation(line: 977, column: 57, scope: !2207)
!2232 = !DILocation(line: 977, column: 63, scope: !2207)
!2233 = !DILocation(line: 976, column: 13, scope: !2207)
!2234 = distinct !{!2234, !2212, !2235}
!2235 = !DILocation(line: 980, column: 13, scope: !2202)
!2236 = !DILocation(line: 983, column: 22, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2187, file: !3, line: 983, column: 13)
!2238 = !DILocation(line: 983, column: 20, scope: !2237)
!2239 = !DILocation(line: 983, column: 18, scope: !2237)
!2240 = !DILocation(line: 983, column: 39, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2237, file: !3, line: 983, column: 13)
!2242 = !DILocation(line: 983, column: 43, scope: !2241)
!2243 = !DILocation(line: 983, column: 61, scope: !2241)
!2244 = !DILocation(line: 983, column: 59, scope: !2241)
!2245 = !DILocation(line: 983, column: 41, scope: !2241)
!2246 = !DILocation(line: 983, column: 13, scope: !2237)
!2247 = !DILocation(line: 984, column: 37, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2241, file: !3, line: 983, column: 70)
!2249 = !DILocation(line: 984, column: 49, scope: !2248)
!2250 = !DILocation(line: 984, column: 63, scope: !2248)
!2251 = !DILocation(line: 984, column: 66, scope: !2248)
!2252 = !DILocation(line: 984, column: 31, scope: !2248)
!2253 = !DILocation(line: 984, column: 17, scope: !2248)
!2254 = !DILocation(line: 984, column: 35, scope: !2248)
!2255 = !DILocation(line: 985, column: 37, scope: !2248)
!2256 = !DILocation(line: 985, column: 49, scope: !2248)
!2257 = !DILocation(line: 985, column: 63, scope: !2248)
!2258 = !DILocation(line: 985, column: 66, scope: !2248)
!2259 = !DILocation(line: 985, column: 31, scope: !2248)
!2260 = !DILocation(line: 985, column: 17, scope: !2248)
!2261 = !DILocation(line: 985, column: 35, scope: !2248)
!2262 = !DILocation(line: 986, column: 13, scope: !2248)
!2263 = !DILocation(line: 983, column: 66, scope: !2241)
!2264 = !DILocation(line: 983, column: 13, scope: !2241)
!2265 = distinct !{!2265, !2246, !2266}
!2266 = !DILocation(line: 986, column: 13, scope: !2237)
!2267 = !DILocation(line: 989, column: 9, scope: !1433)
!2268 = !DILocation(line: 993, column: 13, scope: !1433)
!2269 = !DILocation(line: 993, column: 59, scope: !1433)
!2270 = !DILocation(line: 994, column: 54, scope: !1433)
!2271 = !DILocation(line: 992, column: 22, scope: !1433)
!2272 = !DILocation(line: 992, column: 20, scope: !1433)
!2273 = !DILocation(line: 995, column: 9, scope: !1433)
!2274 = !DILocation(line: 999, column: 13, scope: !1363)
!2275 = !DILocation(line: 999, column: 18, scope: !1363)
!2276 = !DILocation(line: 999, column: 27, scope: !1363)
!2277 = !DILocation(line: 999, column: 40, scope: !1363)
!2278 = !DILocation(line: 999, column: 68, scope: !1363)
!2279 = !DILocation(line: 1000, column: 13, scope: !1363)
!2280 = !DILocation(line: 1000, column: 19, scope: !1363)
!2281 = !DILocation(line: 999, column: 12, scope: !1363)
!2282 = !DILocation(line: 1000, column: 63, scope: !1363)
!2283 = !DILocation(line: 1000, column: 68, scope: !1363)
!2284 = !DILocation(line: 1000, column: 73, scope: !1363)
!2285 = !DILocation(line: 1000, column: 54, scope: !1363)
!2286 = !DILocation(line: 999, column: 5, scope: !1363)
!2287 = !DILocation(line: 1001, column: 1, scope: !1363)
!2288 = distinct !DISubprogram(name: "response_exception", scope: !3, file: !3, line: 669, type: !2289, isLocal: true, isDefinition: true, scopeLine: 673, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2289 = !DISubroutineType(types: !2290)
!2290 = !{!44, !478, !515, !44, !61, !72, !431, null}
!2291 = !DILocalVariable(name: "ctx", arg: 1, scope: !2288, file: !3, line: 669, type: !478)
!2292 = !DILocation(line: 669, column: 41, scope: !2288)
!2293 = !DILocalVariable(name: "sft", arg: 2, scope: !2288, file: !3, line: 669, type: !515)
!2294 = !DILocation(line: 669, column: 53, scope: !2288)
!2295 = !DILocalVariable(name: "exception_code", arg: 3, scope: !2288, file: !3, line: 670, type: !44)
!2296 = !DILocation(line: 670, column: 35, scope: !2288)
!2297 = !DILocalVariable(name: "rsp", arg: 4, scope: !2288, file: !3, line: 670, type: !61)
!2298 = !DILocation(line: 670, column: 60, scope: !2288)
!2299 = !DILocalVariable(name: "to_flush", arg: 5, scope: !2288, file: !3, line: 671, type: !72)
!2300 = !DILocation(line: 671, column: 44, scope: !2288)
!2301 = !DILocalVariable(name: "template", arg: 6, scope: !2288, file: !3, line: 672, type: !431)
!2302 = !DILocation(line: 672, column: 43, scope: !2288)
!2303 = !DILocalVariable(name: "rsp_length", scope: !2288, file: !3, line: 674, type: !44)
!2304 = !DILocation(line: 674, column: 9, scope: !2288)
!2305 = !DILocation(line: 677, column: 9, scope: !2306)
!2306 = distinct !DILexicalBlock(scope: !2288, file: !3, line: 677, column: 9)
!2307 = !DILocation(line: 677, column: 14, scope: !2306)
!2308 = !DILocation(line: 677, column: 9, scope: !2288)
!2309 = !DILocalVariable(name: "ap", scope: !2310, file: !3, line: 678, type: !2311)
!2310 = distinct !DILexicalBlock(scope: !2306, file: !3, line: 677, column: 21)
!2311 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !183, line: 79, baseType: !2312)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2313, line: 48, baseType: !2314)
!2313 = !DIFile(filename: "/usr/local/lib/clang/5.0.0/include/stdarg.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!2314 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 678, baseType: !2315)
!2315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2316, size: 192, elements: !2322)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 678, size: 192, elements: !2317)
!2317 = !{!2318, !2319, !2320, !2321}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2316, file: !3, line: 678, baseType: !72, size: 32)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2316, file: !3, line: 678, baseType: !72, size: 32, offset: 32)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2316, file: !3, line: 678, baseType: !40, size: 64, offset: 64)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2316, file: !3, line: 678, baseType: !40, size: 64, offset: 128)
!2322 = !{!2323}
!2323 = !DISubrange(count: 1)
!2324 = !DILocation(line: 678, column: 17, scope: !2310)
!2325 = !DILocation(line: 680, column: 9, scope: !2310)
!2326 = !DILocation(line: 681, column: 18, scope: !2310)
!2327 = !DILocation(line: 681, column: 26, scope: !2310)
!2328 = !DILocation(line: 681, column: 36, scope: !2310)
!2329 = !DILocation(line: 681, column: 9, scope: !2310)
!2330 = !DILocation(line: 682, column: 9, scope: !2310)
!2331 = !DILocation(line: 683, column: 5, scope: !2310)
!2332 = !DILocation(line: 686, column: 9, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2288, file: !3, line: 686, column: 9)
!2334 = !DILocation(line: 686, column: 9, scope: !2288)
!2335 = !DILocation(line: 687, column: 33, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2333, file: !3, line: 686, column: 19)
!2337 = !DILocation(line: 687, column: 9, scope: !2336)
!2338 = !DILocation(line: 688, column: 22, scope: !2336)
!2339 = !DILocation(line: 688, column: 9, scope: !2336)
!2340 = !DILocation(line: 689, column: 5, scope: !2336)
!2341 = !DILocation(line: 692, column: 21, scope: !2288)
!2342 = !DILocation(line: 692, column: 26, scope: !2288)
!2343 = !DILocation(line: 692, column: 35, scope: !2288)
!2344 = !DILocation(line: 692, column: 5, scope: !2288)
!2345 = !DILocation(line: 692, column: 10, scope: !2288)
!2346 = !DILocation(line: 692, column: 19, scope: !2288)
!2347 = !DILocation(line: 693, column: 18, scope: !2288)
!2348 = !DILocation(line: 693, column: 23, scope: !2288)
!2349 = !DILocation(line: 693, column: 32, scope: !2288)
!2350 = !DILocation(line: 693, column: 53, scope: !2288)
!2351 = !DILocation(line: 693, column: 58, scope: !2288)
!2352 = !DILocation(line: 693, column: 16, scope: !2288)
!2353 = !DILocation(line: 694, column: 25, scope: !2288)
!2354 = !DILocation(line: 694, column: 5, scope: !2288)
!2355 = !DILocation(line: 694, column: 19, scope: !2288)
!2356 = !DILocation(line: 694, column: 23, scope: !2288)
!2357 = !DILocation(line: 696, column: 12, scope: !2288)
!2358 = !DILocation(line: 696, column: 5, scope: !2288)
!2359 = distinct !DISubprogram(name: "response_io_status", scope: !3, file: !3, line: 642, type: !2360, isLocal: true, isDefinition: true, scopeLine: 645, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2360 = !DISubroutineType(types: !2361)
!2361 = !{!44, !61, !44, !44, !61, !44}
!2362 = !DILocalVariable(name: "tab_io_status", arg: 1, scope: !2359, file: !3, line: 642, type: !61)
!2363 = !DILocation(line: 642, column: 40, scope: !2359)
!2364 = !DILocalVariable(name: "address", arg: 2, scope: !2359, file: !3, line: 643, type: !44)
!2365 = !DILocation(line: 643, column: 35, scope: !2359)
!2366 = !DILocalVariable(name: "nb", arg: 3, scope: !2359, file: !3, line: 643, type: !44)
!2367 = !DILocation(line: 643, column: 48, scope: !2359)
!2368 = !DILocalVariable(name: "rsp", arg: 4, scope: !2359, file: !3, line: 644, type: !61)
!2369 = !DILocation(line: 644, column: 40, scope: !2359)
!2370 = !DILocalVariable(name: "offset", arg: 5, scope: !2359, file: !3, line: 644, type: !44)
!2371 = !DILocation(line: 644, column: 49, scope: !2359)
!2372 = !DILocalVariable(name: "shift", scope: !2359, file: !3, line: 646, type: !44)
!2373 = !DILocation(line: 646, column: 9, scope: !2359)
!2374 = !DILocalVariable(name: "one_byte", scope: !2359, file: !3, line: 648, type: !44)
!2375 = !DILocation(line: 648, column: 9, scope: !2359)
!2376 = !DILocalVariable(name: "i", scope: !2359, file: !3, line: 649, type: !44)
!2377 = !DILocation(line: 649, column: 9, scope: !2359)
!2378 = !DILocation(line: 651, column: 14, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2359, file: !3, line: 651, column: 5)
!2380 = !DILocation(line: 651, column: 12, scope: !2379)
!2381 = !DILocation(line: 651, column: 10, scope: !2379)
!2382 = !DILocation(line: 651, column: 23, scope: !2383)
!2383 = distinct !DILexicalBlock(scope: !2379, file: !3, line: 651, column: 5)
!2384 = !DILocation(line: 651, column: 27, scope: !2383)
!2385 = !DILocation(line: 651, column: 37, scope: !2383)
!2386 = !DILocation(line: 651, column: 35, scope: !2383)
!2387 = !DILocation(line: 651, column: 25, scope: !2383)
!2388 = !DILocation(line: 651, column: 5, scope: !2379)
!2389 = !DILocation(line: 652, column: 21, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2383, file: !3, line: 651, column: 46)
!2391 = !DILocation(line: 652, column: 35, scope: !2390)
!2392 = !DILocation(line: 652, column: 41, scope: !2390)
!2393 = !DILocation(line: 652, column: 38, scope: !2390)
!2394 = !DILocation(line: 652, column: 18, scope: !2390)
!2395 = !DILocation(line: 653, column: 13, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 653, column: 13)
!2397 = !DILocation(line: 653, column: 19, scope: !2396)
!2398 = !DILocation(line: 653, column: 13, scope: !2390)
!2399 = !DILocation(line: 655, column: 29, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2396, file: !3, line: 653, column: 25)
!2401 = !DILocation(line: 655, column: 13, scope: !2400)
!2402 = !DILocation(line: 655, column: 23, scope: !2400)
!2403 = !DILocation(line: 655, column: 27, scope: !2400)
!2404 = !DILocation(line: 656, column: 30, scope: !2400)
!2405 = !DILocation(line: 656, column: 22, scope: !2400)
!2406 = !DILocation(line: 657, column: 9, scope: !2400)
!2407 = !DILocation(line: 658, column: 18, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2396, file: !3, line: 657, column: 16)
!2409 = !DILocation(line: 660, column: 5, scope: !2390)
!2410 = !DILocation(line: 651, column: 42, scope: !2383)
!2411 = !DILocation(line: 651, column: 5, scope: !2383)
!2412 = distinct !{!2412, !2388, !2413}
!2413 = !DILocation(line: 660, column: 5, scope: !2379)
!2414 = !DILocation(line: 662, column: 9, scope: !2415)
!2415 = distinct !DILexicalBlock(scope: !2359, file: !3, line: 662, column: 9)
!2416 = !DILocation(line: 662, column: 15, scope: !2415)
!2417 = !DILocation(line: 662, column: 9, scope: !2359)
!2418 = !DILocation(line: 663, column: 25, scope: !2415)
!2419 = !DILocation(line: 663, column: 9, scope: !2415)
!2420 = !DILocation(line: 663, column: 19, scope: !2415)
!2421 = !DILocation(line: 663, column: 23, scope: !2415)
!2422 = !DILocation(line: 665, column: 12, scope: !2359)
!2423 = !DILocation(line: 665, column: 5, scope: !2359)
!2424 = distinct !DISubprogram(name: "modbus_reply_exception", scope: !3, file: !3, line: 1003, type: !2425, isLocal: false, isDefinition: true, scopeLine: 1005, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2425 = !DISubroutineType(types: !2426)
!2426 = !{!44, !478, !171, !72}
!2427 = !DILocalVariable(name: "ctx", arg: 1, scope: !2424, file: !3, line: 1003, type: !478)
!2428 = !DILocation(line: 1003, column: 38, scope: !2424)
!2429 = !DILocalVariable(name: "req", arg: 2, scope: !2424, file: !3, line: 1003, type: !171)
!2430 = !DILocation(line: 1003, column: 58, scope: !2424)
!2431 = !DILocalVariable(name: "exception_code", arg: 3, scope: !2424, file: !3, line: 1004, type: !72)
!2432 = !DILocation(line: 1004, column: 41, scope: !2424)
!2433 = !DILocalVariable(name: "offset", scope: !2424, file: !3, line: 1006, type: !44)
!2434 = !DILocation(line: 1006, column: 9, scope: !2424)
!2435 = !DILocalVariable(name: "slave", scope: !2424, file: !3, line: 1007, type: !44)
!2436 = !DILocation(line: 1007, column: 9, scope: !2424)
!2437 = !DILocalVariable(name: "function", scope: !2424, file: !3, line: 1008, type: !44)
!2438 = !DILocation(line: 1008, column: 9, scope: !2424)
!2439 = !DILocalVariable(name: "rsp", scope: !2424, file: !3, line: 1009, type: !636)
!2440 = !DILocation(line: 1009, column: 13, scope: !2424)
!2441 = !DILocalVariable(name: "rsp_length", scope: !2424, file: !3, line: 1010, type: !44)
!2442 = !DILocation(line: 1010, column: 9, scope: !2424)
!2443 = !DILocalVariable(name: "dummy_length", scope: !2424, file: !3, line: 1011, type: !44)
!2444 = !DILocation(line: 1011, column: 9, scope: !2424)
!2445 = !DILocalVariable(name: "sft", scope: !2424, file: !3, line: 1012, type: !516)
!2446 = !DILocation(line: 1012, column: 11, scope: !2424)
!2447 = !DILocation(line: 1014, column: 9, scope: !2448)
!2448 = distinct !DILexicalBlock(scope: !2424, file: !3, line: 1014, column: 9)
!2449 = !DILocation(line: 1014, column: 13, scope: !2448)
!2450 = !DILocation(line: 1014, column: 9, scope: !2424)
!2451 = !DILocation(line: 1015, column: 9, scope: !2452)
!2452 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 1014, column: 22)
!2453 = !DILocation(line: 1015, column: 15, scope: !2452)
!2454 = !DILocation(line: 1016, column: 9, scope: !2452)
!2455 = !DILocation(line: 1019, column: 14, scope: !2424)
!2456 = !DILocation(line: 1019, column: 19, scope: !2424)
!2457 = !DILocation(line: 1019, column: 28, scope: !2424)
!2458 = !DILocation(line: 1019, column: 12, scope: !2424)
!2459 = !DILocation(line: 1020, column: 13, scope: !2424)
!2460 = !DILocation(line: 1020, column: 17, scope: !2424)
!2461 = !DILocation(line: 1020, column: 24, scope: !2424)
!2462 = !DILocation(line: 1020, column: 11, scope: !2424)
!2463 = !DILocation(line: 1021, column: 16, scope: !2424)
!2464 = !DILocation(line: 1021, column: 20, scope: !2424)
!2465 = !DILocation(line: 1021, column: 14, scope: !2424)
!2466 = !DILocation(line: 1023, column: 17, scope: !2424)
!2467 = !DILocation(line: 1023, column: 9, scope: !2424)
!2468 = !DILocation(line: 1023, column: 15, scope: !2424)
!2469 = !DILocation(line: 1024, column: 20, scope: !2424)
!2470 = !DILocation(line: 1024, column: 29, scope: !2424)
!2471 = !DILocation(line: 1024, column: 9, scope: !2424)
!2472 = !DILocation(line: 1024, column: 18, scope: !2424)
!2473 = !DILocation(line: 1025, column: 16, scope: !2424)
!2474 = !DILocation(line: 1025, column: 21, scope: !2424)
!2475 = !DILocation(line: 1025, column: 30, scope: !2424)
!2476 = !DILocation(line: 1025, column: 51, scope: !2424)
!2477 = !DILocation(line: 1025, column: 9, scope: !2424)
!2478 = !DILocation(line: 1025, column: 14, scope: !2424)
!2479 = !DILocation(line: 1026, column: 18, scope: !2424)
!2480 = !DILocation(line: 1026, column: 23, scope: !2424)
!2481 = !DILocation(line: 1026, column: 32, scope: !2424)
!2482 = !DILocation(line: 1026, column: 59, scope: !2424)
!2483 = !DILocation(line: 1026, column: 16, scope: !2424)
!2484 = !DILocation(line: 1029, column: 9, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2424, file: !3, line: 1029, column: 9)
!2486 = !DILocation(line: 1029, column: 24, scope: !2485)
!2487 = !DILocation(line: 1029, column: 9, scope: !2424)
!2488 = !DILocation(line: 1030, column: 29, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2485, file: !3, line: 1029, column: 48)
!2490 = !DILocation(line: 1030, column: 23, scope: !2489)
!2491 = !DILocation(line: 1030, column: 9, scope: !2489)
!2492 = !DILocation(line: 1030, column: 27, scope: !2489)
!2493 = !DILocation(line: 1031, column: 25, scope: !2489)
!2494 = !DILocation(line: 1031, column: 30, scope: !2489)
!2495 = !DILocation(line: 1031, column: 35, scope: !2489)
!2496 = !DILocation(line: 1031, column: 16, scope: !2489)
!2497 = !DILocation(line: 1031, column: 9, scope: !2489)
!2498 = !DILocation(line: 1033, column: 9, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2485, file: !3, line: 1032, column: 12)
!2500 = !DILocation(line: 1033, column: 15, scope: !2499)
!2501 = !DILocation(line: 1034, column: 9, scope: !2499)
!2502 = !DILocation(line: 1036, column: 1, scope: !2424)
!2503 = distinct !DISubprogram(name: "modbus_read_bits", scope: !3, file: !3, line: 1084, type: !2504, isLocal: false, isDefinition: true, scopeLine: 1085, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2504 = !DISubroutineType(types: !2505)
!2505 = !{!44, !478, !44, !44, !61}
!2506 = !DILocalVariable(name: "ctx", arg: 1, scope: !2503, file: !3, line: 1084, type: !478)
!2507 = !DILocation(line: 1084, column: 32, scope: !2503)
!2508 = !DILocalVariable(name: "addr", arg: 2, scope: !2503, file: !3, line: 1084, type: !44)
!2509 = !DILocation(line: 1084, column: 41, scope: !2503)
!2510 = !DILocalVariable(name: "nb", arg: 3, scope: !2503, file: !3, line: 1084, type: !44)
!2511 = !DILocation(line: 1084, column: 51, scope: !2503)
!2512 = !DILocalVariable(name: "dest", arg: 4, scope: !2503, file: !3, line: 1084, type: !61)
!2513 = !DILocation(line: 1084, column: 64, scope: !2503)
!2514 = !DILocalVariable(name: "rc", scope: !2503, file: !3, line: 1086, type: !44)
!2515 = !DILocation(line: 1086, column: 9, scope: !2503)
!2516 = !DILocation(line: 1088, column: 9, scope: !2517)
!2517 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1088, column: 9)
!2518 = !DILocation(line: 1088, column: 13, scope: !2517)
!2519 = !DILocation(line: 1088, column: 9, scope: !2503)
!2520 = !DILocation(line: 1089, column: 9, scope: !2521)
!2521 = distinct !DILexicalBlock(scope: !2517, file: !3, line: 1088, column: 22)
!2522 = !DILocation(line: 1089, column: 15, scope: !2521)
!2523 = !DILocation(line: 1090, column: 9, scope: !2521)
!2524 = !DILocation(line: 1093, column: 9, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1093, column: 9)
!2526 = !DILocation(line: 1093, column: 12, scope: !2525)
!2527 = !DILocation(line: 1093, column: 9, scope: !2503)
!2528 = !DILocation(line: 1094, column: 13, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2530, file: !3, line: 1094, column: 13)
!2530 = distinct !DILexicalBlock(scope: !2525, file: !3, line: 1093, column: 36)
!2531 = !DILocation(line: 1094, column: 18, scope: !2529)
!2532 = !DILocation(line: 1094, column: 13, scope: !2530)
!2533 = !DILocation(line: 1095, column: 21, scope: !2534)
!2534 = distinct !DILexicalBlock(scope: !2529, file: !3, line: 1094, column: 25)
!2535 = !DILocation(line: 1097, column: 21, scope: !2534)
!2536 = !DILocation(line: 1095, column: 13, scope: !2534)
!2537 = !DILocation(line: 1098, column: 9, scope: !2534)
!2538 = !DILocation(line: 1099, column: 9, scope: !2530)
!2539 = !DILocation(line: 1099, column: 15, scope: !2530)
!2540 = !DILocation(line: 1100, column: 9, scope: !2530)
!2541 = !DILocation(line: 1103, column: 25, scope: !2503)
!2542 = !DILocation(line: 1103, column: 52, scope: !2503)
!2543 = !DILocation(line: 1103, column: 58, scope: !2503)
!2544 = !DILocation(line: 1103, column: 62, scope: !2503)
!2545 = !DILocation(line: 1103, column: 10, scope: !2503)
!2546 = !DILocation(line: 1103, column: 8, scope: !2503)
!2547 = !DILocation(line: 1105, column: 9, scope: !2548)
!2548 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1105, column: 9)
!2549 = !DILocation(line: 1105, column: 12, scope: !2548)
!2550 = !DILocation(line: 1105, column: 9, scope: !2503)
!2551 = !DILocation(line: 1106, column: 9, scope: !2548)
!2552 = !DILocation(line: 1108, column: 16, scope: !2548)
!2553 = !DILocation(line: 1108, column: 9, scope: !2548)
!2554 = !DILocation(line: 1109, column: 1, scope: !2503)
!2555 = distinct !DISubprogram(name: "read_io_status", scope: !3, file: !3, line: 1039, type: !509, isLocal: true, isDefinition: true, scopeLine: 1041, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2556 = !DILocalVariable(name: "ctx", arg: 1, scope: !2555, file: !3, line: 1039, type: !478)
!2557 = !DILocation(line: 1039, column: 37, scope: !2555)
!2558 = !DILocalVariable(name: "function", arg: 2, scope: !2555, file: !3, line: 1039, type: !44)
!2559 = !DILocation(line: 1039, column: 46, scope: !2555)
!2560 = !DILocalVariable(name: "addr", arg: 3, scope: !2555, file: !3, line: 1040, type: !44)
!2561 = !DILocation(line: 1040, column: 31, scope: !2555)
!2562 = !DILocalVariable(name: "nb", arg: 4, scope: !2555, file: !3, line: 1040, type: !44)
!2563 = !DILocation(line: 1040, column: 41, scope: !2555)
!2564 = !DILocalVariable(name: "dest", arg: 5, scope: !2555, file: !3, line: 1040, type: !61)
!2565 = !DILocation(line: 1040, column: 54, scope: !2555)
!2566 = !DILocalVariable(name: "rc", scope: !2555, file: !3, line: 1042, type: !44)
!2567 = !DILocation(line: 1042, column: 9, scope: !2555)
!2568 = !DILocalVariable(name: "req_length", scope: !2555, file: !3, line: 1043, type: !44)
!2569 = !DILocation(line: 1043, column: 9, scope: !2555)
!2570 = !DILocalVariable(name: "req", scope: !2555, file: !3, line: 1045, type: !2571)
!2571 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 96, elements: !2572)
!2572 = !{!2573}
!2573 = !DISubrange(count: 12)
!2574 = !DILocation(line: 1045, column: 13, scope: !2555)
!2575 = !DILocalVariable(name: "rsp", scope: !2555, file: !3, line: 1046, type: !636)
!2576 = !DILocation(line: 1046, column: 13, scope: !2555)
!2577 = !DILocation(line: 1048, column: 18, scope: !2555)
!2578 = !DILocation(line: 1048, column: 23, scope: !2555)
!2579 = !DILocation(line: 1048, column: 32, scope: !2555)
!2580 = !DILocation(line: 1048, column: 52, scope: !2555)
!2581 = !DILocation(line: 1048, column: 57, scope: !2555)
!2582 = !DILocation(line: 1048, column: 67, scope: !2555)
!2583 = !DILocation(line: 1048, column: 73, scope: !2555)
!2584 = !DILocation(line: 1048, column: 77, scope: !2555)
!2585 = !DILocation(line: 1048, column: 16, scope: !2555)
!2586 = !DILocation(line: 1050, column: 19, scope: !2555)
!2587 = !DILocation(line: 1050, column: 24, scope: !2555)
!2588 = !DILocation(line: 1050, column: 29, scope: !2555)
!2589 = !DILocation(line: 1050, column: 10, scope: !2555)
!2590 = !DILocation(line: 1050, column: 8, scope: !2555)
!2591 = !DILocation(line: 1051, column: 9, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 1051, column: 9)
!2593 = !DILocation(line: 1051, column: 12, scope: !2592)
!2594 = !DILocation(line: 1051, column: 9, scope: !2555)
!2595 = !DILocalVariable(name: "i", scope: !2596, file: !3, line: 1052, type: !44)
!2596 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 1051, column: 17)
!2597 = !DILocation(line: 1052, column: 13, scope: !2596)
!2598 = !DILocalVariable(name: "temp", scope: !2596, file: !3, line: 1052, type: !44)
!2599 = !DILocation(line: 1052, column: 16, scope: !2596)
!2600 = !DILocalVariable(name: "bit", scope: !2596, file: !3, line: 1052, type: !44)
!2601 = !DILocation(line: 1052, column: 22, scope: !2596)
!2602 = !DILocalVariable(name: "pos", scope: !2596, file: !3, line: 1053, type: !44)
!2603 = !DILocation(line: 1053, column: 13, scope: !2596)
!2604 = !DILocalVariable(name: "offset", scope: !2596, file: !3, line: 1054, type: !44)
!2605 = !DILocation(line: 1054, column: 13, scope: !2596)
!2606 = !DILocalVariable(name: "offset_end", scope: !2596, file: !3, line: 1055, type: !44)
!2607 = !DILocation(line: 1055, column: 13, scope: !2596)
!2608 = !DILocation(line: 1057, column: 34, scope: !2596)
!2609 = !DILocation(line: 1057, column: 39, scope: !2596)
!2610 = !DILocation(line: 1057, column: 14, scope: !2596)
!2611 = !DILocation(line: 1057, column: 12, scope: !2596)
!2612 = !DILocation(line: 1058, column: 13, scope: !2613)
!2613 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 1058, column: 13)
!2614 = !DILocation(line: 1058, column: 16, scope: !2613)
!2615 = !DILocation(line: 1058, column: 13, scope: !2596)
!2616 = !DILocation(line: 1059, column: 13, scope: !2613)
!2617 = !DILocation(line: 1061, column: 33, scope: !2596)
!2618 = !DILocation(line: 1061, column: 38, scope: !2596)
!2619 = !DILocation(line: 1061, column: 43, scope: !2596)
!2620 = !DILocation(line: 1061, column: 48, scope: !2596)
!2621 = !DILocation(line: 1061, column: 14, scope: !2596)
!2622 = !DILocation(line: 1061, column: 12, scope: !2596)
!2623 = !DILocation(line: 1062, column: 13, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 1062, column: 13)
!2625 = !DILocation(line: 1062, column: 16, scope: !2624)
!2626 = !DILocation(line: 1062, column: 13, scope: !2596)
!2627 = !DILocation(line: 1063, column: 13, scope: !2624)
!2628 = !DILocation(line: 1065, column: 18, scope: !2596)
!2629 = !DILocation(line: 1065, column: 23, scope: !2596)
!2630 = !DILocation(line: 1065, column: 32, scope: !2596)
!2631 = !DILocation(line: 1065, column: 46, scope: !2596)
!2632 = !DILocation(line: 1065, column: 16, scope: !2596)
!2633 = !DILocation(line: 1066, column: 22, scope: !2596)
!2634 = !DILocation(line: 1066, column: 31, scope: !2596)
!2635 = !DILocation(line: 1066, column: 29, scope: !2596)
!2636 = !DILocation(line: 1066, column: 20, scope: !2596)
!2637 = !DILocation(line: 1067, column: 18, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 1067, column: 9)
!2639 = !DILocation(line: 1067, column: 16, scope: !2638)
!2640 = !DILocation(line: 1067, column: 14, scope: !2638)
!2641 = !DILocation(line: 1067, column: 26, scope: !2642)
!2642 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 1067, column: 9)
!2643 = !DILocation(line: 1067, column: 30, scope: !2642)
!2644 = !DILocation(line: 1067, column: 28, scope: !2642)
!2645 = !DILocation(line: 1067, column: 9, scope: !2638)
!2646 = !DILocation(line: 1069, column: 24, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2642, file: !3, line: 1067, column: 47)
!2648 = !DILocation(line: 1069, column: 20, scope: !2647)
!2649 = !DILocation(line: 1069, column: 18, scope: !2647)
!2650 = !DILocation(line: 1071, column: 22, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2647, file: !3, line: 1071, column: 13)
!2652 = !DILocation(line: 1071, column: 18, scope: !2651)
!2653 = !DILocation(line: 1071, column: 31, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2651, file: !3, line: 1071, column: 13)
!2655 = !DILocation(line: 1071, column: 35, scope: !2654)
!2656 = !DILocation(line: 1071, column: 43, scope: !2654)
!2657 = !DILocation(line: 1071, column: 47, scope: !2654)
!2658 = !DILocation(line: 1071, column: 53, scope: !2654)
!2659 = !DILocation(line: 1071, column: 51, scope: !2654)
!2660 = !DILocation(line: 1071, column: 13, scope: !2651)
!2661 = !DILocation(line: 1072, column: 32, scope: !2662)
!2662 = distinct !DILexicalBlock(scope: !2654, file: !3, line: 1071, column: 59)
!2663 = !DILocation(line: 1072, column: 39, scope: !2662)
!2664 = !DILocation(line: 1072, column: 37, scope: !2662)
!2665 = !DILocation(line: 1072, column: 31, scope: !2662)
!2666 = !DILocation(line: 1072, column: 17, scope: !2662)
!2667 = !DILocation(line: 1072, column: 25, scope: !2662)
!2668 = !DILocation(line: 1072, column: 29, scope: !2662)
!2669 = !DILocation(line: 1073, column: 23, scope: !2662)
!2670 = !DILocation(line: 1073, column: 27, scope: !2662)
!2671 = !DILocation(line: 1073, column: 21, scope: !2662)
!2672 = !DILocation(line: 1071, column: 13, scope: !2654)
!2673 = distinct !{!2673, !2660, !2674}
!2674 = !DILocation(line: 1074, column: 13, scope: !2651)
!2675 = !DILocation(line: 1076, column: 9, scope: !2647)
!2676 = !DILocation(line: 1067, column: 43, scope: !2642)
!2677 = !DILocation(line: 1067, column: 9, scope: !2642)
!2678 = distinct !{!2678, !2645, !2679}
!2679 = !DILocation(line: 1076, column: 9, scope: !2638)
!2680 = !DILocation(line: 1077, column: 5, scope: !2596)
!2681 = !DILocation(line: 1079, column: 12, scope: !2555)
!2682 = !DILocation(line: 1079, column: 5, scope: !2555)
!2683 = !DILocation(line: 1080, column: 1, scope: !2555)
!2684 = distinct !DISubprogram(name: "check_confirmation", scope: !3, file: !3, line: 511, type: !2685, isLocal: true, isDefinition: true, scopeLine: 513, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2685 = !DISubroutineType(types: !2686)
!2686 = !{!44, !478, !61, !61, !44}
!2687 = !DILocalVariable(name: "ctx", arg: 1, scope: !2684, file: !3, line: 511, type: !478)
!2688 = !DILocation(line: 511, column: 41, scope: !2684)
!2689 = !DILocalVariable(name: "req", arg: 2, scope: !2684, file: !3, line: 511, type: !61)
!2690 = !DILocation(line: 511, column: 55, scope: !2684)
!2691 = !DILocalVariable(name: "rsp", arg: 3, scope: !2684, file: !3, line: 512, type: !61)
!2692 = !DILocation(line: 512, column: 40, scope: !2684)
!2693 = !DILocalVariable(name: "rsp_length", arg: 4, scope: !2684, file: !3, line: 512, type: !44)
!2694 = !DILocation(line: 512, column: 49, scope: !2684)
!2695 = !DILocalVariable(name: "rc", scope: !2684, file: !3, line: 514, type: !44)
!2696 = !DILocation(line: 514, column: 9, scope: !2684)
!2697 = !DILocalVariable(name: "rsp_length_computed", scope: !2684, file: !3, line: 515, type: !44)
!2698 = !DILocation(line: 515, column: 9, scope: !2684)
!2699 = !DILocalVariable(name: "offset", scope: !2684, file: !3, line: 516, type: !197)
!2700 = !DILocation(line: 516, column: 15, scope: !2684)
!2701 = !DILocation(line: 516, column: 24, scope: !2684)
!2702 = !DILocation(line: 516, column: 29, scope: !2684)
!2703 = !DILocation(line: 516, column: 38, scope: !2684)
!2704 = !DILocalVariable(name: "function", scope: !2684, file: !3, line: 517, type: !197)
!2705 = !DILocation(line: 517, column: 15, scope: !2684)
!2706 = !DILocation(line: 517, column: 26, scope: !2684)
!2707 = !DILocation(line: 517, column: 30, scope: !2684)
!2708 = !DILocation(line: 519, column: 9, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 519, column: 9)
!2710 = !DILocation(line: 519, column: 14, scope: !2709)
!2711 = !DILocation(line: 519, column: 23, scope: !2709)
!2712 = !DILocation(line: 519, column: 9, scope: !2684)
!2713 = !DILocation(line: 520, column: 14, scope: !2714)
!2714 = distinct !DILexicalBlock(scope: !2709, file: !3, line: 519, column: 47)
!2715 = !DILocation(line: 520, column: 19, scope: !2714)
!2716 = !DILocation(line: 520, column: 28, scope: !2714)
!2717 = !DILocation(line: 520, column: 51, scope: !2714)
!2718 = !DILocation(line: 520, column: 56, scope: !2714)
!2719 = !DILocation(line: 520, column: 61, scope: !2714)
!2720 = !DILocation(line: 520, column: 66, scope: !2714)
!2721 = !DILocation(line: 520, column: 12, scope: !2714)
!2722 = !DILocation(line: 521, column: 13, scope: !2723)
!2723 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 521, column: 13)
!2724 = !DILocation(line: 521, column: 16, scope: !2723)
!2725 = !DILocation(line: 521, column: 13, scope: !2714)
!2726 = !DILocation(line: 522, column: 17, scope: !2727)
!2727 = distinct !DILexicalBlock(scope: !2728, file: !3, line: 522, column: 17)
!2728 = distinct !DILexicalBlock(scope: !2723, file: !3, line: 521, column: 23)
!2729 = !DILocation(line: 522, column: 22, scope: !2727)
!2730 = !DILocation(line: 522, column: 37, scope: !2727)
!2731 = !DILocation(line: 522, column: 17, scope: !2728)
!2732 = !DILocation(line: 523, column: 41, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2727, file: !3, line: 522, column: 71)
!2734 = !DILocation(line: 523, column: 17, scope: !2733)
!2735 = !DILocation(line: 524, column: 30, scope: !2733)
!2736 = !DILocation(line: 524, column: 17, scope: !2733)
!2737 = !DILocation(line: 525, column: 13, scope: !2733)
!2738 = !DILocation(line: 526, column: 13, scope: !2728)
!2739 = !DILocation(line: 528, column: 5, scope: !2714)
!2740 = !DILocation(line: 530, column: 64, scope: !2684)
!2741 = !DILocation(line: 530, column: 69, scope: !2684)
!2742 = !DILocation(line: 530, column: 27, scope: !2684)
!2743 = !DILocation(line: 530, column: 25, scope: !2684)
!2744 = !DILocation(line: 533, column: 9, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 533, column: 9)
!2746 = !DILocation(line: 533, column: 18, scope: !2745)
!2747 = !DILocation(line: 533, column: 9, scope: !2684)
!2748 = !DILocation(line: 534, column: 13, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2750, file: !3, line: 534, column: 13)
!2750 = distinct !DILexicalBlock(scope: !2745, file: !3, line: 533, column: 27)
!2751 = !DILocation(line: 534, column: 28, scope: !2749)
!2752 = !DILocation(line: 534, column: 35, scope: !2749)
!2753 = !DILocation(line: 534, column: 46, scope: !2749)
!2754 = !DILocation(line: 534, column: 51, scope: !2749)
!2755 = !DILocation(line: 534, column: 60, scope: !2749)
!2756 = !DILocation(line: 534, column: 39, scope: !2749)
!2757 = !DILocation(line: 534, column: 24, scope: !2749)
!2758 = !DILocation(line: 534, column: 77, scope: !2749)
!2759 = !DILocation(line: 535, column: 13, scope: !2749)
!2760 = !DILocation(line: 535, column: 17, scope: !2749)
!2761 = !DILocation(line: 535, column: 29, scope: !2749)
!2762 = !DILocation(line: 535, column: 33, scope: !2749)
!2763 = !DILocation(line: 535, column: 41, scope: !2749)
!2764 = !DILocation(line: 535, column: 25, scope: !2749)
!2765 = !DILocation(line: 534, column: 13, scope: !2750)
!2766 = !DILocalVariable(name: "exception_code", scope: !2767, file: !3, line: 538, type: !44)
!2767 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 535, column: 50)
!2768 = !DILocation(line: 538, column: 17, scope: !2767)
!2769 = !DILocation(line: 538, column: 34, scope: !2767)
!2770 = !DILocation(line: 538, column: 38, scope: !2767)
!2771 = !DILocation(line: 538, column: 45, scope: !2767)
!2772 = !DILocation(line: 539, column: 17, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 539, column: 17)
!2774 = !DILocation(line: 539, column: 32, scope: !2773)
!2775 = !DILocation(line: 539, column: 17, scope: !2767)
!2776 = !DILocation(line: 540, column: 42, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2773, file: !3, line: 539, column: 56)
!2778 = !DILocation(line: 540, column: 40, scope: !2777)
!2779 = !DILocation(line: 540, column: 17, scope: !2777)
!2780 = !DILocation(line: 540, column: 23, scope: !2777)
!2781 = !DILocation(line: 541, column: 13, scope: !2777)
!2782 = !DILocation(line: 542, column: 17, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !2773, file: !3, line: 541, column: 20)
!2784 = !DILocation(line: 542, column: 23, scope: !2783)
!2785 = !DILocation(line: 544, column: 26, scope: !2767)
!2786 = !DILocation(line: 544, column: 13, scope: !2767)
!2787 = !DILocation(line: 545, column: 13, scope: !2767)
!2788 = !DILocation(line: 547, column: 13, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 546, column: 16)
!2790 = !DILocation(line: 547, column: 19, scope: !2789)
!2791 = !DILocation(line: 548, column: 26, scope: !2789)
!2792 = !DILocation(line: 548, column: 13, scope: !2789)
!2793 = !DILocation(line: 549, column: 13, scope: !2789)
!2794 = !DILocation(line: 554, column: 10, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 554, column: 9)
!2796 = !DILocation(line: 554, column: 24, scope: !2795)
!2797 = !DILocation(line: 554, column: 21, scope: !2795)
!2798 = !DILocation(line: 554, column: 44, scope: !2795)
!2799 = !DILocation(line: 555, column: 10, scope: !2795)
!2800 = !DILocation(line: 555, column: 30, scope: !2795)
!2801 = !DILocation(line: 555, column: 55, scope: !2795)
!2802 = !DILocation(line: 556, column: 9, scope: !2795)
!2803 = !DILocation(line: 556, column: 18, scope: !2795)
!2804 = !DILocation(line: 554, column: 9, scope: !2684)
!2805 = !DILocalVariable(name: "req_nb_value", scope: !2806, file: !3, line: 557, type: !44)
!2806 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 556, column: 26)
!2807 = !DILocation(line: 557, column: 13, scope: !2806)
!2808 = !DILocalVariable(name: "rsp_nb_value", scope: !2806, file: !3, line: 558, type: !44)
!2809 = !DILocation(line: 558, column: 13, scope: !2806)
!2810 = !DILocation(line: 561, column: 13, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 561, column: 13)
!2812 = !DILocation(line: 561, column: 25, scope: !2811)
!2813 = !DILocation(line: 561, column: 29, scope: !2811)
!2814 = !DILocation(line: 561, column: 22, scope: !2811)
!2815 = !DILocation(line: 561, column: 13, scope: !2806)
!2816 = !DILocation(line: 562, column: 17, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 562, column: 17)
!2818 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 561, column: 38)
!2819 = !DILocation(line: 562, column: 22, scope: !2817)
!2820 = !DILocation(line: 562, column: 17, scope: !2818)
!2821 = !DILocation(line: 563, column: 25, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2817, file: !3, line: 562, column: 29)
!2823 = !DILocation(line: 565, column: 25, scope: !2822)
!2824 = !DILocation(line: 565, column: 35, scope: !2822)
!2825 = !DILocation(line: 565, column: 39, scope: !2822)
!2826 = !DILocation(line: 563, column: 17, scope: !2822)
!2827 = !DILocation(line: 566, column: 13, scope: !2822)
!2828 = !DILocation(line: 567, column: 17, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 567, column: 17)
!2830 = !DILocation(line: 567, column: 22, scope: !2829)
!2831 = !DILocation(line: 567, column: 37, scope: !2829)
!2832 = !DILocation(line: 567, column: 17, scope: !2818)
!2833 = !DILocation(line: 568, column: 41, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 567, column: 71)
!2835 = !DILocation(line: 568, column: 17, scope: !2834)
!2836 = !DILocation(line: 569, column: 30, scope: !2834)
!2837 = !DILocation(line: 569, column: 17, scope: !2834)
!2838 = !DILocation(line: 570, column: 13, scope: !2834)
!2839 = !DILocation(line: 571, column: 13, scope: !2818)
!2840 = !DILocation(line: 571, column: 19, scope: !2818)
!2841 = !DILocation(line: 572, column: 13, scope: !2818)
!2842 = !DILocation(line: 576, column: 17, scope: !2806)
!2843 = !DILocation(line: 576, column: 9, scope: !2806)
!2844 = !DILocation(line: 582, column: 29, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 576, column: 27)
!2846 = !DILocation(line: 582, column: 33, scope: !2845)
!2847 = !DILocation(line: 582, column: 40, scope: !2845)
!2848 = !DILocation(line: 582, column: 45, scope: !2845)
!2849 = !DILocation(line: 582, column: 53, scope: !2845)
!2850 = !DILocation(line: 582, column: 57, scope: !2845)
!2851 = !DILocation(line: 582, column: 64, scope: !2845)
!2852 = !DILocation(line: 582, column: 51, scope: !2845)
!2853 = !DILocation(line: 582, column: 26, scope: !2845)
!2854 = !DILocation(line: 583, column: 29, scope: !2845)
!2855 = !DILocation(line: 583, column: 42, scope: !2845)
!2856 = !DILocation(line: 583, column: 51, scope: !2845)
!2857 = !DILocation(line: 583, column: 64, scope: !2845)
!2858 = !DILocation(line: 583, column: 50, scope: !2845)
!2859 = !DILocation(line: 583, column: 47, scope: !2845)
!2860 = !DILocation(line: 583, column: 26, scope: !2845)
!2861 = !DILocation(line: 584, column: 28, scope: !2845)
!2862 = !DILocation(line: 584, column: 32, scope: !2845)
!2863 = !DILocation(line: 584, column: 39, scope: !2845)
!2864 = !DILocation(line: 584, column: 26, scope: !2845)
!2865 = !DILocation(line: 585, column: 13, scope: !2845)
!2866 = !DILocation(line: 590, column: 29, scope: !2845)
!2867 = !DILocation(line: 590, column: 33, scope: !2845)
!2868 = !DILocation(line: 590, column: 40, scope: !2845)
!2869 = !DILocation(line: 590, column: 45, scope: !2845)
!2870 = !DILocation(line: 590, column: 53, scope: !2845)
!2871 = !DILocation(line: 590, column: 57, scope: !2845)
!2872 = !DILocation(line: 590, column: 64, scope: !2845)
!2873 = !DILocation(line: 590, column: 51, scope: !2845)
!2874 = !DILocation(line: 590, column: 26, scope: !2845)
!2875 = !DILocation(line: 591, column: 29, scope: !2845)
!2876 = !DILocation(line: 591, column: 33, scope: !2845)
!2877 = !DILocation(line: 591, column: 40, scope: !2845)
!2878 = !DILocation(line: 591, column: 45, scope: !2845)
!2879 = !DILocation(line: 591, column: 26, scope: !2845)
!2880 = !DILocation(line: 592, column: 13, scope: !2845)
!2881 = !DILocation(line: 596, column: 29, scope: !2845)
!2882 = !DILocation(line: 596, column: 33, scope: !2845)
!2883 = !DILocation(line: 596, column: 40, scope: !2845)
!2884 = !DILocation(line: 596, column: 45, scope: !2845)
!2885 = !DILocation(line: 596, column: 53, scope: !2845)
!2886 = !DILocation(line: 596, column: 57, scope: !2845)
!2887 = !DILocation(line: 596, column: 64, scope: !2845)
!2888 = !DILocation(line: 596, column: 51, scope: !2845)
!2889 = !DILocation(line: 596, column: 26, scope: !2845)
!2890 = !DILocation(line: 597, column: 29, scope: !2845)
!2891 = !DILocation(line: 597, column: 33, scope: !2845)
!2892 = !DILocation(line: 597, column: 40, scope: !2845)
!2893 = !DILocation(line: 597, column: 45, scope: !2845)
!2894 = !DILocation(line: 597, column: 53, scope: !2845)
!2895 = !DILocation(line: 597, column: 57, scope: !2845)
!2896 = !DILocation(line: 597, column: 64, scope: !2845)
!2897 = !DILocation(line: 597, column: 51, scope: !2845)
!2898 = !DILocation(line: 597, column: 26, scope: !2845)
!2899 = !DILocation(line: 598, column: 13, scope: !2845)
!2900 = !DILocation(line: 601, column: 43, scope: !2845)
!2901 = !DILocation(line: 601, column: 47, scope: !2845)
!2902 = !DILocation(line: 601, column: 54, scope: !2845)
!2903 = !DILocation(line: 601, column: 41, scope: !2845)
!2904 = !DILocation(line: 601, column: 26, scope: !2845)
!2905 = !DILocation(line: 602, column: 13, scope: !2845)
!2906 = !DILocation(line: 605, column: 41, scope: !2845)
!2907 = !DILocation(line: 605, column: 26, scope: !2845)
!2908 = !DILocation(line: 606, column: 9, scope: !2845)
!2909 = !DILocation(line: 608, column: 13, scope: !2910)
!2910 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 608, column: 13)
!2911 = !DILocation(line: 608, column: 29, scope: !2910)
!2912 = !DILocation(line: 608, column: 26, scope: !2910)
!2913 = !DILocation(line: 608, column: 13, scope: !2806)
!2914 = !DILocation(line: 609, column: 18, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 608, column: 43)
!2916 = !DILocation(line: 609, column: 16, scope: !2915)
!2917 = !DILocation(line: 610, column: 9, scope: !2915)
!2918 = !DILocation(line: 611, column: 17, scope: !2919)
!2919 = distinct !DILexicalBlock(scope: !2920, file: !3, line: 611, column: 17)
!2920 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 610, column: 16)
!2921 = !DILocation(line: 611, column: 22, scope: !2919)
!2922 = !DILocation(line: 611, column: 17, scope: !2920)
!2923 = !DILocation(line: 612, column: 25, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2919, file: !3, line: 611, column: 29)
!2925 = !DILocation(line: 614, column: 25, scope: !2924)
!2926 = !DILocation(line: 614, column: 39, scope: !2924)
!2927 = !DILocation(line: 612, column: 17, scope: !2924)
!2928 = !DILocation(line: 615, column: 13, scope: !2924)
!2929 = !DILocation(line: 617, column: 17, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2920, file: !3, line: 617, column: 17)
!2931 = !DILocation(line: 617, column: 22, scope: !2930)
!2932 = !DILocation(line: 617, column: 37, scope: !2930)
!2933 = !DILocation(line: 617, column: 17, scope: !2920)
!2934 = !DILocation(line: 618, column: 41, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2930, file: !3, line: 617, column: 71)
!2936 = !DILocation(line: 618, column: 17, scope: !2935)
!2937 = !DILocation(line: 619, column: 30, scope: !2935)
!2938 = !DILocation(line: 619, column: 17, scope: !2935)
!2939 = !DILocation(line: 620, column: 13, scope: !2935)
!2940 = !DILocation(line: 622, column: 13, scope: !2920)
!2941 = !DILocation(line: 622, column: 19, scope: !2920)
!2942 = !DILocation(line: 623, column: 16, scope: !2920)
!2943 = !DILocation(line: 625, column: 5, scope: !2806)
!2944 = !DILocation(line: 626, column: 13, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 626, column: 13)
!2946 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 625, column: 12)
!2947 = !DILocation(line: 626, column: 18, scope: !2945)
!2948 = !DILocation(line: 626, column: 13, scope: !2946)
!2949 = !DILocation(line: 627, column: 21, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2945, file: !3, line: 626, column: 25)
!2951 = !DILocation(line: 629, column: 21, scope: !2950)
!2952 = !DILocation(line: 629, column: 33, scope: !2950)
!2953 = !DILocation(line: 627, column: 13, scope: !2950)
!2954 = !DILocation(line: 630, column: 9, scope: !2950)
!2955 = !DILocation(line: 631, column: 13, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 631, column: 13)
!2957 = !DILocation(line: 631, column: 18, scope: !2956)
!2958 = !DILocation(line: 631, column: 33, scope: !2956)
!2959 = !DILocation(line: 631, column: 13, scope: !2946)
!2960 = !DILocation(line: 632, column: 37, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2956, file: !3, line: 631, column: 67)
!2962 = !DILocation(line: 632, column: 13, scope: !2961)
!2963 = !DILocation(line: 633, column: 26, scope: !2961)
!2964 = !DILocation(line: 633, column: 13, scope: !2961)
!2965 = !DILocation(line: 634, column: 9, scope: !2961)
!2966 = !DILocation(line: 635, column: 9, scope: !2946)
!2967 = !DILocation(line: 635, column: 15, scope: !2946)
!2968 = !DILocation(line: 636, column: 12, scope: !2946)
!2969 = !DILocation(line: 639, column: 12, scope: !2684)
!2970 = !DILocation(line: 639, column: 5, scope: !2684)
!2971 = !DILocation(line: 640, column: 1, scope: !2684)
!2972 = distinct !DISubprogram(name: "compute_response_length_from_request", scope: !3, file: !3, line: 129, type: !2973, isLocal: true, isDefinition: true, scopeLine: 130, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!2973 = !DISubroutineType(types: !2974)
!2974 = !{!72, !478, !61}
!2975 = !DILocalVariable(name: "ctx", arg: 1, scope: !2972, file: !3, line: 129, type: !478)
!2976 = !DILocation(line: 129, column: 68, scope: !2972)
!2977 = !DILocalVariable(name: "req", arg: 2, scope: !2972, file: !3, line: 129, type: !61)
!2978 = !DILocation(line: 129, column: 82, scope: !2972)
!2979 = !DILocalVariable(name: "length", scope: !2972, file: !3, line: 131, type: !44)
!2980 = !DILocation(line: 131, column: 9, scope: !2972)
!2981 = !DILocalVariable(name: "offset", scope: !2972, file: !3, line: 132, type: !197)
!2982 = !DILocation(line: 132, column: 15, scope: !2972)
!2983 = !DILocation(line: 132, column: 24, scope: !2972)
!2984 = !DILocation(line: 132, column: 29, scope: !2972)
!2985 = !DILocation(line: 132, column: 38, scope: !2972)
!2986 = !DILocation(line: 134, column: 13, scope: !2972)
!2987 = !DILocation(line: 134, column: 17, scope: !2972)
!2988 = !DILocation(line: 134, column: 5, scope: !2972)
!2989 = !DILocalVariable(name: "nb", scope: !2990, file: !3, line: 138, type: !44)
!2990 = distinct !DILexicalBlock(scope: !2991, file: !3, line: 136, column: 42)
!2991 = distinct !DILexicalBlock(scope: !2972, file: !3, line: 134, column: 26)
!2992 = !DILocation(line: 138, column: 13, scope: !2990)
!2993 = !DILocation(line: 138, column: 19, scope: !2990)
!2994 = !DILocation(line: 138, column: 23, scope: !2990)
!2995 = !DILocation(line: 138, column: 30, scope: !2990)
!2996 = !DILocation(line: 138, column: 35, scope: !2990)
!2997 = !DILocation(line: 138, column: 43, scope: !2990)
!2998 = !DILocation(line: 138, column: 47, scope: !2990)
!2999 = !DILocation(line: 138, column: 54, scope: !2990)
!3000 = !DILocation(line: 138, column: 41, scope: !2990)
!3001 = !DILocation(line: 139, column: 23, scope: !2990)
!3002 = !DILocation(line: 139, column: 26, scope: !2990)
!3003 = !DILocation(line: 139, column: 20, scope: !2990)
!3004 = !DILocation(line: 139, column: 35, scope: !2990)
!3005 = !DILocation(line: 139, column: 38, scope: !2990)
!3006 = !DILocation(line: 139, column: 34, scope: !2990)
!3007 = !DILocation(line: 139, column: 31, scope: !2990)
!3008 = !DILocation(line: 139, column: 16, scope: !2990)
!3009 = !DILocation(line: 141, column: 9, scope: !2991)
!3010 = !DILocation(line: 146, column: 27, scope: !2991)
!3011 = !DILocation(line: 146, column: 31, scope: !2991)
!3012 = !DILocation(line: 146, column: 38, scope: !2991)
!3013 = !DILocation(line: 146, column: 43, scope: !2991)
!3014 = !DILocation(line: 146, column: 50, scope: !2991)
!3015 = !DILocation(line: 146, column: 54, scope: !2991)
!3016 = !DILocation(line: 146, column: 61, scope: !2991)
!3017 = !DILocation(line: 146, column: 48, scope: !2991)
!3018 = !DILocation(line: 146, column: 24, scope: !2991)
!3019 = !DILocation(line: 146, column: 20, scope: !2991)
!3020 = !DILocation(line: 146, column: 16, scope: !2991)
!3021 = !DILocation(line: 147, column: 9, scope: !2991)
!3022 = !DILocation(line: 149, column: 16, scope: !2991)
!3023 = !DILocation(line: 150, column: 9, scope: !2991)
!3024 = !DILocation(line: 154, column: 9, scope: !2991)
!3025 = !DILocation(line: 156, column: 16, scope: !2991)
!3026 = !DILocation(line: 157, column: 9, scope: !2991)
!3027 = !DILocation(line: 159, column: 16, scope: !2991)
!3028 = !DILocation(line: 160, column: 5, scope: !2991)
!3029 = !DILocation(line: 162, column: 12, scope: !2972)
!3030 = !DILocation(line: 162, column: 21, scope: !2972)
!3031 = !DILocation(line: 162, column: 19, scope: !2972)
!3032 = !DILocation(line: 162, column: 30, scope: !2972)
!3033 = !DILocation(line: 162, column: 35, scope: !2972)
!3034 = !DILocation(line: 162, column: 44, scope: !2972)
!3035 = !DILocation(line: 162, column: 28, scope: !2972)
!3036 = !DILocation(line: 162, column: 5, scope: !2972)
!3037 = !DILocation(line: 163, column: 1, scope: !2972)
!3038 = distinct !DISubprogram(name: "modbus_read_input_bits", scope: !3, file: !3, line: 1113, type: !2504, isLocal: false, isDefinition: true, scopeLine: 1114, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3039 = !DILocalVariable(name: "ctx", arg: 1, scope: !3038, file: !3, line: 1113, type: !478)
!3040 = !DILocation(line: 1113, column: 38, scope: !3038)
!3041 = !DILocalVariable(name: "addr", arg: 2, scope: !3038, file: !3, line: 1113, type: !44)
!3042 = !DILocation(line: 1113, column: 47, scope: !3038)
!3043 = !DILocalVariable(name: "nb", arg: 3, scope: !3038, file: !3, line: 1113, type: !44)
!3044 = !DILocation(line: 1113, column: 57, scope: !3038)
!3045 = !DILocalVariable(name: "dest", arg: 4, scope: !3038, file: !3, line: 1113, type: !61)
!3046 = !DILocation(line: 1113, column: 70, scope: !3038)
!3047 = !DILocalVariable(name: "rc", scope: !3038, file: !3, line: 1115, type: !44)
!3048 = !DILocation(line: 1115, column: 9, scope: !3038)
!3049 = !DILocation(line: 1117, column: 9, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3038, file: !3, line: 1117, column: 9)
!3051 = !DILocation(line: 1117, column: 13, scope: !3050)
!3052 = !DILocation(line: 1117, column: 9, scope: !3038)
!3053 = !DILocation(line: 1118, column: 9, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 1117, column: 22)
!3055 = !DILocation(line: 1118, column: 15, scope: !3054)
!3056 = !DILocation(line: 1119, column: 9, scope: !3054)
!3057 = !DILocation(line: 1122, column: 9, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3038, file: !3, line: 1122, column: 9)
!3059 = !DILocation(line: 1122, column: 12, scope: !3058)
!3060 = !DILocation(line: 1122, column: 9, scope: !3038)
!3061 = !DILocation(line: 1123, column: 13, scope: !3062)
!3062 = distinct !DILexicalBlock(scope: !3063, file: !3, line: 1123, column: 13)
!3063 = distinct !DILexicalBlock(scope: !3058, file: !3, line: 1122, column: 36)
!3064 = !DILocation(line: 1123, column: 18, scope: !3062)
!3065 = !DILocation(line: 1123, column: 13, scope: !3063)
!3066 = !DILocation(line: 1124, column: 21, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3062, file: !3, line: 1123, column: 25)
!3068 = !DILocation(line: 1126, column: 21, scope: !3067)
!3069 = !DILocation(line: 1124, column: 13, scope: !3067)
!3070 = !DILocation(line: 1127, column: 9, scope: !3067)
!3071 = !DILocation(line: 1128, column: 9, scope: !3063)
!3072 = !DILocation(line: 1128, column: 15, scope: !3063)
!3073 = !DILocation(line: 1129, column: 9, scope: !3063)
!3074 = !DILocation(line: 1132, column: 25, scope: !3038)
!3075 = !DILocation(line: 1132, column: 62, scope: !3038)
!3076 = !DILocation(line: 1132, column: 68, scope: !3038)
!3077 = !DILocation(line: 1132, column: 72, scope: !3038)
!3078 = !DILocation(line: 1132, column: 10, scope: !3038)
!3079 = !DILocation(line: 1132, column: 8, scope: !3038)
!3080 = !DILocation(line: 1134, column: 9, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3038, file: !3, line: 1134, column: 9)
!3082 = !DILocation(line: 1134, column: 12, scope: !3081)
!3083 = !DILocation(line: 1134, column: 9, scope: !3038)
!3084 = !DILocation(line: 1135, column: 9, scope: !3081)
!3085 = !DILocation(line: 1137, column: 16, scope: !3081)
!3086 = !DILocation(line: 1137, column: 9, scope: !3081)
!3087 = !DILocation(line: 1138, column: 1, scope: !3038)
!3088 = distinct !DISubprogram(name: "modbus_read_registers", scope: !3, file: !3, line: 1188, type: !3089, isLocal: false, isDefinition: true, scopeLine: 1189, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3089 = !DISubroutineType(types: !3090)
!3090 = !{!44, !478, !44, !44, !64}
!3091 = !DILocalVariable(name: "ctx", arg: 1, scope: !3088, file: !3, line: 1188, type: !478)
!3092 = !DILocation(line: 1188, column: 37, scope: !3088)
!3093 = !DILocalVariable(name: "addr", arg: 2, scope: !3088, file: !3, line: 1188, type: !44)
!3094 = !DILocation(line: 1188, column: 46, scope: !3088)
!3095 = !DILocalVariable(name: "nb", arg: 3, scope: !3088, file: !3, line: 1188, type: !44)
!3096 = !DILocation(line: 1188, column: 56, scope: !3088)
!3097 = !DILocalVariable(name: "dest", arg: 4, scope: !3088, file: !3, line: 1188, type: !64)
!3098 = !DILocation(line: 1188, column: 70, scope: !3088)
!3099 = !DILocalVariable(name: "status", scope: !3088, file: !3, line: 1190, type: !44)
!3100 = !DILocation(line: 1190, column: 9, scope: !3088)
!3101 = !DILocation(line: 1192, column: 9, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3088, file: !3, line: 1192, column: 9)
!3103 = !DILocation(line: 1192, column: 13, scope: !3102)
!3104 = !DILocation(line: 1192, column: 9, scope: !3088)
!3105 = !DILocation(line: 1193, column: 9, scope: !3106)
!3106 = distinct !DILexicalBlock(scope: !3102, file: !3, line: 1192, column: 22)
!3107 = !DILocation(line: 1193, column: 15, scope: !3106)
!3108 = !DILocation(line: 1194, column: 9, scope: !3106)
!3109 = !DILocation(line: 1197, column: 9, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3088, file: !3, line: 1197, column: 9)
!3111 = !DILocation(line: 1197, column: 12, scope: !3110)
!3112 = !DILocation(line: 1197, column: 9, scope: !3088)
!3113 = !DILocation(line: 1198, column: 13, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1198, column: 13)
!3115 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 1197, column: 41)
!3116 = !DILocation(line: 1198, column: 18, scope: !3114)
!3117 = !DILocation(line: 1198, column: 13, scope: !3115)
!3118 = !DILocation(line: 1199, column: 21, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 1198, column: 25)
!3120 = !DILocation(line: 1201, column: 21, scope: !3119)
!3121 = !DILocation(line: 1199, column: 13, scope: !3119)
!3122 = !DILocation(line: 1202, column: 9, scope: !3119)
!3123 = !DILocation(line: 1203, column: 9, scope: !3115)
!3124 = !DILocation(line: 1203, column: 15, scope: !3115)
!3125 = !DILocation(line: 1204, column: 9, scope: !3115)
!3126 = !DILocation(line: 1207, column: 29, scope: !3088)
!3127 = !DILocation(line: 1208, column: 29, scope: !3088)
!3128 = !DILocation(line: 1208, column: 35, scope: !3088)
!3129 = !DILocation(line: 1208, column: 39, scope: !3088)
!3130 = !DILocation(line: 1207, column: 14, scope: !3088)
!3131 = !DILocation(line: 1207, column: 12, scope: !3088)
!3132 = !DILocation(line: 1209, column: 12, scope: !3088)
!3133 = !DILocation(line: 1209, column: 5, scope: !3088)
!3134 = !DILocation(line: 1210, column: 1, scope: !3088)
!3135 = distinct !DISubprogram(name: "read_registers", scope: !3, file: !3, line: 1141, type: !3136, isLocal: true, isDefinition: true, scopeLine: 1143, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3136 = !DISubroutineType(types: !3137)
!3137 = !{!44, !478, !44, !44, !44, !64}
!3138 = !DILocalVariable(name: "ctx", arg: 1, scope: !3135, file: !3, line: 1141, type: !478)
!3139 = !DILocation(line: 1141, column: 37, scope: !3135)
!3140 = !DILocalVariable(name: "function", arg: 2, scope: !3135, file: !3, line: 1141, type: !44)
!3141 = !DILocation(line: 1141, column: 46, scope: !3135)
!3142 = !DILocalVariable(name: "addr", arg: 3, scope: !3135, file: !3, line: 1141, type: !44)
!3143 = !DILocation(line: 1141, column: 60, scope: !3135)
!3144 = !DILocalVariable(name: "nb", arg: 4, scope: !3135, file: !3, line: 1141, type: !44)
!3145 = !DILocation(line: 1141, column: 70, scope: !3135)
!3146 = !DILocalVariable(name: "dest", arg: 5, scope: !3135, file: !3, line: 1142, type: !64)
!3147 = !DILocation(line: 1142, column: 37, scope: !3135)
!3148 = !DILocalVariable(name: "rc", scope: !3135, file: !3, line: 1144, type: !44)
!3149 = !DILocation(line: 1144, column: 9, scope: !3135)
!3150 = !DILocalVariable(name: "req_length", scope: !3135, file: !3, line: 1145, type: !44)
!3151 = !DILocation(line: 1145, column: 9, scope: !3135)
!3152 = !DILocalVariable(name: "req", scope: !3135, file: !3, line: 1146, type: !2571)
!3153 = !DILocation(line: 1146, column: 13, scope: !3135)
!3154 = !DILocalVariable(name: "rsp", scope: !3135, file: !3, line: 1147, type: !636)
!3155 = !DILocation(line: 1147, column: 13, scope: !3135)
!3156 = !DILocation(line: 1149, column: 9, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3135, file: !3, line: 1149, column: 9)
!3158 = !DILocation(line: 1149, column: 12, scope: !3157)
!3159 = !DILocation(line: 1149, column: 9, scope: !3135)
!3160 = !DILocation(line: 1150, column: 13, scope: !3161)
!3161 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 1150, column: 13)
!3162 = distinct !DILexicalBlock(scope: !3157, file: !3, line: 1149, column: 41)
!3163 = !DILocation(line: 1150, column: 18, scope: !3161)
!3164 = !DILocation(line: 1150, column: 13, scope: !3162)
!3165 = !DILocation(line: 1151, column: 21, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3161, file: !3, line: 1150, column: 25)
!3167 = !DILocation(line: 1153, column: 21, scope: !3166)
!3168 = !DILocation(line: 1151, column: 13, scope: !3166)
!3169 = !DILocation(line: 1154, column: 9, scope: !3166)
!3170 = !DILocation(line: 1155, column: 9, scope: !3162)
!3171 = !DILocation(line: 1155, column: 15, scope: !3162)
!3172 = !DILocation(line: 1156, column: 9, scope: !3162)
!3173 = !DILocation(line: 1159, column: 18, scope: !3135)
!3174 = !DILocation(line: 1159, column: 23, scope: !3135)
!3175 = !DILocation(line: 1159, column: 32, scope: !3135)
!3176 = !DILocation(line: 1159, column: 52, scope: !3135)
!3177 = !DILocation(line: 1159, column: 57, scope: !3135)
!3178 = !DILocation(line: 1159, column: 67, scope: !3135)
!3179 = !DILocation(line: 1159, column: 73, scope: !3135)
!3180 = !DILocation(line: 1159, column: 77, scope: !3135)
!3181 = !DILocation(line: 1159, column: 16, scope: !3135)
!3182 = !DILocation(line: 1161, column: 19, scope: !3135)
!3183 = !DILocation(line: 1161, column: 24, scope: !3135)
!3184 = !DILocation(line: 1161, column: 29, scope: !3135)
!3185 = !DILocation(line: 1161, column: 10, scope: !3135)
!3186 = !DILocation(line: 1161, column: 8, scope: !3135)
!3187 = !DILocation(line: 1162, column: 9, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3135, file: !3, line: 1162, column: 9)
!3189 = !DILocation(line: 1162, column: 12, scope: !3188)
!3190 = !DILocation(line: 1162, column: 9, scope: !3135)
!3191 = !DILocalVariable(name: "offset", scope: !3192, file: !3, line: 1163, type: !44)
!3192 = distinct !DILexicalBlock(scope: !3188, file: !3, line: 1162, column: 17)
!3193 = !DILocation(line: 1163, column: 13, scope: !3192)
!3194 = !DILocalVariable(name: "i", scope: !3192, file: !3, line: 1164, type: !44)
!3195 = !DILocation(line: 1164, column: 13, scope: !3192)
!3196 = !DILocation(line: 1166, column: 34, scope: !3192)
!3197 = !DILocation(line: 1166, column: 39, scope: !3192)
!3198 = !DILocation(line: 1166, column: 14, scope: !3192)
!3199 = !DILocation(line: 1166, column: 12, scope: !3192)
!3200 = !DILocation(line: 1167, column: 13, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1167, column: 13)
!3202 = !DILocation(line: 1167, column: 16, scope: !3201)
!3203 = !DILocation(line: 1167, column: 13, scope: !3192)
!3204 = !DILocation(line: 1168, column: 13, scope: !3201)
!3205 = !DILocation(line: 1170, column: 33, scope: !3192)
!3206 = !DILocation(line: 1170, column: 38, scope: !3192)
!3207 = !DILocation(line: 1170, column: 43, scope: !3192)
!3208 = !DILocation(line: 1170, column: 48, scope: !3192)
!3209 = !DILocation(line: 1170, column: 14, scope: !3192)
!3210 = !DILocation(line: 1170, column: 12, scope: !3192)
!3211 = !DILocation(line: 1171, column: 13, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1171, column: 13)
!3213 = !DILocation(line: 1171, column: 16, scope: !3212)
!3214 = !DILocation(line: 1171, column: 13, scope: !3192)
!3215 = !DILocation(line: 1172, column: 13, scope: !3212)
!3216 = !DILocation(line: 1174, column: 18, scope: !3192)
!3217 = !DILocation(line: 1174, column: 23, scope: !3192)
!3218 = !DILocation(line: 1174, column: 32, scope: !3192)
!3219 = !DILocation(line: 1174, column: 16, scope: !3192)
!3220 = !DILocation(line: 1176, column: 16, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1176, column: 9)
!3222 = !DILocation(line: 1176, column: 14, scope: !3221)
!3223 = !DILocation(line: 1176, column: 21, scope: !3224)
!3224 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 1176, column: 9)
!3225 = !DILocation(line: 1176, column: 25, scope: !3224)
!3226 = !DILocation(line: 1176, column: 23, scope: !3224)
!3227 = !DILocation(line: 1176, column: 9, scope: !3221)
!3228 = !DILocation(line: 1178, column: 28, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3224, file: !3, line: 1176, column: 34)
!3230 = !DILocation(line: 1178, column: 35, scope: !3229)
!3231 = !DILocation(line: 1178, column: 42, scope: !3229)
!3232 = !DILocation(line: 1178, column: 44, scope: !3229)
!3233 = !DILocation(line: 1178, column: 39, scope: !3229)
!3234 = !DILocation(line: 1178, column: 24, scope: !3229)
!3235 = !DILocation(line: 1178, column: 51, scope: !3229)
!3236 = !DILocation(line: 1179, column: 21, scope: !3229)
!3237 = !DILocation(line: 1179, column: 28, scope: !3229)
!3238 = !DILocation(line: 1179, column: 35, scope: !3229)
!3239 = !DILocation(line: 1179, column: 37, scope: !3229)
!3240 = !DILocation(line: 1179, column: 32, scope: !3229)
!3241 = !DILocation(line: 1179, column: 17, scope: !3229)
!3242 = !DILocation(line: 1178, column: 57, scope: !3229)
!3243 = !DILocation(line: 1178, column: 23, scope: !3229)
!3244 = !DILocation(line: 1178, column: 13, scope: !3229)
!3245 = !DILocation(line: 1178, column: 18, scope: !3229)
!3246 = !DILocation(line: 1178, column: 21, scope: !3229)
!3247 = !DILocation(line: 1180, column: 9, scope: !3229)
!3248 = !DILocation(line: 1176, column: 30, scope: !3224)
!3249 = !DILocation(line: 1176, column: 9, scope: !3224)
!3250 = distinct !{!3250, !3227, !3251}
!3251 = !DILocation(line: 1180, column: 9, scope: !3221)
!3252 = !DILocation(line: 1181, column: 5, scope: !3192)
!3253 = !DILocation(line: 1183, column: 12, scope: !3135)
!3254 = !DILocation(line: 1183, column: 5, scope: !3135)
!3255 = !DILocation(line: 1184, column: 1, scope: !3135)
!3256 = distinct !DISubprogram(name: "modbus_read_input_registers", scope: !3, file: !3, line: 1213, type: !3089, isLocal: false, isDefinition: true, scopeLine: 1215, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3257 = !DILocalVariable(name: "ctx", arg: 1, scope: !3256, file: !3, line: 1213, type: !478)
!3258 = !DILocation(line: 1213, column: 43, scope: !3256)
!3259 = !DILocalVariable(name: "addr", arg: 2, scope: !3256, file: !3, line: 1213, type: !44)
!3260 = !DILocation(line: 1213, column: 52, scope: !3256)
!3261 = !DILocalVariable(name: "nb", arg: 3, scope: !3256, file: !3, line: 1213, type: !44)
!3262 = !DILocation(line: 1213, column: 62, scope: !3256)
!3263 = !DILocalVariable(name: "dest", arg: 4, scope: !3256, file: !3, line: 1214, type: !64)
!3264 = !DILocation(line: 1214, column: 43, scope: !3256)
!3265 = !DILocalVariable(name: "status", scope: !3256, file: !3, line: 1216, type: !44)
!3266 = !DILocation(line: 1216, column: 9, scope: !3256)
!3267 = !DILocation(line: 1218, column: 9, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 1218, column: 9)
!3269 = !DILocation(line: 1218, column: 13, scope: !3268)
!3270 = !DILocation(line: 1218, column: 9, scope: !3256)
!3271 = !DILocation(line: 1219, column: 9, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3268, file: !3, line: 1218, column: 22)
!3273 = !DILocation(line: 1219, column: 15, scope: !3272)
!3274 = !DILocation(line: 1220, column: 9, scope: !3272)
!3275 = !DILocation(line: 1223, column: 9, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 1223, column: 9)
!3277 = !DILocation(line: 1223, column: 12, scope: !3276)
!3278 = !DILocation(line: 1223, column: 9, scope: !3256)
!3279 = !DILocation(line: 1224, column: 17, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 1223, column: 41)
!3281 = !DILocation(line: 1226, column: 17, scope: !3280)
!3282 = !DILocation(line: 1224, column: 9, scope: !3280)
!3283 = !DILocation(line: 1227, column: 9, scope: !3280)
!3284 = !DILocation(line: 1227, column: 15, scope: !3280)
!3285 = !DILocation(line: 1228, column: 9, scope: !3280)
!3286 = !DILocation(line: 1231, column: 29, scope: !3256)
!3287 = !DILocation(line: 1232, column: 29, scope: !3256)
!3288 = !DILocation(line: 1232, column: 35, scope: !3256)
!3289 = !DILocation(line: 1232, column: 39, scope: !3256)
!3290 = !DILocation(line: 1231, column: 14, scope: !3256)
!3291 = !DILocation(line: 1231, column: 12, scope: !3256)
!3292 = !DILocation(line: 1234, column: 12, scope: !3256)
!3293 = !DILocation(line: 1234, column: 5, scope: !3256)
!3294 = !DILocation(line: 1235, column: 1, scope: !3256)
!3295 = distinct !DISubprogram(name: "modbus_write_bit", scope: !3, file: !3, line: 1268, type: !3296, isLocal: false, isDefinition: true, scopeLine: 1269, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3296 = !DISubroutineType(types: !3297)
!3297 = !{!44, !478, !44, !44}
!3298 = !DILocalVariable(name: "ctx", arg: 1, scope: !3295, file: !3, line: 1268, type: !478)
!3299 = !DILocation(line: 1268, column: 32, scope: !3295)
!3300 = !DILocalVariable(name: "addr", arg: 2, scope: !3295, file: !3, line: 1268, type: !44)
!3301 = !DILocation(line: 1268, column: 41, scope: !3295)
!3302 = !DILocalVariable(name: "status", arg: 3, scope: !3295, file: !3, line: 1268, type: !44)
!3303 = !DILocation(line: 1268, column: 51, scope: !3295)
!3304 = !DILocation(line: 1270, column: 9, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3295, file: !3, line: 1270, column: 9)
!3306 = !DILocation(line: 1270, column: 13, scope: !3305)
!3307 = !DILocation(line: 1270, column: 9, scope: !3295)
!3308 = !DILocation(line: 1271, column: 9, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 1270, column: 22)
!3310 = !DILocation(line: 1271, column: 15, scope: !3309)
!3311 = !DILocation(line: 1272, column: 9, scope: !3309)
!3312 = !DILocation(line: 1275, column: 25, scope: !3295)
!3313 = !DILocation(line: 1275, column: 59, scope: !3295)
!3314 = !DILocation(line: 1276, column: 25, scope: !3295)
!3315 = !DILocation(line: 1275, column: 12, scope: !3295)
!3316 = !DILocation(line: 1275, column: 5, scope: !3295)
!3317 = !DILocation(line: 1277, column: 1, scope: !3295)
!3318 = distinct !DISubprogram(name: "write_single", scope: !3, file: !3, line: 1239, type: !3319, isLocal: true, isDefinition: true, scopeLine: 1240, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3319 = !DISubroutineType(types: !3320)
!3320 = !{!44, !478, !44, !44, !44}
!3321 = !DILocalVariable(name: "ctx", arg: 1, scope: !3318, file: !3, line: 1239, type: !478)
!3322 = !DILocation(line: 1239, column: 35, scope: !3318)
!3323 = !DILocalVariable(name: "function", arg: 2, scope: !3318, file: !3, line: 1239, type: !44)
!3324 = !DILocation(line: 1239, column: 44, scope: !3318)
!3325 = !DILocalVariable(name: "addr", arg: 3, scope: !3318, file: !3, line: 1239, type: !44)
!3326 = !DILocation(line: 1239, column: 58, scope: !3318)
!3327 = !DILocalVariable(name: "value", arg: 4, scope: !3318, file: !3, line: 1239, type: !44)
!3328 = !DILocation(line: 1239, column: 68, scope: !3318)
!3329 = !DILocalVariable(name: "rc", scope: !3318, file: !3, line: 1241, type: !44)
!3330 = !DILocation(line: 1241, column: 9, scope: !3318)
!3331 = !DILocalVariable(name: "req_length", scope: !3318, file: !3, line: 1242, type: !44)
!3332 = !DILocation(line: 1242, column: 9, scope: !3318)
!3333 = !DILocalVariable(name: "req", scope: !3318, file: !3, line: 1243, type: !2571)
!3334 = !DILocation(line: 1243, column: 13, scope: !3318)
!3335 = !DILocation(line: 1245, column: 9, scope: !3336)
!3336 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 1245, column: 9)
!3337 = !DILocation(line: 1245, column: 13, scope: !3336)
!3338 = !DILocation(line: 1245, column: 9, scope: !3318)
!3339 = !DILocation(line: 1246, column: 9, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 1245, column: 22)
!3341 = !DILocation(line: 1246, column: 15, scope: !3340)
!3342 = !DILocation(line: 1247, column: 9, scope: !3340)
!3343 = !DILocation(line: 1250, column: 18, scope: !3318)
!3344 = !DILocation(line: 1250, column: 23, scope: !3318)
!3345 = !DILocation(line: 1250, column: 32, scope: !3318)
!3346 = !DILocation(line: 1250, column: 52, scope: !3318)
!3347 = !DILocation(line: 1250, column: 57, scope: !3318)
!3348 = !DILocation(line: 1250, column: 67, scope: !3318)
!3349 = !DILocation(line: 1250, column: 73, scope: !3318)
!3350 = !DILocation(line: 1250, column: 80, scope: !3318)
!3351 = !DILocation(line: 1250, column: 16, scope: !3318)
!3352 = !DILocation(line: 1252, column: 19, scope: !3318)
!3353 = !DILocation(line: 1252, column: 24, scope: !3318)
!3354 = !DILocation(line: 1252, column: 29, scope: !3318)
!3355 = !DILocation(line: 1252, column: 10, scope: !3318)
!3356 = !DILocation(line: 1252, column: 8, scope: !3318)
!3357 = !DILocation(line: 1253, column: 9, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 1253, column: 9)
!3359 = !DILocation(line: 1253, column: 12, scope: !3358)
!3360 = !DILocation(line: 1253, column: 9, scope: !3318)
!3361 = !DILocalVariable(name: "rsp", scope: !3362, file: !3, line: 1255, type: !636)
!3362 = distinct !DILexicalBlock(scope: !3358, file: !3, line: 1253, column: 17)
!3363 = !DILocation(line: 1255, column: 17, scope: !3362)
!3364 = !DILocation(line: 1257, column: 34, scope: !3362)
!3365 = !DILocation(line: 1257, column: 39, scope: !3362)
!3366 = !DILocation(line: 1257, column: 14, scope: !3362)
!3367 = !DILocation(line: 1257, column: 12, scope: !3362)
!3368 = !DILocation(line: 1258, column: 13, scope: !3369)
!3369 = distinct !DILexicalBlock(scope: !3362, file: !3, line: 1258, column: 13)
!3370 = !DILocation(line: 1258, column: 16, scope: !3369)
!3371 = !DILocation(line: 1258, column: 13, scope: !3362)
!3372 = !DILocation(line: 1259, column: 13, scope: !3369)
!3373 = !DILocation(line: 1261, column: 33, scope: !3362)
!3374 = !DILocation(line: 1261, column: 38, scope: !3362)
!3375 = !DILocation(line: 1261, column: 43, scope: !3362)
!3376 = !DILocation(line: 1261, column: 48, scope: !3362)
!3377 = !DILocation(line: 1261, column: 14, scope: !3362)
!3378 = !DILocation(line: 1261, column: 12, scope: !3362)
!3379 = !DILocation(line: 1262, column: 5, scope: !3362)
!3380 = !DILocation(line: 1264, column: 12, scope: !3318)
!3381 = !DILocation(line: 1264, column: 5, scope: !3318)
!3382 = !DILocation(line: 1265, column: 1, scope: !3318)
!3383 = distinct !DISubprogram(name: "modbus_write_register", scope: !3, file: !3, line: 1280, type: !3296, isLocal: false, isDefinition: true, scopeLine: 1281, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3384 = !DILocalVariable(name: "ctx", arg: 1, scope: !3383, file: !3, line: 1280, type: !478)
!3385 = !DILocation(line: 1280, column: 37, scope: !3383)
!3386 = !DILocalVariable(name: "addr", arg: 2, scope: !3383, file: !3, line: 1280, type: !44)
!3387 = !DILocation(line: 1280, column: 46, scope: !3383)
!3388 = !DILocalVariable(name: "value", arg: 3, scope: !3383, file: !3, line: 1280, type: !44)
!3389 = !DILocation(line: 1280, column: 56, scope: !3383)
!3390 = !DILocation(line: 1282, column: 9, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 1282, column: 9)
!3392 = !DILocation(line: 1282, column: 13, scope: !3391)
!3393 = !DILocation(line: 1282, column: 9, scope: !3383)
!3394 = !DILocation(line: 1283, column: 9, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3391, file: !3, line: 1282, column: 22)
!3396 = !DILocation(line: 1283, column: 15, scope: !3395)
!3397 = !DILocation(line: 1284, column: 9, scope: !3395)
!3398 = !DILocation(line: 1287, column: 25, scope: !3383)
!3399 = !DILocation(line: 1287, column: 63, scope: !3383)
!3400 = !DILocation(line: 1287, column: 69, scope: !3383)
!3401 = !DILocation(line: 1287, column: 12, scope: !3383)
!3402 = !DILocation(line: 1287, column: 5, scope: !3383)
!3403 = !DILocation(line: 1288, column: 1, scope: !3383)
!3404 = distinct !DISubprogram(name: "modbus_write_bits", scope: !3, file: !3, line: 1291, type: !3405, isLocal: false, isDefinition: true, scopeLine: 1292, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3405 = !DISubroutineType(types: !3406)
!3406 = !{!44, !478, !44, !44, !171}
!3407 = !DILocalVariable(name: "ctx", arg: 1, scope: !3404, file: !3, line: 1291, type: !478)
!3408 = !DILocation(line: 1291, column: 33, scope: !3404)
!3409 = !DILocalVariable(name: "addr", arg: 2, scope: !3404, file: !3, line: 1291, type: !44)
!3410 = !DILocation(line: 1291, column: 42, scope: !3404)
!3411 = !DILocalVariable(name: "nb", arg: 3, scope: !3404, file: !3, line: 1291, type: !44)
!3412 = !DILocation(line: 1291, column: 52, scope: !3404)
!3413 = !DILocalVariable(name: "src", arg: 4, scope: !3404, file: !3, line: 1291, type: !171)
!3414 = !DILocation(line: 1291, column: 71, scope: !3404)
!3415 = !DILocalVariable(name: "rc", scope: !3404, file: !3, line: 1293, type: !44)
!3416 = !DILocation(line: 1293, column: 9, scope: !3404)
!3417 = !DILocalVariable(name: "i", scope: !3404, file: !3, line: 1294, type: !44)
!3418 = !DILocation(line: 1294, column: 9, scope: !3404)
!3419 = !DILocalVariable(name: "byte_count", scope: !3404, file: !3, line: 1295, type: !44)
!3420 = !DILocation(line: 1295, column: 9, scope: !3404)
!3421 = !DILocalVariable(name: "req_length", scope: !3404, file: !3, line: 1296, type: !44)
!3422 = !DILocation(line: 1296, column: 9, scope: !3404)
!3423 = !DILocalVariable(name: "bit_check", scope: !3404, file: !3, line: 1297, type: !44)
!3424 = !DILocation(line: 1297, column: 9, scope: !3404)
!3425 = !DILocalVariable(name: "pos", scope: !3404, file: !3, line: 1298, type: !44)
!3426 = !DILocation(line: 1298, column: 9, scope: !3404)
!3427 = !DILocalVariable(name: "req", scope: !3404, file: !3, line: 1299, type: !636)
!3428 = !DILocation(line: 1299, column: 13, scope: !3404)
!3429 = !DILocation(line: 1301, column: 9, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 1301, column: 9)
!3431 = !DILocation(line: 1301, column: 13, scope: !3430)
!3432 = !DILocation(line: 1301, column: 9, scope: !3404)
!3433 = !DILocation(line: 1302, column: 9, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3430, file: !3, line: 1301, column: 22)
!3435 = !DILocation(line: 1302, column: 15, scope: !3434)
!3436 = !DILocation(line: 1303, column: 9, scope: !3434)
!3437 = !DILocation(line: 1306, column: 9, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 1306, column: 9)
!3439 = !DILocation(line: 1306, column: 12, scope: !3438)
!3440 = !DILocation(line: 1306, column: 9, scope: !3404)
!3441 = !DILocation(line: 1307, column: 13, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3443, file: !3, line: 1307, column: 13)
!3443 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 1306, column: 37)
!3444 = !DILocation(line: 1307, column: 18, scope: !3442)
!3445 = !DILocation(line: 1307, column: 13, scope: !3443)
!3446 = !DILocation(line: 1308, column: 21, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3442, file: !3, line: 1307, column: 25)
!3448 = !DILocation(line: 1309, column: 21, scope: !3447)
!3449 = !DILocation(line: 1308, column: 13, scope: !3447)
!3450 = !DILocation(line: 1310, column: 9, scope: !3447)
!3451 = !DILocation(line: 1311, column: 9, scope: !3443)
!3452 = !DILocation(line: 1311, column: 15, scope: !3443)
!3453 = !DILocation(line: 1312, column: 9, scope: !3443)
!3454 = !DILocation(line: 1315, column: 18, scope: !3404)
!3455 = !DILocation(line: 1315, column: 23, scope: !3404)
!3456 = !DILocation(line: 1315, column: 32, scope: !3404)
!3457 = !DILocation(line: 1315, column: 52, scope: !3404)
!3458 = !DILocation(line: 1317, column: 52, scope: !3404)
!3459 = !DILocation(line: 1317, column: 58, scope: !3404)
!3460 = !DILocation(line: 1317, column: 62, scope: !3404)
!3461 = !DILocation(line: 1315, column: 16, scope: !3404)
!3462 = !DILocation(line: 1318, column: 19, scope: !3404)
!3463 = !DILocation(line: 1318, column: 22, scope: !3404)
!3464 = !DILocation(line: 1318, column: 31, scope: !3404)
!3465 = !DILocation(line: 1318, column: 34, scope: !3404)
!3466 = !DILocation(line: 1318, column: 30, scope: !3404)
!3467 = !DILocation(line: 1318, column: 27, scope: !3404)
!3468 = !DILocation(line: 1318, column: 16, scope: !3404)
!3469 = !DILocation(line: 1319, column: 25, scope: !3404)
!3470 = !DILocation(line: 1319, column: 19, scope: !3404)
!3471 = !DILocation(line: 1319, column: 5, scope: !3404)
!3472 = !DILocation(line: 1319, column: 23, scope: !3404)
!3473 = !DILocation(line: 1321, column: 12, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 1321, column: 5)
!3475 = !DILocation(line: 1321, column: 10, scope: !3474)
!3476 = !DILocation(line: 1321, column: 17, scope: !3477)
!3477 = distinct !DILexicalBlock(scope: !3474, file: !3, line: 1321, column: 5)
!3478 = !DILocation(line: 1321, column: 21, scope: !3477)
!3479 = !DILocation(line: 1321, column: 19, scope: !3477)
!3480 = !DILocation(line: 1321, column: 5, scope: !3474)
!3481 = !DILocalVariable(name: "bit", scope: !3482, file: !3, line: 1322, type: !44)
!3482 = distinct !DILexicalBlock(scope: !3477, file: !3, line: 1321, column: 38)
!3483 = !DILocation(line: 1322, column: 13, scope: !3482)
!3484 = !DILocation(line: 1324, column: 13, scope: !3482)
!3485 = !DILocation(line: 1325, column: 13, scope: !3482)
!3486 = !DILocation(line: 1325, column: 9, scope: !3482)
!3487 = !DILocation(line: 1325, column: 25, scope: !3482)
!3488 = !DILocation(line: 1327, column: 9, scope: !3482)
!3489 = !DILocation(line: 1327, column: 17, scope: !3482)
!3490 = !DILocation(line: 1327, column: 21, scope: !3482)
!3491 = !DILocation(line: 1327, column: 29, scope: !3482)
!3492 = !DILocation(line: 1327, column: 42, scope: !3482)
!3493 = !DILocation(line: 1327, column: 47, scope: !3482)
!3494 = !DILocation(line: 1327, column: 45, scope: !3482)
!3495 = !DILocation(line: 1328, column: 17, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1328, column: 17)
!3497 = distinct !DILexicalBlock(scope: !3482, file: !3, line: 1327, column: 52)
!3498 = !DILocation(line: 1328, column: 24, scope: !3496)
!3499 = !DILocation(line: 1328, column: 17, scope: !3497)
!3500 = !DILocation(line: 1329, column: 36, scope: !3496)
!3501 = !DILocation(line: 1329, column: 21, scope: !3496)
!3502 = !DILocation(line: 1329, column: 17, scope: !3496)
!3503 = !DILocation(line: 1329, column: 33, scope: !3496)
!3504 = !DILocation(line: 1331, column: 37, scope: !3496)
!3505 = !DILocation(line: 1331, column: 35, scope: !3496)
!3506 = !DILocation(line: 1331, column: 21, scope: !3496)
!3507 = !DILocation(line: 1331, column: 17, scope: !3496)
!3508 = !DILocation(line: 1331, column: 33, scope: !3496)
!3509 = !DILocation(line: 1333, column: 19, scope: !3497)
!3510 = !DILocation(line: 1333, column: 23, scope: !3497)
!3511 = !DILocation(line: 1333, column: 17, scope: !3497)
!3512 = distinct !{!3512, !3488, !3513}
!3513 = !DILocation(line: 1334, column: 9, scope: !3482)
!3514 = !DILocation(line: 1335, column: 19, scope: !3482)
!3515 = !DILocation(line: 1336, column: 5, scope: !3482)
!3516 = !DILocation(line: 1321, column: 34, scope: !3477)
!3517 = !DILocation(line: 1321, column: 5, scope: !3477)
!3518 = distinct !{!3518, !3480, !3519}
!3519 = !DILocation(line: 1336, column: 5, scope: !3474)
!3520 = !DILocation(line: 1338, column: 19, scope: !3404)
!3521 = !DILocation(line: 1338, column: 24, scope: !3404)
!3522 = !DILocation(line: 1338, column: 29, scope: !3404)
!3523 = !DILocation(line: 1338, column: 10, scope: !3404)
!3524 = !DILocation(line: 1338, column: 8, scope: !3404)
!3525 = !DILocation(line: 1339, column: 9, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 1339, column: 9)
!3527 = !DILocation(line: 1339, column: 12, scope: !3526)
!3528 = !DILocation(line: 1339, column: 9, scope: !3404)
!3529 = !DILocalVariable(name: "rsp", scope: !3530, file: !3, line: 1340, type: !636)
!3530 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 1339, column: 17)
!3531 = !DILocation(line: 1340, column: 17, scope: !3530)
!3532 = !DILocation(line: 1342, column: 34, scope: !3530)
!3533 = !DILocation(line: 1342, column: 39, scope: !3530)
!3534 = !DILocation(line: 1342, column: 14, scope: !3530)
!3535 = !DILocation(line: 1342, column: 12, scope: !3530)
!3536 = !DILocation(line: 1343, column: 13, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 1343, column: 13)
!3538 = !DILocation(line: 1343, column: 16, scope: !3537)
!3539 = !DILocation(line: 1343, column: 13, scope: !3530)
!3540 = !DILocation(line: 1344, column: 13, scope: !3537)
!3541 = !DILocation(line: 1346, column: 33, scope: !3530)
!3542 = !DILocation(line: 1346, column: 38, scope: !3530)
!3543 = !DILocation(line: 1346, column: 43, scope: !3530)
!3544 = !DILocation(line: 1346, column: 48, scope: !3530)
!3545 = !DILocation(line: 1346, column: 14, scope: !3530)
!3546 = !DILocation(line: 1346, column: 12, scope: !3530)
!3547 = !DILocation(line: 1347, column: 5, scope: !3530)
!3548 = !DILocation(line: 1350, column: 12, scope: !3404)
!3549 = !DILocation(line: 1350, column: 5, scope: !3404)
!3550 = !DILocation(line: 1351, column: 1, scope: !3404)
!3551 = distinct !DISubprogram(name: "modbus_write_registers", scope: !3, file: !3, line: 1354, type: !3552, isLocal: false, isDefinition: true, scopeLine: 1355, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3552 = !DISubroutineType(types: !3553)
!3553 = !{!44, !478, !44, !44, !3554}
!3554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3555, size: 64)
!3555 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!3556 = !DILocalVariable(name: "ctx", arg: 1, scope: !3551, file: !3, line: 1354, type: !478)
!3557 = !DILocation(line: 1354, column: 38, scope: !3551)
!3558 = !DILocalVariable(name: "addr", arg: 2, scope: !3551, file: !3, line: 1354, type: !44)
!3559 = !DILocation(line: 1354, column: 47, scope: !3551)
!3560 = !DILocalVariable(name: "nb", arg: 3, scope: !3551, file: !3, line: 1354, type: !44)
!3561 = !DILocation(line: 1354, column: 57, scope: !3551)
!3562 = !DILocalVariable(name: "src", arg: 4, scope: !3551, file: !3, line: 1354, type: !3554)
!3563 = !DILocation(line: 1354, column: 77, scope: !3551)
!3564 = !DILocalVariable(name: "rc", scope: !3551, file: !3, line: 1356, type: !44)
!3565 = !DILocation(line: 1356, column: 9, scope: !3551)
!3566 = !DILocalVariable(name: "i", scope: !3551, file: !3, line: 1357, type: !44)
!3567 = !DILocation(line: 1357, column: 9, scope: !3551)
!3568 = !DILocalVariable(name: "req_length", scope: !3551, file: !3, line: 1358, type: !44)
!3569 = !DILocation(line: 1358, column: 9, scope: !3551)
!3570 = !DILocalVariable(name: "byte_count", scope: !3551, file: !3, line: 1359, type: !44)
!3571 = !DILocation(line: 1359, column: 9, scope: !3551)
!3572 = !DILocalVariable(name: "req", scope: !3551, file: !3, line: 1360, type: !636)
!3573 = !DILocation(line: 1360, column: 13, scope: !3551)
!3574 = !DILocation(line: 1362, column: 9, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1362, column: 9)
!3576 = !DILocation(line: 1362, column: 13, scope: !3575)
!3577 = !DILocation(line: 1362, column: 9, scope: !3551)
!3578 = !DILocation(line: 1363, column: 9, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 1362, column: 22)
!3580 = !DILocation(line: 1363, column: 15, scope: !3579)
!3581 = !DILocation(line: 1364, column: 9, scope: !3579)
!3582 = !DILocation(line: 1367, column: 9, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1367, column: 9)
!3584 = !DILocation(line: 1367, column: 12, scope: !3583)
!3585 = !DILocation(line: 1367, column: 9, scope: !3551)
!3586 = !DILocation(line: 1368, column: 13, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3588, file: !3, line: 1368, column: 13)
!3588 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 1367, column: 42)
!3589 = !DILocation(line: 1368, column: 18, scope: !3587)
!3590 = !DILocation(line: 1368, column: 13, scope: !3588)
!3591 = !DILocation(line: 1369, column: 21, scope: !3592)
!3592 = distinct !DILexicalBlock(scope: !3587, file: !3, line: 1368, column: 25)
!3593 = !DILocation(line: 1371, column: 21, scope: !3592)
!3594 = !DILocation(line: 1369, column: 13, scope: !3592)
!3595 = !DILocation(line: 1372, column: 9, scope: !3592)
!3596 = !DILocation(line: 1373, column: 9, scope: !3588)
!3597 = !DILocation(line: 1373, column: 15, scope: !3588)
!3598 = !DILocation(line: 1374, column: 9, scope: !3588)
!3599 = !DILocation(line: 1377, column: 18, scope: !3551)
!3600 = !DILocation(line: 1377, column: 23, scope: !3551)
!3601 = !DILocation(line: 1377, column: 32, scope: !3551)
!3602 = !DILocation(line: 1377, column: 52, scope: !3551)
!3603 = !DILocation(line: 1379, column: 52, scope: !3551)
!3604 = !DILocation(line: 1379, column: 58, scope: !3551)
!3605 = !DILocation(line: 1379, column: 62, scope: !3551)
!3606 = !DILocation(line: 1377, column: 16, scope: !3551)
!3607 = !DILocation(line: 1380, column: 18, scope: !3551)
!3608 = !DILocation(line: 1380, column: 21, scope: !3551)
!3609 = !DILocation(line: 1380, column: 16, scope: !3551)
!3610 = !DILocation(line: 1381, column: 25, scope: !3551)
!3611 = !DILocation(line: 1381, column: 19, scope: !3551)
!3612 = !DILocation(line: 1381, column: 5, scope: !3551)
!3613 = !DILocation(line: 1381, column: 23, scope: !3551)
!3614 = !DILocation(line: 1383, column: 12, scope: !3615)
!3615 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1383, column: 5)
!3616 = !DILocation(line: 1383, column: 10, scope: !3615)
!3617 = !DILocation(line: 1383, column: 17, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3615, file: !3, line: 1383, column: 5)
!3619 = !DILocation(line: 1383, column: 21, scope: !3618)
!3620 = !DILocation(line: 1383, column: 19, scope: !3618)
!3621 = !DILocation(line: 1383, column: 5, scope: !3615)
!3622 = !DILocation(line: 1384, column: 29, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3618, file: !3, line: 1383, column: 30)
!3624 = !DILocation(line: 1384, column: 33, scope: !3623)
!3625 = !DILocation(line: 1384, column: 36, scope: !3623)
!3626 = !DILocation(line: 1384, column: 23, scope: !3623)
!3627 = !DILocation(line: 1384, column: 9, scope: !3623)
!3628 = !DILocation(line: 1384, column: 27, scope: !3623)
!3629 = !DILocation(line: 1385, column: 29, scope: !3623)
!3630 = !DILocation(line: 1385, column: 33, scope: !3623)
!3631 = !DILocation(line: 1385, column: 36, scope: !3623)
!3632 = !DILocation(line: 1385, column: 23, scope: !3623)
!3633 = !DILocation(line: 1385, column: 9, scope: !3623)
!3634 = !DILocation(line: 1385, column: 27, scope: !3623)
!3635 = !DILocation(line: 1386, column: 5, scope: !3623)
!3636 = !DILocation(line: 1383, column: 26, scope: !3618)
!3637 = !DILocation(line: 1383, column: 5, scope: !3618)
!3638 = distinct !{!3638, !3621, !3639}
!3639 = !DILocation(line: 1386, column: 5, scope: !3615)
!3640 = !DILocation(line: 1388, column: 19, scope: !3551)
!3641 = !DILocation(line: 1388, column: 24, scope: !3551)
!3642 = !DILocation(line: 1388, column: 29, scope: !3551)
!3643 = !DILocation(line: 1388, column: 10, scope: !3551)
!3644 = !DILocation(line: 1388, column: 8, scope: !3551)
!3645 = !DILocation(line: 1389, column: 9, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1389, column: 9)
!3647 = !DILocation(line: 1389, column: 12, scope: !3646)
!3648 = !DILocation(line: 1389, column: 9, scope: !3551)
!3649 = !DILocalVariable(name: "rsp", scope: !3650, file: !3, line: 1390, type: !636)
!3650 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1389, column: 17)
!3651 = !DILocation(line: 1390, column: 17, scope: !3650)
!3652 = !DILocation(line: 1392, column: 34, scope: !3650)
!3653 = !DILocation(line: 1392, column: 39, scope: !3650)
!3654 = !DILocation(line: 1392, column: 14, scope: !3650)
!3655 = !DILocation(line: 1392, column: 12, scope: !3650)
!3656 = !DILocation(line: 1393, column: 13, scope: !3657)
!3657 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1393, column: 13)
!3658 = !DILocation(line: 1393, column: 16, scope: !3657)
!3659 = !DILocation(line: 1393, column: 13, scope: !3650)
!3660 = !DILocation(line: 1394, column: 13, scope: !3657)
!3661 = !DILocation(line: 1396, column: 33, scope: !3650)
!3662 = !DILocation(line: 1396, column: 38, scope: !3650)
!3663 = !DILocation(line: 1396, column: 43, scope: !3650)
!3664 = !DILocation(line: 1396, column: 48, scope: !3650)
!3665 = !DILocation(line: 1396, column: 14, scope: !3650)
!3666 = !DILocation(line: 1396, column: 12, scope: !3650)
!3667 = !DILocation(line: 1397, column: 5, scope: !3650)
!3668 = !DILocation(line: 1399, column: 12, scope: !3551)
!3669 = !DILocation(line: 1399, column: 5, scope: !3551)
!3670 = !DILocation(line: 1400, column: 1, scope: !3551)
!3671 = distinct !DISubprogram(name: "modbus_mask_write_register", scope: !3, file: !3, line: 1402, type: !3672, isLocal: false, isDefinition: true, scopeLine: 1403, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3672 = !DISubroutineType(types: !3673)
!3673 = !{!44, !478, !44, !65, !65}
!3674 = !DILocalVariable(name: "ctx", arg: 1, scope: !3671, file: !3, line: 1402, type: !478)
!3675 = !DILocation(line: 1402, column: 42, scope: !3671)
!3676 = !DILocalVariable(name: "addr", arg: 2, scope: !3671, file: !3, line: 1402, type: !44)
!3677 = !DILocation(line: 1402, column: 51, scope: !3671)
!3678 = !DILocalVariable(name: "and_mask", arg: 3, scope: !3671, file: !3, line: 1402, type: !65)
!3679 = !DILocation(line: 1402, column: 66, scope: !3671)
!3680 = !DILocalVariable(name: "or_mask", arg: 4, scope: !3671, file: !3, line: 1402, type: !65)
!3681 = !DILocation(line: 1402, column: 85, scope: !3671)
!3682 = !DILocalVariable(name: "rc", scope: !3671, file: !3, line: 1404, type: !44)
!3683 = !DILocation(line: 1404, column: 9, scope: !3671)
!3684 = !DILocalVariable(name: "req_length", scope: !3671, file: !3, line: 1405, type: !44)
!3685 = !DILocation(line: 1405, column: 9, scope: !3671)
!3686 = !DILocalVariable(name: "req", scope: !3671, file: !3, line: 1409, type: !3687)
!3687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 112, elements: !321)
!3688 = !DILocation(line: 1409, column: 13, scope: !3671)
!3689 = !DILocation(line: 1411, column: 18, scope: !3671)
!3690 = !DILocation(line: 1411, column: 23, scope: !3671)
!3691 = !DILocation(line: 1411, column: 32, scope: !3671)
!3692 = !DILocation(line: 1411, column: 52, scope: !3671)
!3693 = !DILocation(line: 1413, column: 52, scope: !3671)
!3694 = !DILocation(line: 1413, column: 61, scope: !3671)
!3695 = !DILocation(line: 1411, column: 16, scope: !3671)
!3696 = !DILocation(line: 1416, column: 16, scope: !3671)
!3697 = !DILocation(line: 1418, column: 25, scope: !3671)
!3698 = !DILocation(line: 1418, column: 34, scope: !3671)
!3699 = !DILocation(line: 1418, column: 19, scope: !3671)
!3700 = !DILocation(line: 1418, column: 5, scope: !3671)
!3701 = !DILocation(line: 1418, column: 23, scope: !3671)
!3702 = !DILocation(line: 1419, column: 25, scope: !3671)
!3703 = !DILocation(line: 1419, column: 34, scope: !3671)
!3704 = !DILocation(line: 1419, column: 19, scope: !3671)
!3705 = !DILocation(line: 1419, column: 5, scope: !3671)
!3706 = !DILocation(line: 1419, column: 23, scope: !3671)
!3707 = !DILocation(line: 1420, column: 25, scope: !3671)
!3708 = !DILocation(line: 1420, column: 33, scope: !3671)
!3709 = !DILocation(line: 1420, column: 19, scope: !3671)
!3710 = !DILocation(line: 1420, column: 5, scope: !3671)
!3711 = !DILocation(line: 1420, column: 23, scope: !3671)
!3712 = !DILocation(line: 1421, column: 25, scope: !3671)
!3713 = !DILocation(line: 1421, column: 33, scope: !3671)
!3714 = !DILocation(line: 1421, column: 19, scope: !3671)
!3715 = !DILocation(line: 1421, column: 5, scope: !3671)
!3716 = !DILocation(line: 1421, column: 23, scope: !3671)
!3717 = !DILocation(line: 1423, column: 19, scope: !3671)
!3718 = !DILocation(line: 1423, column: 24, scope: !3671)
!3719 = !DILocation(line: 1423, column: 29, scope: !3671)
!3720 = !DILocation(line: 1423, column: 10, scope: !3671)
!3721 = !DILocation(line: 1423, column: 8, scope: !3671)
!3722 = !DILocation(line: 1424, column: 9, scope: !3723)
!3723 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 1424, column: 9)
!3724 = !DILocation(line: 1424, column: 12, scope: !3723)
!3725 = !DILocation(line: 1424, column: 9, scope: !3671)
!3726 = !DILocalVariable(name: "rsp", scope: !3727, file: !3, line: 1426, type: !636)
!3727 = distinct !DILexicalBlock(scope: !3723, file: !3, line: 1424, column: 17)
!3728 = !DILocation(line: 1426, column: 17, scope: !3727)
!3729 = !DILocation(line: 1428, column: 34, scope: !3727)
!3730 = !DILocation(line: 1428, column: 39, scope: !3727)
!3731 = !DILocation(line: 1428, column: 14, scope: !3727)
!3732 = !DILocation(line: 1428, column: 12, scope: !3727)
!3733 = !DILocation(line: 1429, column: 13, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1429, column: 13)
!3735 = !DILocation(line: 1429, column: 16, scope: !3734)
!3736 = !DILocation(line: 1429, column: 13, scope: !3727)
!3737 = !DILocation(line: 1430, column: 13, scope: !3734)
!3738 = !DILocation(line: 1432, column: 33, scope: !3727)
!3739 = !DILocation(line: 1432, column: 38, scope: !3727)
!3740 = !DILocation(line: 1432, column: 43, scope: !3727)
!3741 = !DILocation(line: 1432, column: 48, scope: !3727)
!3742 = !DILocation(line: 1432, column: 14, scope: !3727)
!3743 = !DILocation(line: 1432, column: 12, scope: !3727)
!3744 = !DILocation(line: 1433, column: 5, scope: !3727)
!3745 = !DILocation(line: 1435, column: 12, scope: !3671)
!3746 = !DILocation(line: 1435, column: 5, scope: !3671)
!3747 = !DILocation(line: 1436, column: 1, scope: !3671)
!3748 = distinct !DISubprogram(name: "modbus_write_and_read_registers", scope: !3, file: !3, line: 1440, type: !3749, isLocal: false, isDefinition: true, scopeLine: 1446, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3749 = !DISubroutineType(types: !3750)
!3750 = !{!44, !478, !44, !44, !3554, !44, !44, !64}
!3751 = !DILocalVariable(name: "ctx", arg: 1, scope: !3748, file: !3, line: 1440, type: !478)
!3752 = !DILocation(line: 1440, column: 47, scope: !3748)
!3753 = !DILocalVariable(name: "write_addr", arg: 2, scope: !3748, file: !3, line: 1441, type: !44)
!3754 = !DILocation(line: 1441, column: 41, scope: !3748)
!3755 = !DILocalVariable(name: "write_nb", arg: 3, scope: !3748, file: !3, line: 1441, type: !44)
!3756 = !DILocation(line: 1441, column: 57, scope: !3748)
!3757 = !DILocalVariable(name: "src", arg: 4, scope: !3748, file: !3, line: 1442, type: !3554)
!3758 = !DILocation(line: 1442, column: 53, scope: !3748)
!3759 = !DILocalVariable(name: "read_addr", arg: 5, scope: !3748, file: !3, line: 1443, type: !44)
!3760 = !DILocation(line: 1443, column: 41, scope: !3748)
!3761 = !DILocalVariable(name: "read_nb", arg: 6, scope: !3748, file: !3, line: 1443, type: !44)
!3762 = !DILocation(line: 1443, column: 56, scope: !3748)
!3763 = !DILocalVariable(name: "dest", arg: 7, scope: !3748, file: !3, line: 1444, type: !64)
!3764 = !DILocation(line: 1444, column: 47, scope: !3748)
!3765 = !DILocalVariable(name: "rc", scope: !3748, file: !3, line: 1447, type: !44)
!3766 = !DILocation(line: 1447, column: 9, scope: !3748)
!3767 = !DILocalVariable(name: "req_length", scope: !3748, file: !3, line: 1448, type: !44)
!3768 = !DILocation(line: 1448, column: 9, scope: !3748)
!3769 = !DILocalVariable(name: "i", scope: !3748, file: !3, line: 1449, type: !44)
!3770 = !DILocation(line: 1449, column: 9, scope: !3748)
!3771 = !DILocalVariable(name: "byte_count", scope: !3748, file: !3, line: 1450, type: !44)
!3772 = !DILocation(line: 1450, column: 9, scope: !3748)
!3773 = !DILocalVariable(name: "req", scope: !3748, file: !3, line: 1451, type: !636)
!3774 = !DILocation(line: 1451, column: 13, scope: !3748)
!3775 = !DILocalVariable(name: "rsp", scope: !3748, file: !3, line: 1452, type: !636)
!3776 = !DILocation(line: 1452, column: 13, scope: !3748)
!3777 = !DILocation(line: 1454, column: 9, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1454, column: 9)
!3779 = !DILocation(line: 1454, column: 13, scope: !3778)
!3780 = !DILocation(line: 1454, column: 9, scope: !3748)
!3781 = !DILocation(line: 1455, column: 9, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 1454, column: 22)
!3783 = !DILocation(line: 1455, column: 15, scope: !3782)
!3784 = !DILocation(line: 1456, column: 9, scope: !3782)
!3785 = !DILocation(line: 1459, column: 9, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1459, column: 9)
!3787 = !DILocation(line: 1459, column: 18, scope: !3786)
!3788 = !DILocation(line: 1459, column: 9, scope: !3748)
!3789 = !DILocation(line: 1460, column: 13, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 1460, column: 13)
!3791 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 1459, column: 51)
!3792 = !DILocation(line: 1460, column: 18, scope: !3790)
!3793 = !DILocation(line: 1460, column: 13, scope: !3791)
!3794 = !DILocation(line: 1461, column: 21, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3790, file: !3, line: 1460, column: 25)
!3796 = !DILocation(line: 1463, column: 21, scope: !3795)
!3797 = !DILocation(line: 1461, column: 13, scope: !3795)
!3798 = !DILocation(line: 1464, column: 9, scope: !3795)
!3799 = !DILocation(line: 1465, column: 9, scope: !3791)
!3800 = !DILocation(line: 1465, column: 15, scope: !3791)
!3801 = !DILocation(line: 1466, column: 9, scope: !3791)
!3802 = !DILocation(line: 1469, column: 9, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1469, column: 9)
!3804 = !DILocation(line: 1469, column: 17, scope: !3803)
!3805 = !DILocation(line: 1469, column: 9, scope: !3748)
!3806 = !DILocation(line: 1470, column: 13, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1470, column: 13)
!3808 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 1469, column: 49)
!3809 = !DILocation(line: 1470, column: 18, scope: !3807)
!3810 = !DILocation(line: 1470, column: 13, scope: !3808)
!3811 = !DILocation(line: 1471, column: 21, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 1470, column: 25)
!3813 = !DILocation(line: 1473, column: 21, scope: !3812)
!3814 = !DILocation(line: 1471, column: 13, scope: !3812)
!3815 = !DILocation(line: 1474, column: 9, scope: !3812)
!3816 = !DILocation(line: 1475, column: 9, scope: !3808)
!3817 = !DILocation(line: 1475, column: 15, scope: !3808)
!3818 = !DILocation(line: 1476, column: 9, scope: !3808)
!3819 = !DILocation(line: 1478, column: 18, scope: !3748)
!3820 = !DILocation(line: 1478, column: 23, scope: !3748)
!3821 = !DILocation(line: 1478, column: 32, scope: !3748)
!3822 = !DILocation(line: 1478, column: 52, scope: !3748)
!3823 = !DILocation(line: 1480, column: 52, scope: !3748)
!3824 = !DILocation(line: 1480, column: 63, scope: !3748)
!3825 = !DILocation(line: 1480, column: 72, scope: !3748)
!3826 = !DILocation(line: 1478, column: 16, scope: !3748)
!3827 = !DILocation(line: 1482, column: 25, scope: !3748)
!3828 = !DILocation(line: 1482, column: 36, scope: !3748)
!3829 = !DILocation(line: 1482, column: 19, scope: !3748)
!3830 = !DILocation(line: 1482, column: 5, scope: !3748)
!3831 = !DILocation(line: 1482, column: 23, scope: !3748)
!3832 = !DILocation(line: 1483, column: 25, scope: !3748)
!3833 = !DILocation(line: 1483, column: 36, scope: !3748)
!3834 = !DILocation(line: 1483, column: 19, scope: !3748)
!3835 = !DILocation(line: 1483, column: 5, scope: !3748)
!3836 = !DILocation(line: 1483, column: 23, scope: !3748)
!3837 = !DILocation(line: 1484, column: 25, scope: !3748)
!3838 = !DILocation(line: 1484, column: 34, scope: !3748)
!3839 = !DILocation(line: 1484, column: 19, scope: !3748)
!3840 = !DILocation(line: 1484, column: 5, scope: !3748)
!3841 = !DILocation(line: 1484, column: 23, scope: !3748)
!3842 = !DILocation(line: 1485, column: 25, scope: !3748)
!3843 = !DILocation(line: 1485, column: 34, scope: !3748)
!3844 = !DILocation(line: 1485, column: 19, scope: !3748)
!3845 = !DILocation(line: 1485, column: 5, scope: !3748)
!3846 = !DILocation(line: 1485, column: 23, scope: !3748)
!3847 = !DILocation(line: 1486, column: 18, scope: !3748)
!3848 = !DILocation(line: 1486, column: 27, scope: !3748)
!3849 = !DILocation(line: 1486, column: 16, scope: !3748)
!3850 = !DILocation(line: 1487, column: 25, scope: !3748)
!3851 = !DILocation(line: 1487, column: 19, scope: !3748)
!3852 = !DILocation(line: 1487, column: 5, scope: !3748)
!3853 = !DILocation(line: 1487, column: 23, scope: !3748)
!3854 = !DILocation(line: 1489, column: 12, scope: !3855)
!3855 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1489, column: 5)
!3856 = !DILocation(line: 1489, column: 10, scope: !3855)
!3857 = !DILocation(line: 1489, column: 17, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3855, file: !3, line: 1489, column: 5)
!3859 = !DILocation(line: 1489, column: 21, scope: !3858)
!3860 = !DILocation(line: 1489, column: 19, scope: !3858)
!3861 = !DILocation(line: 1489, column: 5, scope: !3855)
!3862 = !DILocation(line: 1490, column: 29, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3858, file: !3, line: 1489, column: 36)
!3864 = !DILocation(line: 1490, column: 33, scope: !3863)
!3865 = !DILocation(line: 1490, column: 36, scope: !3863)
!3866 = !DILocation(line: 1490, column: 23, scope: !3863)
!3867 = !DILocation(line: 1490, column: 9, scope: !3863)
!3868 = !DILocation(line: 1490, column: 27, scope: !3863)
!3869 = !DILocation(line: 1491, column: 29, scope: !3863)
!3870 = !DILocation(line: 1491, column: 33, scope: !3863)
!3871 = !DILocation(line: 1491, column: 36, scope: !3863)
!3872 = !DILocation(line: 1491, column: 23, scope: !3863)
!3873 = !DILocation(line: 1491, column: 9, scope: !3863)
!3874 = !DILocation(line: 1491, column: 27, scope: !3863)
!3875 = !DILocation(line: 1492, column: 5, scope: !3863)
!3876 = !DILocation(line: 1489, column: 32, scope: !3858)
!3877 = !DILocation(line: 1489, column: 5, scope: !3858)
!3878 = distinct !{!3878, !3861, !3879}
!3879 = !DILocation(line: 1492, column: 5, scope: !3855)
!3880 = !DILocation(line: 1494, column: 19, scope: !3748)
!3881 = !DILocation(line: 1494, column: 24, scope: !3748)
!3882 = !DILocation(line: 1494, column: 29, scope: !3748)
!3883 = !DILocation(line: 1494, column: 10, scope: !3748)
!3884 = !DILocation(line: 1494, column: 8, scope: !3748)
!3885 = !DILocation(line: 1495, column: 9, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1495, column: 9)
!3887 = !DILocation(line: 1495, column: 12, scope: !3886)
!3888 = !DILocation(line: 1495, column: 9, scope: !3748)
!3889 = !DILocalVariable(name: "offset", scope: !3890, file: !3, line: 1496, type: !44)
!3890 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 1495, column: 17)
!3891 = !DILocation(line: 1496, column: 13, scope: !3890)
!3892 = !DILocation(line: 1498, column: 34, scope: !3890)
!3893 = !DILocation(line: 1498, column: 39, scope: !3890)
!3894 = !DILocation(line: 1498, column: 14, scope: !3890)
!3895 = !DILocation(line: 1498, column: 12, scope: !3890)
!3896 = !DILocation(line: 1499, column: 13, scope: !3897)
!3897 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1499, column: 13)
!3898 = !DILocation(line: 1499, column: 16, scope: !3897)
!3899 = !DILocation(line: 1499, column: 13, scope: !3890)
!3900 = !DILocation(line: 1500, column: 13, scope: !3897)
!3901 = !DILocation(line: 1502, column: 33, scope: !3890)
!3902 = !DILocation(line: 1502, column: 38, scope: !3890)
!3903 = !DILocation(line: 1502, column: 43, scope: !3890)
!3904 = !DILocation(line: 1502, column: 48, scope: !3890)
!3905 = !DILocation(line: 1502, column: 14, scope: !3890)
!3906 = !DILocation(line: 1502, column: 12, scope: !3890)
!3907 = !DILocation(line: 1503, column: 13, scope: !3908)
!3908 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1503, column: 13)
!3909 = !DILocation(line: 1503, column: 16, scope: !3908)
!3910 = !DILocation(line: 1503, column: 13, scope: !3890)
!3911 = !DILocation(line: 1504, column: 13, scope: !3908)
!3912 = !DILocation(line: 1506, column: 18, scope: !3890)
!3913 = !DILocation(line: 1506, column: 23, scope: !3890)
!3914 = !DILocation(line: 1506, column: 32, scope: !3890)
!3915 = !DILocation(line: 1506, column: 16, scope: !3890)
!3916 = !DILocation(line: 1507, column: 16, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1507, column: 9)
!3918 = !DILocation(line: 1507, column: 14, scope: !3917)
!3919 = !DILocation(line: 1507, column: 21, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3917, file: !3, line: 1507, column: 9)
!3921 = !DILocation(line: 1507, column: 25, scope: !3920)
!3922 = !DILocation(line: 1507, column: 23, scope: !3920)
!3923 = !DILocation(line: 1507, column: 9, scope: !3917)
!3924 = !DILocation(line: 1509, column: 28, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1507, column: 34)
!3926 = !DILocation(line: 1509, column: 35, scope: !3925)
!3927 = !DILocation(line: 1509, column: 42, scope: !3925)
!3928 = !DILocation(line: 1509, column: 44, scope: !3925)
!3929 = !DILocation(line: 1509, column: 39, scope: !3925)
!3930 = !DILocation(line: 1509, column: 24, scope: !3925)
!3931 = !DILocation(line: 1509, column: 51, scope: !3925)
!3932 = !DILocation(line: 1510, column: 21, scope: !3925)
!3933 = !DILocation(line: 1510, column: 28, scope: !3925)
!3934 = !DILocation(line: 1510, column: 35, scope: !3925)
!3935 = !DILocation(line: 1510, column: 37, scope: !3925)
!3936 = !DILocation(line: 1510, column: 32, scope: !3925)
!3937 = !DILocation(line: 1510, column: 17, scope: !3925)
!3938 = !DILocation(line: 1509, column: 57, scope: !3925)
!3939 = !DILocation(line: 1509, column: 23, scope: !3925)
!3940 = !DILocation(line: 1509, column: 13, scope: !3925)
!3941 = !DILocation(line: 1509, column: 18, scope: !3925)
!3942 = !DILocation(line: 1509, column: 21, scope: !3925)
!3943 = !DILocation(line: 1511, column: 9, scope: !3925)
!3944 = !DILocation(line: 1507, column: 30, scope: !3920)
!3945 = !DILocation(line: 1507, column: 9, scope: !3920)
!3946 = distinct !{!3946, !3923, !3947}
!3947 = !DILocation(line: 1511, column: 9, scope: !3917)
!3948 = !DILocation(line: 1512, column: 5, scope: !3890)
!3949 = !DILocation(line: 1514, column: 12, scope: !3748)
!3950 = !DILocation(line: 1514, column: 5, scope: !3748)
!3951 = !DILocation(line: 1515, column: 1, scope: !3748)
!3952 = distinct !DISubprogram(name: "modbus_report_slave_id", scope: !3, file: !3, line: 1519, type: !3953, isLocal: false, isDefinition: true, scopeLine: 1520, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!3953 = !DISubroutineType(types: !3954)
!3954 = !{!44, !478, !44, !61}
!3955 = !DILocalVariable(name: "ctx", arg: 1, scope: !3952, file: !3, line: 1519, type: !478)
!3956 = !DILocation(line: 1519, column: 38, scope: !3952)
!3957 = !DILocalVariable(name: "max_dest", arg: 2, scope: !3952, file: !3, line: 1519, type: !44)
!3958 = !DILocation(line: 1519, column: 47, scope: !3952)
!3959 = !DILocalVariable(name: "dest", arg: 3, scope: !3952, file: !3, line: 1519, type: !61)
!3960 = !DILocation(line: 1519, column: 66, scope: !3952)
!3961 = !DILocalVariable(name: "rc", scope: !3952, file: !3, line: 1521, type: !44)
!3962 = !DILocation(line: 1521, column: 9, scope: !3952)
!3963 = !DILocalVariable(name: "req_length", scope: !3952, file: !3, line: 1522, type: !44)
!3964 = !DILocation(line: 1522, column: 9, scope: !3952)
!3965 = !DILocalVariable(name: "req", scope: !3952, file: !3, line: 1523, type: !2571)
!3966 = !DILocation(line: 1523, column: 13, scope: !3952)
!3967 = !DILocation(line: 1525, column: 9, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !3952, file: !3, line: 1525, column: 9)
!3969 = !DILocation(line: 1525, column: 13, scope: !3968)
!3970 = !DILocation(line: 1525, column: 21, scope: !3968)
!3971 = !DILocation(line: 1525, column: 24, scope: !3968)
!3972 = !DILocation(line: 1525, column: 33, scope: !3968)
!3973 = !DILocation(line: 1525, column: 9, scope: !3952)
!3974 = !DILocation(line: 1526, column: 9, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3968, file: !3, line: 1525, column: 39)
!3976 = !DILocation(line: 1526, column: 15, scope: !3975)
!3977 = !DILocation(line: 1527, column: 9, scope: !3975)
!3978 = !DILocation(line: 1530, column: 18, scope: !3952)
!3979 = !DILocation(line: 1530, column: 23, scope: !3952)
!3980 = !DILocation(line: 1530, column: 32, scope: !3952)
!3981 = !DILocation(line: 1530, column: 52, scope: !3952)
!3982 = !DILocation(line: 1531, column: 58, scope: !3952)
!3983 = !DILocation(line: 1530, column: 16, scope: !3952)
!3984 = !DILocation(line: 1534, column: 16, scope: !3952)
!3985 = !DILocation(line: 1536, column: 19, scope: !3952)
!3986 = !DILocation(line: 1536, column: 24, scope: !3952)
!3987 = !DILocation(line: 1536, column: 29, scope: !3952)
!3988 = !DILocation(line: 1536, column: 10, scope: !3952)
!3989 = !DILocation(line: 1536, column: 8, scope: !3952)
!3990 = !DILocation(line: 1537, column: 9, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3952, file: !3, line: 1537, column: 9)
!3992 = !DILocation(line: 1537, column: 12, scope: !3991)
!3993 = !DILocation(line: 1537, column: 9, scope: !3952)
!3994 = !DILocalVariable(name: "i", scope: !3995, file: !3, line: 1538, type: !44)
!3995 = distinct !DILexicalBlock(scope: !3991, file: !3, line: 1537, column: 17)
!3996 = !DILocation(line: 1538, column: 13, scope: !3995)
!3997 = !DILocalVariable(name: "offset", scope: !3995, file: !3, line: 1539, type: !44)
!3998 = !DILocation(line: 1539, column: 13, scope: !3995)
!3999 = !DILocalVariable(name: "rsp", scope: !3995, file: !3, line: 1540, type: !636)
!4000 = !DILocation(line: 1540, column: 17, scope: !3995)
!4001 = !DILocation(line: 1542, column: 34, scope: !3995)
!4002 = !DILocation(line: 1542, column: 39, scope: !3995)
!4003 = !DILocation(line: 1542, column: 14, scope: !3995)
!4004 = !DILocation(line: 1542, column: 12, scope: !3995)
!4005 = !DILocation(line: 1543, column: 13, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1543, column: 13)
!4007 = !DILocation(line: 1543, column: 16, scope: !4006)
!4008 = !DILocation(line: 1543, column: 13, scope: !3995)
!4009 = !DILocation(line: 1544, column: 13, scope: !4006)
!4010 = !DILocation(line: 1546, column: 33, scope: !3995)
!4011 = !DILocation(line: 1546, column: 38, scope: !3995)
!4012 = !DILocation(line: 1546, column: 43, scope: !3995)
!4013 = !DILocation(line: 1546, column: 48, scope: !3995)
!4014 = !DILocation(line: 1546, column: 14, scope: !3995)
!4015 = !DILocation(line: 1546, column: 12, scope: !3995)
!4016 = !DILocation(line: 1547, column: 13, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1547, column: 13)
!4018 = !DILocation(line: 1547, column: 16, scope: !4017)
!4019 = !DILocation(line: 1547, column: 13, scope: !3995)
!4020 = !DILocation(line: 1548, column: 13, scope: !4017)
!4021 = !DILocation(line: 1550, column: 18, scope: !3995)
!4022 = !DILocation(line: 1550, column: 23, scope: !3995)
!4023 = !DILocation(line: 1550, column: 32, scope: !3995)
!4024 = !DILocation(line: 1550, column: 46, scope: !3995)
!4025 = !DILocation(line: 1550, column: 16, scope: !3995)
!4026 = !DILocation(line: 1554, column: 15, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1554, column: 9)
!4028 = !DILocation(line: 1554, column: 14, scope: !4027)
!4029 = !DILocation(line: 1554, column: 19, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 1554, column: 9)
!4031 = !DILocation(line: 1554, column: 23, scope: !4030)
!4032 = !DILocation(line: 1554, column: 21, scope: !4030)
!4033 = !DILocation(line: 1554, column: 26, scope: !4030)
!4034 = !DILocation(line: 1554, column: 29, scope: !4030)
!4035 = !DILocation(line: 1554, column: 33, scope: !4030)
!4036 = !DILocation(line: 1554, column: 31, scope: !4030)
!4037 = !DILocation(line: 1554, column: 9, scope: !4027)
!4038 = !DILocation(line: 1555, column: 27, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 1554, column: 48)
!4040 = !DILocation(line: 1555, column: 36, scope: !4039)
!4041 = !DILocation(line: 1555, column: 34, scope: !4039)
!4042 = !DILocation(line: 1555, column: 23, scope: !4039)
!4043 = !DILocation(line: 1555, column: 13, scope: !4039)
!4044 = !DILocation(line: 1555, column: 18, scope: !4039)
!4045 = !DILocation(line: 1555, column: 21, scope: !4039)
!4046 = !DILocation(line: 1556, column: 9, scope: !4039)
!4047 = !DILocation(line: 1554, column: 44, scope: !4030)
!4048 = !DILocation(line: 1554, column: 9, scope: !4030)
!4049 = distinct !{!4049, !4037, !4050}
!4050 = !DILocation(line: 1556, column: 9, scope: !4027)
!4051 = !DILocation(line: 1557, column: 5, scope: !3995)
!4052 = !DILocation(line: 1559, column: 12, scope: !3952)
!4053 = !DILocation(line: 1559, column: 5, scope: !3952)
!4054 = !DILocation(line: 1560, column: 1, scope: !3952)
!4055 = distinct !DISubprogram(name: "_modbus_init_common", scope: !3, file: !3, line: 1562, type: !550, isLocal: false, isDefinition: true, scopeLine: 1563, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4056 = !DILocalVariable(name: "ctx", arg: 1, scope: !4055, file: !3, line: 1562, type: !478)
!4057 = !DILocation(line: 1562, column: 36, scope: !4055)
!4058 = !DILocation(line: 1565, column: 5, scope: !4055)
!4059 = !DILocation(line: 1565, column: 10, scope: !4055)
!4060 = !DILocation(line: 1565, column: 16, scope: !4055)
!4061 = !DILocation(line: 1566, column: 5, scope: !4055)
!4062 = !DILocation(line: 1566, column: 10, scope: !4055)
!4063 = !DILocation(line: 1566, column: 12, scope: !4055)
!4064 = !DILocation(line: 1568, column: 5, scope: !4055)
!4065 = !DILocation(line: 1568, column: 10, scope: !4055)
!4066 = !DILocation(line: 1568, column: 16, scope: !4055)
!4067 = !DILocation(line: 1569, column: 5, scope: !4055)
!4068 = !DILocation(line: 1569, column: 10, scope: !4055)
!4069 = !DILocation(line: 1569, column: 25, scope: !4055)
!4070 = !DILocation(line: 1571, column: 5, scope: !4055)
!4071 = !DILocation(line: 1571, column: 10, scope: !4055)
!4072 = !DILocation(line: 1571, column: 27, scope: !4055)
!4073 = !DILocation(line: 1571, column: 34, scope: !4055)
!4074 = !DILocation(line: 1572, column: 5, scope: !4055)
!4075 = !DILocation(line: 1572, column: 10, scope: !4055)
!4076 = !DILocation(line: 1572, column: 27, scope: !4055)
!4077 = !DILocation(line: 1572, column: 35, scope: !4055)
!4078 = !DILocation(line: 1574, column: 5, scope: !4055)
!4079 = !DILocation(line: 1574, column: 10, scope: !4055)
!4080 = !DILocation(line: 1574, column: 23, scope: !4055)
!4081 = !DILocation(line: 1574, column: 30, scope: !4055)
!4082 = !DILocation(line: 1575, column: 5, scope: !4055)
!4083 = !DILocation(line: 1575, column: 10, scope: !4055)
!4084 = !DILocation(line: 1575, column: 23, scope: !4055)
!4085 = !DILocation(line: 1575, column: 31, scope: !4055)
!4086 = !DILocation(line: 1577, column: 5, scope: !4055)
!4087 = !DILocation(line: 1577, column: 10, scope: !4055)
!4088 = !DILocation(line: 1577, column: 29, scope: !4055)
!4089 = !DILocation(line: 1577, column: 36, scope: !4055)
!4090 = !DILocation(line: 1578, column: 5, scope: !4055)
!4091 = !DILocation(line: 1578, column: 10, scope: !4055)
!4092 = !DILocation(line: 1578, column: 29, scope: !4055)
!4093 = !DILocation(line: 1578, column: 37, scope: !4055)
!4094 = !DILocation(line: 1579, column: 1, scope: !4055)
!4095 = distinct !DISubprogram(name: "modbus_set_slave", scope: !3, file: !3, line: 1582, type: !505, isLocal: false, isDefinition: true, scopeLine: 1583, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4096 = !DILocalVariable(name: "ctx", arg: 1, scope: !4095, file: !3, line: 1582, type: !478)
!4097 = !DILocation(line: 1582, column: 32, scope: !4095)
!4098 = !DILocalVariable(name: "slave", arg: 2, scope: !4095, file: !3, line: 1582, type: !44)
!4099 = !DILocation(line: 1582, column: 41, scope: !4095)
!4100 = !DILocation(line: 1584, column: 9, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 1584, column: 9)
!4102 = !DILocation(line: 1584, column: 13, scope: !4101)
!4103 = !DILocation(line: 1584, column: 9, scope: !4095)
!4104 = !DILocation(line: 1585, column: 9, scope: !4105)
!4105 = distinct !DILexicalBlock(scope: !4101, file: !3, line: 1584, column: 22)
!4106 = !DILocation(line: 1585, column: 15, scope: !4105)
!4107 = !DILocation(line: 1586, column: 9, scope: !4105)
!4108 = !DILocation(line: 1589, column: 12, scope: !4095)
!4109 = !DILocation(line: 1589, column: 17, scope: !4095)
!4110 = !DILocation(line: 1589, column: 26, scope: !4095)
!4111 = !DILocation(line: 1589, column: 36, scope: !4095)
!4112 = !DILocation(line: 1589, column: 41, scope: !4095)
!4113 = !DILocation(line: 1589, column: 5, scope: !4095)
!4114 = !DILocation(line: 1590, column: 1, scope: !4095)
!4115 = distinct !DISubprogram(name: "modbus_get_slave", scope: !3, file: !3, line: 1592, type: !546, isLocal: false, isDefinition: true, scopeLine: 1593, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4116 = !DILocalVariable(name: "ctx", arg: 1, scope: !4115, file: !3, line: 1592, type: !478)
!4117 = !DILocation(line: 1592, column: 32, scope: !4115)
!4118 = !DILocation(line: 1594, column: 9, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 1594, column: 9)
!4120 = !DILocation(line: 1594, column: 13, scope: !4119)
!4121 = !DILocation(line: 1594, column: 9, scope: !4115)
!4122 = !DILocation(line: 1595, column: 9, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1594, column: 22)
!4124 = !DILocation(line: 1595, column: 15, scope: !4123)
!4125 = !DILocation(line: 1596, column: 9, scope: !4123)
!4126 = !DILocation(line: 1599, column: 12, scope: !4115)
!4127 = !DILocation(line: 1599, column: 17, scope: !4115)
!4128 = !DILocation(line: 1599, column: 5, scope: !4115)
!4129 = !DILocation(line: 1600, column: 1, scope: !4115)
!4130 = distinct !DISubprogram(name: "modbus_set_error_recovery", scope: !3, file: !3, line: 1602, type: !4131, isLocal: false, isDefinition: true, scopeLine: 1604, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4131 = !DISubroutineType(types: !4132)
!4132 = !{!44, !478, !4133}
!4133 = !DIDerivedType(tag: DW_TAG_typedef, name: "modbus_error_recovery_mode", file: !16, line: 177, baseType: !15)
!4134 = !DILocalVariable(name: "ctx", arg: 1, scope: !4130, file: !3, line: 1602, type: !478)
!4135 = !DILocation(line: 1602, column: 41, scope: !4130)
!4136 = !DILocalVariable(name: "error_recovery", arg: 2, scope: !4130, file: !3, line: 1603, type: !4133)
!4137 = !DILocation(line: 1603, column: 58, scope: !4130)
!4138 = !DILocation(line: 1605, column: 9, scope: !4139)
!4139 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1605, column: 9)
!4140 = !DILocation(line: 1605, column: 13, scope: !4139)
!4141 = !DILocation(line: 1605, column: 9, scope: !4130)
!4142 = !DILocation(line: 1606, column: 9, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 1605, column: 22)
!4144 = !DILocation(line: 1606, column: 15, scope: !4143)
!4145 = !DILocation(line: 1607, column: 9, scope: !4143)
!4146 = !DILocation(line: 1611, column: 37, scope: !4130)
!4147 = !DILocation(line: 1611, column: 27, scope: !4130)
!4148 = !DILocation(line: 1611, column: 5, scope: !4130)
!4149 = !DILocation(line: 1611, column: 10, scope: !4130)
!4150 = !DILocation(line: 1611, column: 25, scope: !4130)
!4151 = !DILocation(line: 1612, column: 5, scope: !4130)
!4152 = !DILocation(line: 1613, column: 1, scope: !4130)
!4153 = distinct !DISubprogram(name: "modbus_set_socket", scope: !3, file: !3, line: 1615, type: !505, isLocal: false, isDefinition: true, scopeLine: 1616, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4154 = !DILocalVariable(name: "ctx", arg: 1, scope: !4153, file: !3, line: 1615, type: !478)
!4155 = !DILocation(line: 1615, column: 33, scope: !4153)
!4156 = !DILocalVariable(name: "s", arg: 2, scope: !4153, file: !3, line: 1615, type: !44)
!4157 = !DILocation(line: 1615, column: 42, scope: !4153)
!4158 = !DILocation(line: 1617, column: 9, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 1617, column: 9)
!4160 = !DILocation(line: 1617, column: 13, scope: !4159)
!4161 = !DILocation(line: 1617, column: 9, scope: !4153)
!4162 = !DILocation(line: 1618, column: 9, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 1617, column: 22)
!4164 = !DILocation(line: 1618, column: 15, scope: !4163)
!4165 = !DILocation(line: 1619, column: 9, scope: !4163)
!4166 = !DILocation(line: 1622, column: 14, scope: !4153)
!4167 = !DILocation(line: 1622, column: 5, scope: !4153)
!4168 = !DILocation(line: 1622, column: 10, scope: !4153)
!4169 = !DILocation(line: 1622, column: 12, scope: !4153)
!4170 = !DILocation(line: 1623, column: 5, scope: !4153)
!4171 = !DILocation(line: 1624, column: 1, scope: !4153)
!4172 = distinct !DISubprogram(name: "modbus_get_socket", scope: !3, file: !3, line: 1626, type: !546, isLocal: false, isDefinition: true, scopeLine: 1627, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4173 = !DILocalVariable(name: "ctx", arg: 1, scope: !4172, file: !3, line: 1626, type: !478)
!4174 = !DILocation(line: 1626, column: 33, scope: !4172)
!4175 = !DILocation(line: 1628, column: 9, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 1628, column: 9)
!4177 = !DILocation(line: 1628, column: 13, scope: !4176)
!4178 = !DILocation(line: 1628, column: 9, scope: !4172)
!4179 = !DILocation(line: 1629, column: 9, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 1628, column: 22)
!4181 = !DILocation(line: 1629, column: 15, scope: !4180)
!4182 = !DILocation(line: 1630, column: 9, scope: !4180)
!4183 = !DILocation(line: 1633, column: 12, scope: !4172)
!4184 = !DILocation(line: 1633, column: 17, scope: !4172)
!4185 = !DILocation(line: 1633, column: 5, scope: !4172)
!4186 = !DILocation(line: 1634, column: 1, scope: !4172)
!4187 = distinct !DISubprogram(name: "modbus_get_response_timeout", scope: !3, file: !3, line: 1637, type: !4188, isLocal: false, isDefinition: true, scopeLine: 1638, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4188 = !DISubroutineType(types: !4189)
!4189 = !{!44, !478, !4190, !4190}
!4190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !312, size: 64)
!4191 = !DILocalVariable(name: "ctx", arg: 1, scope: !4187, file: !3, line: 1637, type: !478)
!4192 = !DILocation(line: 1637, column: 43, scope: !4187)
!4193 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4187, file: !3, line: 1637, type: !4190)
!4194 = !DILocation(line: 1637, column: 58, scope: !4187)
!4195 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4187, file: !3, line: 1637, type: !4190)
!4196 = !DILocation(line: 1637, column: 76, scope: !4187)
!4197 = !DILocation(line: 1639, column: 9, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 1639, column: 9)
!4199 = !DILocation(line: 1639, column: 13, scope: !4198)
!4200 = !DILocation(line: 1639, column: 9, scope: !4187)
!4201 = !DILocation(line: 1640, column: 9, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 1639, column: 22)
!4203 = !DILocation(line: 1640, column: 15, scope: !4202)
!4204 = !DILocation(line: 1641, column: 9, scope: !4202)
!4205 = !DILocation(line: 1644, column: 15, scope: !4187)
!4206 = !DILocation(line: 1644, column: 20, scope: !4187)
!4207 = !DILocation(line: 1644, column: 37, scope: !4187)
!4208 = !DILocation(line: 1644, column: 6, scope: !4187)
!4209 = !DILocation(line: 1644, column: 13, scope: !4187)
!4210 = !DILocation(line: 1645, column: 16, scope: !4187)
!4211 = !DILocation(line: 1645, column: 21, scope: !4187)
!4212 = !DILocation(line: 1645, column: 38, scope: !4187)
!4213 = !DILocation(line: 1645, column: 6, scope: !4187)
!4214 = !DILocation(line: 1645, column: 14, scope: !4187)
!4215 = !DILocation(line: 1646, column: 5, scope: !4187)
!4216 = !DILocation(line: 1647, column: 1, scope: !4187)
!4217 = distinct !DISubprogram(name: "modbus_set_response_timeout", scope: !3, file: !3, line: 1649, type: !4218, isLocal: false, isDefinition: true, scopeLine: 1650, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4218 = !DISubroutineType(types: !4219)
!4219 = !{!44, !478, !312, !312}
!4220 = !DILocalVariable(name: "ctx", arg: 1, scope: !4217, file: !3, line: 1649, type: !478)
!4221 = !DILocation(line: 1649, column: 43, scope: !4217)
!4222 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4217, file: !3, line: 1649, type: !312)
!4223 = !DILocation(line: 1649, column: 57, scope: !4217)
!4224 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4217, file: !3, line: 1649, type: !312)
!4225 = !DILocation(line: 1649, column: 74, scope: !4217)
!4226 = !DILocation(line: 1651, column: 9, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 1651, column: 9)
!4228 = !DILocation(line: 1651, column: 13, scope: !4227)
!4229 = !DILocation(line: 1651, column: 21, scope: !4227)
!4230 = !DILocation(line: 1652, column: 10, scope: !4227)
!4231 = !DILocation(line: 1652, column: 17, scope: !4227)
!4232 = !DILocation(line: 1652, column: 22, scope: !4227)
!4233 = !DILocation(line: 1652, column: 25, scope: !4227)
!4234 = !DILocation(line: 1652, column: 33, scope: !4227)
!4235 = !DILocation(line: 1652, column: 39, scope: !4227)
!4236 = !DILocation(line: 1652, column: 42, scope: !4227)
!4237 = !DILocation(line: 1652, column: 50, scope: !4227)
!4238 = !DILocation(line: 1651, column: 9, scope: !4217)
!4239 = !DILocation(line: 1653, column: 9, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 1652, column: 60)
!4241 = !DILocation(line: 1653, column: 15, scope: !4240)
!4242 = !DILocation(line: 1654, column: 9, scope: !4240)
!4243 = !DILocation(line: 1657, column: 36, scope: !4217)
!4244 = !DILocation(line: 1657, column: 5, scope: !4217)
!4245 = !DILocation(line: 1657, column: 10, scope: !4217)
!4246 = !DILocation(line: 1657, column: 27, scope: !4217)
!4247 = !DILocation(line: 1657, column: 34, scope: !4217)
!4248 = !DILocation(line: 1658, column: 37, scope: !4217)
!4249 = !DILocation(line: 1658, column: 5, scope: !4217)
!4250 = !DILocation(line: 1658, column: 10, scope: !4217)
!4251 = !DILocation(line: 1658, column: 27, scope: !4217)
!4252 = !DILocation(line: 1658, column: 35, scope: !4217)
!4253 = !DILocation(line: 1659, column: 5, scope: !4217)
!4254 = !DILocation(line: 1660, column: 1, scope: !4217)
!4255 = distinct !DISubprogram(name: "modbus_get_byte_timeout", scope: !3, file: !3, line: 1663, type: !4188, isLocal: false, isDefinition: true, scopeLine: 1664, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4256 = !DILocalVariable(name: "ctx", arg: 1, scope: !4255, file: !3, line: 1663, type: !478)
!4257 = !DILocation(line: 1663, column: 39, scope: !4255)
!4258 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4255, file: !3, line: 1663, type: !4190)
!4259 = !DILocation(line: 1663, column: 54, scope: !4255)
!4260 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4255, file: !3, line: 1663, type: !4190)
!4261 = !DILocation(line: 1663, column: 72, scope: !4255)
!4262 = !DILocation(line: 1665, column: 9, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4255, file: !3, line: 1665, column: 9)
!4264 = !DILocation(line: 1665, column: 13, scope: !4263)
!4265 = !DILocation(line: 1665, column: 9, scope: !4255)
!4266 = !DILocation(line: 1666, column: 9, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 1665, column: 22)
!4268 = !DILocation(line: 1666, column: 15, scope: !4267)
!4269 = !DILocation(line: 1667, column: 9, scope: !4267)
!4270 = !DILocation(line: 1670, column: 15, scope: !4255)
!4271 = !DILocation(line: 1670, column: 20, scope: !4255)
!4272 = !DILocation(line: 1670, column: 33, scope: !4255)
!4273 = !DILocation(line: 1670, column: 6, scope: !4255)
!4274 = !DILocation(line: 1670, column: 13, scope: !4255)
!4275 = !DILocation(line: 1671, column: 16, scope: !4255)
!4276 = !DILocation(line: 1671, column: 21, scope: !4255)
!4277 = !DILocation(line: 1671, column: 34, scope: !4255)
!4278 = !DILocation(line: 1671, column: 6, scope: !4255)
!4279 = !DILocation(line: 1671, column: 14, scope: !4255)
!4280 = !DILocation(line: 1672, column: 5, scope: !4255)
!4281 = !DILocation(line: 1673, column: 1, scope: !4255)
!4282 = distinct !DISubprogram(name: "modbus_set_byte_timeout", scope: !3, file: !3, line: 1675, type: !4218, isLocal: false, isDefinition: true, scopeLine: 1676, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4283 = !DILocalVariable(name: "ctx", arg: 1, scope: !4282, file: !3, line: 1675, type: !478)
!4284 = !DILocation(line: 1675, column: 39, scope: !4282)
!4285 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4282, file: !3, line: 1675, type: !312)
!4286 = !DILocation(line: 1675, column: 53, scope: !4282)
!4287 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4282, file: !3, line: 1675, type: !312)
!4288 = !DILocation(line: 1675, column: 70, scope: !4282)
!4289 = !DILocation(line: 1678, column: 9, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 1678, column: 9)
!4291 = !DILocation(line: 1678, column: 13, scope: !4290)
!4292 = !DILocation(line: 1678, column: 21, scope: !4290)
!4293 = !DILocation(line: 1678, column: 24, scope: !4290)
!4294 = !DILocation(line: 1678, column: 32, scope: !4290)
!4295 = !DILocation(line: 1678, column: 9, scope: !4282)
!4296 = !DILocation(line: 1679, column: 9, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 1678, column: 42)
!4298 = !DILocation(line: 1679, column: 15, scope: !4297)
!4299 = !DILocation(line: 1680, column: 9, scope: !4297)
!4300 = !DILocation(line: 1683, column: 32, scope: !4282)
!4301 = !DILocation(line: 1683, column: 5, scope: !4282)
!4302 = !DILocation(line: 1683, column: 10, scope: !4282)
!4303 = !DILocation(line: 1683, column: 23, scope: !4282)
!4304 = !DILocation(line: 1683, column: 30, scope: !4282)
!4305 = !DILocation(line: 1684, column: 33, scope: !4282)
!4306 = !DILocation(line: 1684, column: 5, scope: !4282)
!4307 = !DILocation(line: 1684, column: 10, scope: !4282)
!4308 = !DILocation(line: 1684, column: 23, scope: !4282)
!4309 = !DILocation(line: 1684, column: 31, scope: !4282)
!4310 = !DILocation(line: 1685, column: 5, scope: !4282)
!4311 = !DILocation(line: 1686, column: 1, scope: !4282)
!4312 = distinct !DISubprogram(name: "modbus_get_indication_timeout", scope: !3, file: !3, line: 1689, type: !4188, isLocal: false, isDefinition: true, scopeLine: 1690, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4313 = !DILocalVariable(name: "ctx", arg: 1, scope: !4312, file: !3, line: 1689, type: !478)
!4314 = !DILocation(line: 1689, column: 45, scope: !4312)
!4315 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4312, file: !3, line: 1689, type: !4190)
!4316 = !DILocation(line: 1689, column: 60, scope: !4312)
!4317 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4312, file: !3, line: 1689, type: !4190)
!4318 = !DILocation(line: 1689, column: 78, scope: !4312)
!4319 = !DILocation(line: 1691, column: 9, scope: !4320)
!4320 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 1691, column: 9)
!4321 = !DILocation(line: 1691, column: 13, scope: !4320)
!4322 = !DILocation(line: 1691, column: 9, scope: !4312)
!4323 = !DILocation(line: 1692, column: 9, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1691, column: 22)
!4325 = !DILocation(line: 1692, column: 15, scope: !4324)
!4326 = !DILocation(line: 1693, column: 9, scope: !4324)
!4327 = !DILocation(line: 1696, column: 15, scope: !4312)
!4328 = !DILocation(line: 1696, column: 20, scope: !4312)
!4329 = !DILocation(line: 1696, column: 39, scope: !4312)
!4330 = !DILocation(line: 1696, column: 6, scope: !4312)
!4331 = !DILocation(line: 1696, column: 13, scope: !4312)
!4332 = !DILocation(line: 1697, column: 16, scope: !4312)
!4333 = !DILocation(line: 1697, column: 21, scope: !4312)
!4334 = !DILocation(line: 1697, column: 40, scope: !4312)
!4335 = !DILocation(line: 1697, column: 6, scope: !4312)
!4336 = !DILocation(line: 1697, column: 14, scope: !4312)
!4337 = !DILocation(line: 1698, column: 5, scope: !4312)
!4338 = !DILocation(line: 1699, column: 1, scope: !4312)
!4339 = distinct !DISubprogram(name: "modbus_set_indication_timeout", scope: !3, file: !3, line: 1701, type: !4218, isLocal: false, isDefinition: true, scopeLine: 1702, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4340 = !DILocalVariable(name: "ctx", arg: 1, scope: !4339, file: !3, line: 1701, type: !478)
!4341 = !DILocation(line: 1701, column: 45, scope: !4339)
!4342 = !DILocalVariable(name: "to_sec", arg: 2, scope: !4339, file: !3, line: 1701, type: !312)
!4343 = !DILocation(line: 1701, column: 59, scope: !4339)
!4344 = !DILocalVariable(name: "to_usec", arg: 3, scope: !4339, file: !3, line: 1701, type: !312)
!4345 = !DILocation(line: 1701, column: 76, scope: !4339)
!4346 = !DILocation(line: 1704, column: 9, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1704, column: 9)
!4348 = !DILocation(line: 1704, column: 13, scope: !4347)
!4349 = !DILocation(line: 1704, column: 21, scope: !4347)
!4350 = !DILocation(line: 1704, column: 24, scope: !4347)
!4351 = !DILocation(line: 1704, column: 32, scope: !4347)
!4352 = !DILocation(line: 1704, column: 9, scope: !4339)
!4353 = !DILocation(line: 1705, column: 9, scope: !4354)
!4354 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 1704, column: 42)
!4355 = !DILocation(line: 1705, column: 15, scope: !4354)
!4356 = !DILocation(line: 1706, column: 9, scope: !4354)
!4357 = !DILocation(line: 1709, column: 38, scope: !4339)
!4358 = !DILocation(line: 1709, column: 5, scope: !4339)
!4359 = !DILocation(line: 1709, column: 10, scope: !4339)
!4360 = !DILocation(line: 1709, column: 29, scope: !4339)
!4361 = !DILocation(line: 1709, column: 36, scope: !4339)
!4362 = !DILocation(line: 1710, column: 39, scope: !4339)
!4363 = !DILocation(line: 1710, column: 5, scope: !4339)
!4364 = !DILocation(line: 1710, column: 10, scope: !4339)
!4365 = !DILocation(line: 1710, column: 29, scope: !4339)
!4366 = !DILocation(line: 1710, column: 37, scope: !4339)
!4367 = !DILocation(line: 1711, column: 5, scope: !4339)
!4368 = !DILocation(line: 1712, column: 1, scope: !4339)
!4369 = distinct !DISubprogram(name: "modbus_get_header_length", scope: !3, file: !3, line: 1714, type: !546, isLocal: false, isDefinition: true, scopeLine: 1715, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4370 = !DILocalVariable(name: "ctx", arg: 1, scope: !4369, file: !3, line: 1714, type: !478)
!4371 = !DILocation(line: 1714, column: 40, scope: !4369)
!4372 = !DILocation(line: 1716, column: 9, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 1716, column: 9)
!4374 = !DILocation(line: 1716, column: 13, scope: !4373)
!4375 = !DILocation(line: 1716, column: 9, scope: !4369)
!4376 = !DILocation(line: 1717, column: 9, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 1716, column: 22)
!4378 = !DILocation(line: 1717, column: 15, scope: !4377)
!4379 = !DILocation(line: 1718, column: 9, scope: !4377)
!4380 = !DILocation(line: 1721, column: 12, scope: !4369)
!4381 = !DILocation(line: 1721, column: 17, scope: !4369)
!4382 = !DILocation(line: 1721, column: 26, scope: !4369)
!4383 = !DILocation(line: 1721, column: 5, scope: !4369)
!4384 = !DILocation(line: 1722, column: 1, scope: !4369)
!4385 = distinct !DISubprogram(name: "modbus_free", scope: !3, file: !3, line: 1742, type: !550, isLocal: false, isDefinition: true, scopeLine: 1743, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4386 = !DILocalVariable(name: "ctx", arg: 1, scope: !4385, file: !3, line: 1742, type: !478)
!4387 = !DILocation(line: 1742, column: 28, scope: !4385)
!4388 = !DILocation(line: 1744, column: 9, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 1744, column: 9)
!4390 = !DILocation(line: 1744, column: 13, scope: !4389)
!4391 = !DILocation(line: 1744, column: 9, scope: !4385)
!4392 = !DILocation(line: 1745, column: 9, scope: !4389)
!4393 = !DILocation(line: 1747, column: 5, scope: !4385)
!4394 = !DILocation(line: 1747, column: 10, scope: !4385)
!4395 = !DILocation(line: 1747, column: 19, scope: !4385)
!4396 = !DILocation(line: 1747, column: 24, scope: !4385)
!4397 = !DILocation(line: 1748, column: 1, scope: !4385)
!4398 = distinct !DISubprogram(name: "modbus_set_debug", scope: !3, file: !3, line: 1750, type: !505, isLocal: false, isDefinition: true, scopeLine: 1751, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4399 = !DILocalVariable(name: "ctx", arg: 1, scope: !4398, file: !3, line: 1750, type: !478)
!4400 = !DILocation(line: 1750, column: 32, scope: !4398)
!4401 = !DILocalVariable(name: "flag", arg: 2, scope: !4398, file: !3, line: 1750, type: !44)
!4402 = !DILocation(line: 1750, column: 41, scope: !4398)
!4403 = !DILocation(line: 1752, column: 9, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 1752, column: 9)
!4405 = !DILocation(line: 1752, column: 13, scope: !4404)
!4406 = !DILocation(line: 1752, column: 9, scope: !4398)
!4407 = !DILocation(line: 1753, column: 9, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4404, file: !3, line: 1752, column: 22)
!4409 = !DILocation(line: 1753, column: 15, scope: !4408)
!4410 = !DILocation(line: 1754, column: 9, scope: !4408)
!4411 = !DILocation(line: 1757, column: 18, scope: !4398)
!4412 = !DILocation(line: 1757, column: 5, scope: !4398)
!4413 = !DILocation(line: 1757, column: 10, scope: !4398)
!4414 = !DILocation(line: 1757, column: 16, scope: !4398)
!4415 = !DILocation(line: 1758, column: 5, scope: !4398)
!4416 = !DILocation(line: 1759, column: 1, scope: !4398)
!4417 = distinct !DISubprogram(name: "modbus_mapping_new_start_address", scope: !3, file: !3, line: 1767, type: !4418, isLocal: false, isDefinition: true, scopeLine: 1772, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4418 = !DISubroutineType(types: !4419)
!4419 = !{!48, !72, !72, !72, !72, !72, !72, !72, !72}
!4420 = !DILocalVariable(name: "start_bits", arg: 1, scope: !4417, file: !3, line: 1768, type: !72)
!4421 = !DILocation(line: 1768, column: 18, scope: !4417)
!4422 = !DILocalVariable(name: "nb_bits", arg: 2, scope: !4417, file: !3, line: 1768, type: !72)
!4423 = !DILocation(line: 1768, column: 43, scope: !4417)
!4424 = !DILocalVariable(name: "start_input_bits", arg: 3, scope: !4417, file: !3, line: 1769, type: !72)
!4425 = !DILocation(line: 1769, column: 18, scope: !4417)
!4426 = !DILocalVariable(name: "nb_input_bits", arg: 4, scope: !4417, file: !3, line: 1769, type: !72)
!4427 = !DILocation(line: 1769, column: 49, scope: !4417)
!4428 = !DILocalVariable(name: "start_registers", arg: 5, scope: !4417, file: !3, line: 1770, type: !72)
!4429 = !DILocation(line: 1770, column: 18, scope: !4417)
!4430 = !DILocalVariable(name: "nb_registers", arg: 6, scope: !4417, file: !3, line: 1770, type: !72)
!4431 = !DILocation(line: 1770, column: 48, scope: !4417)
!4432 = !DILocalVariable(name: "start_input_registers", arg: 7, scope: !4417, file: !3, line: 1771, type: !72)
!4433 = !DILocation(line: 1771, column: 18, scope: !4417)
!4434 = !DILocalVariable(name: "nb_input_registers", arg: 8, scope: !4417, file: !3, line: 1771, type: !72)
!4435 = !DILocation(line: 1771, column: 54, scope: !4417)
!4436 = !DILocalVariable(name: "mb_mapping", scope: !4417, file: !3, line: 1773, type: !48)
!4437 = !DILocation(line: 1773, column: 23, scope: !4417)
!4438 = !DILocation(line: 1775, column: 38, scope: !4417)
!4439 = !DILocation(line: 1775, column: 18, scope: !4417)
!4440 = !DILocation(line: 1775, column: 16, scope: !4417)
!4441 = !DILocation(line: 1776, column: 9, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1776, column: 9)
!4443 = !DILocation(line: 1776, column: 20, scope: !4442)
!4444 = !DILocation(line: 1776, column: 9, scope: !4417)
!4445 = !DILocation(line: 1777, column: 9, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 1776, column: 29)
!4447 = !DILocation(line: 1781, column: 27, scope: !4417)
!4448 = !DILocation(line: 1781, column: 5, scope: !4417)
!4449 = !DILocation(line: 1781, column: 17, scope: !4417)
!4450 = !DILocation(line: 1781, column: 25, scope: !4417)
!4451 = !DILocation(line: 1782, column: 30, scope: !4417)
!4452 = !DILocation(line: 1782, column: 5, scope: !4417)
!4453 = !DILocation(line: 1782, column: 17, scope: !4417)
!4454 = !DILocation(line: 1782, column: 28, scope: !4417)
!4455 = !DILocation(line: 1783, column: 9, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1783, column: 9)
!4457 = !DILocation(line: 1783, column: 17, scope: !4456)
!4458 = !DILocation(line: 1783, column: 9, scope: !4417)
!4459 = !DILocation(line: 1784, column: 9, scope: !4460)
!4460 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1783, column: 23)
!4461 = !DILocation(line: 1784, column: 21, scope: !4460)
!4462 = !DILocation(line: 1784, column: 30, scope: !4460)
!4463 = !DILocation(line: 1785, column: 5, scope: !4460)
!4464 = !DILocation(line: 1788, column: 32, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1785, column: 12)
!4466 = !DILocation(line: 1788, column: 40, scope: !4465)
!4467 = !DILocation(line: 1788, column: 25, scope: !4465)
!4468 = !DILocation(line: 1787, column: 9, scope: !4465)
!4469 = !DILocation(line: 1787, column: 21, scope: !4465)
!4470 = !DILocation(line: 1787, column: 30, scope: !4465)
!4471 = !DILocation(line: 1789, column: 13, scope: !4472)
!4472 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 1789, column: 13)
!4473 = !DILocation(line: 1789, column: 25, scope: !4472)
!4474 = !DILocation(line: 1789, column: 34, scope: !4472)
!4475 = !DILocation(line: 1789, column: 13, scope: !4465)
!4476 = !DILocation(line: 1790, column: 18, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1789, column: 43)
!4478 = !DILocation(line: 1790, column: 13, scope: !4477)
!4479 = !DILocation(line: 1791, column: 13, scope: !4477)
!4480 = !DILocation(line: 1793, column: 16, scope: !4465)
!4481 = !DILocation(line: 1793, column: 28, scope: !4465)
!4482 = !DILocation(line: 1793, column: 41, scope: !4465)
!4483 = !DILocation(line: 1793, column: 49, scope: !4465)
!4484 = !DILocation(line: 1793, column: 9, scope: !4465)
!4485 = !DILocation(line: 1797, column: 33, scope: !4417)
!4486 = !DILocation(line: 1797, column: 5, scope: !4417)
!4487 = !DILocation(line: 1797, column: 17, scope: !4417)
!4488 = !DILocation(line: 1797, column: 31, scope: !4417)
!4489 = !DILocation(line: 1798, column: 36, scope: !4417)
!4490 = !DILocation(line: 1798, column: 5, scope: !4417)
!4491 = !DILocation(line: 1798, column: 17, scope: !4417)
!4492 = !DILocation(line: 1798, column: 34, scope: !4417)
!4493 = !DILocation(line: 1799, column: 9, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1799, column: 9)
!4495 = !DILocation(line: 1799, column: 23, scope: !4494)
!4496 = !DILocation(line: 1799, column: 9, scope: !4417)
!4497 = !DILocation(line: 1800, column: 9, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1799, column: 29)
!4499 = !DILocation(line: 1800, column: 21, scope: !4498)
!4500 = !DILocation(line: 1800, column: 36, scope: !4498)
!4501 = !DILocation(line: 1801, column: 5, scope: !4498)
!4502 = !DILocation(line: 1803, column: 32, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1801, column: 12)
!4504 = !DILocation(line: 1803, column: 46, scope: !4503)
!4505 = !DILocation(line: 1803, column: 25, scope: !4503)
!4506 = !DILocation(line: 1802, column: 9, scope: !4503)
!4507 = !DILocation(line: 1802, column: 21, scope: !4503)
!4508 = !DILocation(line: 1802, column: 36, scope: !4503)
!4509 = !DILocation(line: 1804, column: 13, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4503, file: !3, line: 1804, column: 13)
!4511 = !DILocation(line: 1804, column: 25, scope: !4510)
!4512 = !DILocation(line: 1804, column: 40, scope: !4510)
!4513 = !DILocation(line: 1804, column: 13, scope: !4503)
!4514 = !DILocation(line: 1805, column: 18, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 1804, column: 49)
!4516 = !DILocation(line: 1805, column: 30, scope: !4515)
!4517 = !DILocation(line: 1805, column: 13, scope: !4515)
!4518 = !DILocation(line: 1806, column: 18, scope: !4515)
!4519 = !DILocation(line: 1806, column: 13, scope: !4515)
!4520 = !DILocation(line: 1807, column: 13, scope: !4515)
!4521 = !DILocation(line: 1809, column: 16, scope: !4503)
!4522 = !DILocation(line: 1809, column: 28, scope: !4503)
!4523 = !DILocation(line: 1809, column: 47, scope: !4503)
!4524 = !DILocation(line: 1809, column: 61, scope: !4503)
!4525 = !DILocation(line: 1809, column: 9, scope: !4503)
!4526 = !DILocation(line: 1813, column: 32, scope: !4417)
!4527 = !DILocation(line: 1813, column: 5, scope: !4417)
!4528 = !DILocation(line: 1813, column: 17, scope: !4417)
!4529 = !DILocation(line: 1813, column: 30, scope: !4417)
!4530 = !DILocation(line: 1814, column: 35, scope: !4417)
!4531 = !DILocation(line: 1814, column: 5, scope: !4417)
!4532 = !DILocation(line: 1814, column: 17, scope: !4417)
!4533 = !DILocation(line: 1814, column: 33, scope: !4417)
!4534 = !DILocation(line: 1815, column: 9, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1815, column: 9)
!4536 = !DILocation(line: 1815, column: 22, scope: !4535)
!4537 = !DILocation(line: 1815, column: 9, scope: !4417)
!4538 = !DILocation(line: 1816, column: 9, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 1815, column: 28)
!4540 = !DILocation(line: 1816, column: 21, scope: !4539)
!4541 = !DILocation(line: 1816, column: 35, scope: !4539)
!4542 = !DILocation(line: 1817, column: 5, scope: !4539)
!4543 = !DILocation(line: 1819, column: 33, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 1817, column: 12)
!4545 = !DILocation(line: 1819, column: 46, scope: !4544)
!4546 = !DILocation(line: 1819, column: 26, scope: !4544)
!4547 = !DILocation(line: 1819, column: 13, scope: !4544)
!4548 = !DILocation(line: 1818, column: 9, scope: !4544)
!4549 = !DILocation(line: 1818, column: 21, scope: !4544)
!4550 = !DILocation(line: 1818, column: 35, scope: !4544)
!4551 = !DILocation(line: 1820, column: 13, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4544, file: !3, line: 1820, column: 13)
!4553 = !DILocation(line: 1820, column: 25, scope: !4552)
!4554 = !DILocation(line: 1820, column: 39, scope: !4552)
!4555 = !DILocation(line: 1820, column: 13, scope: !4544)
!4556 = !DILocation(line: 1821, column: 18, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 1820, column: 48)
!4558 = !DILocation(line: 1821, column: 30, scope: !4557)
!4559 = !DILocation(line: 1821, column: 13, scope: !4557)
!4560 = !DILocation(line: 1822, column: 18, scope: !4557)
!4561 = !DILocation(line: 1822, column: 30, scope: !4557)
!4562 = !DILocation(line: 1822, column: 13, scope: !4557)
!4563 = !DILocation(line: 1823, column: 18, scope: !4557)
!4564 = !DILocation(line: 1823, column: 13, scope: !4557)
!4565 = !DILocation(line: 1824, column: 13, scope: !4557)
!4566 = !DILocation(line: 1826, column: 16, scope: !4544)
!4567 = !DILocation(line: 1826, column: 28, scope: !4544)
!4568 = !DILocation(line: 1826, column: 9, scope: !4544)
!4569 = !DILocation(line: 1826, column: 46, scope: !4544)
!4570 = !DILocation(line: 1826, column: 59, scope: !4544)
!4571 = !DILocation(line: 1830, column: 38, scope: !4417)
!4572 = !DILocation(line: 1830, column: 5, scope: !4417)
!4573 = !DILocation(line: 1830, column: 17, scope: !4417)
!4574 = !DILocation(line: 1830, column: 36, scope: !4417)
!4575 = !DILocation(line: 1831, column: 41, scope: !4417)
!4576 = !DILocation(line: 1831, column: 5, scope: !4417)
!4577 = !DILocation(line: 1831, column: 17, scope: !4417)
!4578 = !DILocation(line: 1831, column: 39, scope: !4417)
!4579 = !DILocation(line: 1832, column: 9, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1832, column: 9)
!4581 = !DILocation(line: 1832, column: 28, scope: !4580)
!4582 = !DILocation(line: 1832, column: 9, scope: !4417)
!4583 = !DILocation(line: 1833, column: 9, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 1832, column: 34)
!4585 = !DILocation(line: 1833, column: 21, scope: !4584)
!4586 = !DILocation(line: 1833, column: 41, scope: !4584)
!4587 = !DILocation(line: 1834, column: 5, scope: !4584)
!4588 = !DILocation(line: 1836, column: 33, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 1834, column: 12)
!4590 = !DILocation(line: 1836, column: 52, scope: !4589)
!4591 = !DILocation(line: 1836, column: 26, scope: !4589)
!4592 = !DILocation(line: 1836, column: 13, scope: !4589)
!4593 = !DILocation(line: 1835, column: 9, scope: !4589)
!4594 = !DILocation(line: 1835, column: 21, scope: !4589)
!4595 = !DILocation(line: 1835, column: 41, scope: !4589)
!4596 = !DILocation(line: 1837, column: 13, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4589, file: !3, line: 1837, column: 13)
!4598 = !DILocation(line: 1837, column: 25, scope: !4597)
!4599 = !DILocation(line: 1837, column: 45, scope: !4597)
!4600 = !DILocation(line: 1837, column: 13, scope: !4589)
!4601 = !DILocation(line: 1838, column: 18, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 1837, column: 54)
!4603 = !DILocation(line: 1838, column: 30, scope: !4602)
!4604 = !DILocation(line: 1838, column: 13, scope: !4602)
!4605 = !DILocation(line: 1839, column: 18, scope: !4602)
!4606 = !DILocation(line: 1839, column: 30, scope: !4602)
!4607 = !DILocation(line: 1839, column: 13, scope: !4602)
!4608 = !DILocation(line: 1840, column: 18, scope: !4602)
!4609 = !DILocation(line: 1840, column: 30, scope: !4602)
!4610 = !DILocation(line: 1840, column: 13, scope: !4602)
!4611 = !DILocation(line: 1841, column: 18, scope: !4602)
!4612 = !DILocation(line: 1841, column: 13, scope: !4602)
!4613 = !DILocation(line: 1842, column: 13, scope: !4602)
!4614 = !DILocation(line: 1844, column: 16, scope: !4589)
!4615 = !DILocation(line: 1844, column: 28, scope: !4589)
!4616 = !DILocation(line: 1844, column: 9, scope: !4589)
!4617 = !DILocation(line: 1845, column: 16, scope: !4589)
!4618 = !DILocation(line: 1845, column: 35, scope: !4589)
!4619 = !DILocation(line: 1848, column: 12, scope: !4417)
!4620 = !DILocation(line: 1848, column: 5, scope: !4417)
!4621 = !DILocation(line: 1849, column: 1, scope: !4417)
!4622 = distinct !DISubprogram(name: "modbus_mapping_new", scope: !3, file: !3, line: 1851, type: !4623, isLocal: false, isDefinition: true, scopeLine: 1853, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4623 = !DISubroutineType(types: !4624)
!4624 = !{!48, !44, !44, !44, !44}
!4625 = !DILocalVariable(name: "nb_bits", arg: 1, scope: !4622, file: !3, line: 1851, type: !44)
!4626 = !DILocation(line: 1851, column: 42, scope: !4622)
!4627 = !DILocalVariable(name: "nb_input_bits", arg: 2, scope: !4622, file: !3, line: 1851, type: !44)
!4628 = !DILocation(line: 1851, column: 55, scope: !4622)
!4629 = !DILocalVariable(name: "nb_registers", arg: 3, scope: !4622, file: !3, line: 1852, type: !44)
!4630 = !DILocation(line: 1852, column: 42, scope: !4622)
!4631 = !DILocalVariable(name: "nb_input_registers", arg: 4, scope: !4622, file: !3, line: 1852, type: !44)
!4632 = !DILocation(line: 1852, column: 60, scope: !4622)
!4633 = !DILocation(line: 1855, column: 12, scope: !4622)
!4634 = !DILocation(line: 1855, column: 24, scope: !4622)
!4635 = !DILocation(line: 1855, column: 42, scope: !4622)
!4636 = !DILocation(line: 1855, column: 59, scope: !4622)
!4637 = !DILocation(line: 1854, column: 12, scope: !4622)
!4638 = !DILocation(line: 1854, column: 5, scope: !4622)
!4639 = distinct !DISubprogram(name: "modbus_mapping_free", scope: !3, file: !3, line: 1859, type: !4640, isLocal: false, isDefinition: true, scopeLine: 1860, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4640 = !DISubroutineType(types: !4641)
!4641 = !{null, !48}
!4642 = !DILocalVariable(name: "mb_mapping", arg: 1, scope: !4639, file: !3, line: 1859, type: !48)
!4643 = !DILocation(line: 1859, column: 44, scope: !4639)
!4644 = !DILocation(line: 1861, column: 9, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4639, file: !3, line: 1861, column: 9)
!4646 = !DILocation(line: 1861, column: 20, scope: !4645)
!4647 = !DILocation(line: 1861, column: 9, scope: !4639)
!4648 = !DILocation(line: 1862, column: 9, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 1861, column: 29)
!4650 = !DILocation(line: 1865, column: 10, scope: !4639)
!4651 = !DILocation(line: 1865, column: 22, scope: !4639)
!4652 = !DILocation(line: 1865, column: 5, scope: !4639)
!4653 = !DILocation(line: 1866, column: 10, scope: !4639)
!4654 = !DILocation(line: 1866, column: 22, scope: !4639)
!4655 = !DILocation(line: 1866, column: 5, scope: !4639)
!4656 = !DILocation(line: 1867, column: 10, scope: !4639)
!4657 = !DILocation(line: 1867, column: 22, scope: !4639)
!4658 = !DILocation(line: 1867, column: 5, scope: !4639)
!4659 = !DILocation(line: 1868, column: 10, scope: !4639)
!4660 = !DILocation(line: 1868, column: 22, scope: !4639)
!4661 = !DILocation(line: 1868, column: 5, scope: !4639)
!4662 = !DILocation(line: 1869, column: 10, scope: !4639)
!4663 = !DILocation(line: 1869, column: 5, scope: !4639)
!4664 = !DILocation(line: 1870, column: 1, scope: !4639)
!4665 = distinct !DISubprogram(name: "strlcpy", scope: !3, file: !3, line: 1885, type: !4666, isLocal: false, isDefinition: true, scopeLine: 1886, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !440)
!4666 = !DISubroutineType(types: !4667)
!4667 = !{!4668, !87, !431, !4669}
!4668 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!4669 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !4670, line: 62, baseType: !4668)
!4670 = !DIFile(filename: "/usr/local/lib/clang/5.0.0/include/stddef.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!4671 = !DILocalVariable(name: "dest", arg: 1, scope: !4665, file: !3, line: 1885, type: !87)
!4672 = !DILocation(line: 1885, column: 22, scope: !4665)
!4673 = !DILocalVariable(name: "src", arg: 2, scope: !4665, file: !3, line: 1885, type: !431)
!4674 = !DILocation(line: 1885, column: 40, scope: !4665)
!4675 = !DILocalVariable(name: "dest_size", arg: 3, scope: !4665, file: !3, line: 1885, type: !4669)
!4676 = !DILocation(line: 1885, column: 52, scope: !4665)
!4677 = !DILocalVariable(name: "d", scope: !4665, file: !3, line: 1887, type: !87)
!4678 = !DILocation(line: 1887, column: 20, scope: !4665)
!4679 = !DILocation(line: 1887, column: 24, scope: !4665)
!4680 = !DILocalVariable(name: "s", scope: !4665, file: !3, line: 1888, type: !431)
!4681 = !DILocation(line: 1888, column: 26, scope: !4665)
!4682 = !DILocation(line: 1888, column: 30, scope: !4665)
!4683 = !DILocalVariable(name: "n", scope: !4665, file: !3, line: 1889, type: !4669)
!4684 = !DILocation(line: 1889, column: 21, scope: !4665)
!4685 = !DILocation(line: 1889, column: 25, scope: !4665)
!4686 = !DILocation(line: 1892, column: 9, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 1892, column: 9)
!4688 = !DILocation(line: 1892, column: 11, scope: !4687)
!4689 = !DILocation(line: 1892, column: 16, scope: !4687)
!4690 = !DILocation(line: 1892, column: 19, scope: !4687)
!4691 = !DILocation(line: 1892, column: 23, scope: !4687)
!4692 = !DILocation(line: 1892, column: 9, scope: !4665)
!4693 = !DILocation(line: 1893, column: 9, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1892, column: 29)
!4695 = distinct !{!4695, !4693, !4696}
!4696 = !DILocation(line: 1896, column: 26, scope: !4694)
!4697 = !DILocation(line: 1894, column: 27, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 1894, column: 17)
!4699 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 1893, column: 12)
!4700 = !DILocation(line: 1894, column: 25, scope: !4698)
!4701 = !DILocation(line: 1894, column: 20, scope: !4698)
!4702 = !DILocation(line: 1894, column: 23, scope: !4698)
!4703 = !DILocation(line: 1894, column: 17, scope: !4698)
!4704 = !DILocation(line: 1894, column: 31, scope: !4698)
!4705 = !DILocation(line: 1894, column: 17, scope: !4699)
!4706 = !DILocation(line: 1895, column: 17, scope: !4698)
!4707 = !DILocation(line: 1896, column: 9, scope: !4699)
!4708 = !DILocation(line: 1896, column: 18, scope: !4694)
!4709 = !DILocation(line: 1896, column: 22, scope: !4694)
!4710 = !DILocation(line: 1897, column: 5, scope: !4694)
!4711 = !DILocation(line: 1900, column: 9, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 1900, column: 9)
!4713 = !DILocation(line: 1900, column: 11, scope: !4712)
!4714 = !DILocation(line: 1900, column: 9, scope: !4665)
!4715 = !DILocation(line: 1901, column: 13, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4717, file: !3, line: 1901, column: 13)
!4717 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 1900, column: 17)
!4718 = !DILocation(line: 1901, column: 23, scope: !4716)
!4719 = !DILocation(line: 1901, column: 13, scope: !4717)
!4720 = !DILocation(line: 1902, column: 14, scope: !4716)
!4721 = !DILocation(line: 1902, column: 16, scope: !4716)
!4722 = !DILocation(line: 1902, column: 13, scope: !4716)
!4723 = !DILocation(line: 1903, column: 9, scope: !4717)
!4724 = !DILocation(line: 1903, column: 18, scope: !4717)
!4725 = !DILocation(line: 1903, column: 16, scope: !4717)
!4726 = distinct !{!4726, !4723, !4727}
!4727 = !DILocation(line: 1904, column: 13, scope: !4717)
!4728 = !DILocation(line: 1905, column: 5, scope: !4717)
!4729 = !DILocation(line: 1907, column: 13, scope: !4665)
!4730 = !DILocation(line: 1907, column: 17, scope: !4665)
!4731 = !DILocation(line: 1907, column: 15, scope: !4665)
!4732 = !DILocation(line: 1907, column: 21, scope: !4665)
!4733 = !DILocation(line: 1907, column: 5, scope: !4665)
!4734 = distinct !DISubprogram(name: "modbus_set_bits_from_byte", scope: !439, file: !439, line: 75, type: !4735, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4735 = !DISubroutineType(types: !4736)
!4736 = !{null, !61, !44, !172}
!4737 = !DILocalVariable(name: "dest", arg: 1, scope: !4734, file: !439, line: 75, type: !61)
!4738 = !DILocation(line: 75, column: 41, scope: !4734)
!4739 = !DILocalVariable(name: "idx", arg: 2, scope: !4734, file: !439, line: 75, type: !44)
!4740 = !DILocation(line: 75, column: 51, scope: !4734)
!4741 = !DILocalVariable(name: "value", arg: 3, scope: !4734, file: !439, line: 75, type: !172)
!4742 = !DILocation(line: 75, column: 70, scope: !4734)
!4743 = !DILocalVariable(name: "i", scope: !4734, file: !439, line: 77, type: !44)
!4744 = !DILocation(line: 77, column: 9, scope: !4734)
!4745 = !DILocation(line: 79, column: 11, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4734, file: !439, line: 79, column: 5)
!4747 = !DILocation(line: 79, column: 10, scope: !4746)
!4748 = !DILocation(line: 79, column: 15, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4746, file: !439, line: 79, column: 5)
!4750 = !DILocation(line: 79, column: 17, scope: !4749)
!4751 = !DILocation(line: 79, column: 5, scope: !4746)
!4752 = !DILocation(line: 80, column: 24, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4749, file: !439, line: 79, column: 27)
!4754 = !DILocation(line: 80, column: 38, scope: !4753)
!4755 = !DILocation(line: 80, column: 35, scope: !4753)
!4756 = !DILocation(line: 80, column: 30, scope: !4753)
!4757 = !DILocation(line: 80, column: 23, scope: !4753)
!4758 = !DILocation(line: 80, column: 9, scope: !4753)
!4759 = !DILocation(line: 80, column: 14, scope: !4753)
!4760 = !DILocation(line: 80, column: 18, scope: !4753)
!4761 = !DILocation(line: 80, column: 17, scope: !4753)
!4762 = !DILocation(line: 80, column: 21, scope: !4753)
!4763 = !DILocation(line: 81, column: 5, scope: !4753)
!4764 = !DILocation(line: 79, column: 23, scope: !4749)
!4765 = !DILocation(line: 79, column: 5, scope: !4749)
!4766 = distinct !{!4766, !4751, !4767}
!4767 = !DILocation(line: 81, column: 5, scope: !4746)
!4768 = !DILocation(line: 82, column: 1, scope: !4734)
!4769 = distinct !DISubprogram(name: "modbus_set_bits_from_bytes", scope: !439, file: !439, line: 86, type: !4770, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4770 = !DISubroutineType(types: !4771)
!4771 = !{null, !61, !44, !72, !171}
!4772 = !DILocalVariable(name: "dest", arg: 1, scope: !4769, file: !439, line: 86, type: !61)
!4773 = !DILocation(line: 86, column: 42, scope: !4769)
!4774 = !DILocalVariable(name: "idx", arg: 2, scope: !4769, file: !439, line: 86, type: !44)
!4775 = !DILocation(line: 86, column: 52, scope: !4769)
!4776 = !DILocalVariable(name: "nb_bits", arg: 3, scope: !4769, file: !439, line: 86, type: !72)
!4777 = !DILocation(line: 86, column: 70, scope: !4769)
!4778 = !DILocalVariable(name: "tab_byte", arg: 4, scope: !4769, file: !439, line: 87, type: !171)
!4779 = !DILocation(line: 87, column: 48, scope: !4769)
!4780 = !DILocalVariable(name: "i", scope: !4769, file: !439, line: 89, type: !72)
!4781 = !DILocation(line: 89, column: 18, scope: !4769)
!4782 = !DILocalVariable(name: "shift", scope: !4769, file: !439, line: 90, type: !44)
!4783 = !DILocation(line: 90, column: 9, scope: !4769)
!4784 = !DILocation(line: 92, column: 14, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4769, file: !439, line: 92, column: 5)
!4786 = !DILocation(line: 92, column: 12, scope: !4785)
!4787 = !DILocation(line: 92, column: 10, scope: !4785)
!4788 = !DILocation(line: 92, column: 19, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4785, file: !439, line: 92, column: 5)
!4790 = !DILocation(line: 92, column: 23, scope: !4789)
!4791 = !DILocation(line: 92, column: 29, scope: !4789)
!4792 = !DILocation(line: 92, column: 27, scope: !4789)
!4793 = !DILocation(line: 92, column: 21, scope: !4789)
!4794 = !DILocation(line: 92, column: 5, scope: !4785)
!4795 = !DILocation(line: 93, column: 19, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4789, file: !439, line: 92, column: 43)
!4797 = !DILocation(line: 93, column: 29, scope: !4796)
!4798 = !DILocation(line: 93, column: 33, scope: !4796)
!4799 = !DILocation(line: 93, column: 31, scope: !4796)
!4800 = !DILocation(line: 93, column: 38, scope: !4796)
!4801 = !DILocation(line: 93, column: 51, scope: !4796)
!4802 = !DILocation(line: 93, column: 48, scope: !4796)
!4803 = !DILocation(line: 93, column: 43, scope: !4796)
!4804 = !DILocation(line: 93, column: 9, scope: !4796)
!4805 = !DILocation(line: 93, column: 14, scope: !4796)
!4806 = !DILocation(line: 93, column: 17, scope: !4796)
!4807 = !DILocation(line: 95, column: 14, scope: !4796)
!4808 = !DILocation(line: 96, column: 15, scope: !4796)
!4809 = !DILocation(line: 97, column: 5, scope: !4796)
!4810 = !DILocation(line: 92, column: 39, scope: !4789)
!4811 = !DILocation(line: 92, column: 5, scope: !4789)
!4812 = distinct !{!4812, !4794, !4813}
!4813 = !DILocation(line: 97, column: 5, scope: !4785)
!4814 = !DILocation(line: 98, column: 1, scope: !4769)
!4815 = distinct !DISubprogram(name: "modbus_get_byte_from_bits", scope: !439, file: !439, line: 102, type: !4816, isLocal: false, isDefinition: true, scopeLine: 104, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4816 = !DISubroutineType(types: !4817)
!4817 = !{!45, !171, !44, !72}
!4818 = !DILocalVariable(name: "src", arg: 1, scope: !4815, file: !439, line: 102, type: !171)
!4819 = !DILocation(line: 102, column: 50, scope: !4815)
!4820 = !DILocalVariable(name: "idx", arg: 2, scope: !4815, file: !439, line: 102, type: !44)
!4821 = !DILocation(line: 102, column: 59, scope: !4815)
!4822 = !DILocalVariable(name: "nb_bits", arg: 3, scope: !4815, file: !439, line: 103, type: !72)
!4823 = !DILocation(line: 103, column: 48, scope: !4815)
!4824 = !DILocalVariable(name: "i", scope: !4815, file: !439, line: 105, type: !72)
!4825 = !DILocation(line: 105, column: 18, scope: !4815)
!4826 = !DILocalVariable(name: "value", scope: !4815, file: !439, line: 106, type: !45)
!4827 = !DILocation(line: 106, column: 13, scope: !4815)
!4828 = !DILocation(line: 108, column: 9, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4815, file: !439, line: 108, column: 9)
!4830 = !DILocation(line: 108, column: 17, scope: !4829)
!4831 = !DILocation(line: 108, column: 9, scope: !4815)
!4832 = !DILocation(line: 110, column: 9, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4829, file: !439, line: 108, column: 22)
!4834 = !DILocation(line: 111, column: 17, scope: !4833)
!4835 = !DILocation(line: 112, column: 5, scope: !4833)
!4836 = !DILocation(line: 114, column: 11, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4815, file: !439, line: 114, column: 5)
!4838 = !DILocation(line: 114, column: 10, scope: !4837)
!4839 = !DILocation(line: 114, column: 15, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4837, file: !439, line: 114, column: 5)
!4841 = !DILocation(line: 114, column: 19, scope: !4840)
!4842 = !DILocation(line: 114, column: 17, scope: !4840)
!4843 = !DILocation(line: 114, column: 5, scope: !4837)
!4844 = !DILocation(line: 115, column: 19, scope: !4845)
!4845 = distinct !DILexicalBlock(scope: !4840, file: !439, line: 114, column: 33)
!4846 = !DILocation(line: 115, column: 23, scope: !4845)
!4847 = !DILocation(line: 115, column: 27, scope: !4845)
!4848 = !DILocation(line: 115, column: 26, scope: !4845)
!4849 = !DILocation(line: 115, column: 33, scope: !4845)
!4850 = !DILocation(line: 115, column: 30, scope: !4845)
!4851 = !DILocation(line: 115, column: 15, scope: !4845)
!4852 = !DILocation(line: 116, column: 5, scope: !4845)
!4853 = !DILocation(line: 114, column: 29, scope: !4840)
!4854 = !DILocation(line: 114, column: 5, scope: !4840)
!4855 = distinct !{!4855, !4843, !4856}
!4856 = !DILocation(line: 116, column: 5, scope: !4837)
!4857 = !DILocation(line: 118, column: 12, scope: !4815)
!4858 = !DILocation(line: 118, column: 5, scope: !4815)
!4859 = distinct !DISubprogram(name: "modbus_get_float_abcd", scope: !439, file: !439, line: 122, type: !4860, isLocal: false, isDefinition: true, scopeLine: 123, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4860 = !DISubroutineType(types: !4861)
!4861 = !{!4862, !3554}
!4862 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!4863 = !DILocalVariable(name: "src", arg: 1, scope: !4859, file: !439, line: 122, type: !3554)
!4864 = !DILocation(line: 122, column: 45, scope: !4859)
!4865 = !DILocalVariable(name: "f", scope: !4859, file: !439, line: 124, type: !4862)
!4866 = !DILocation(line: 124, column: 11, scope: !4859)
!4867 = !DILocalVariable(name: "i", scope: !4859, file: !439, line: 125, type: !312)
!4868 = !DILocation(line: 125, column: 14, scope: !4859)
!4869 = !DILocation(line: 127, column: 26, scope: !4859)
!4870 = !DILocation(line: 127, column: 16, scope: !4859)
!4871 = !DILocation(line: 127, column: 33, scope: !4859)
!4872 = !DILocation(line: 127, column: 42, scope: !4859)
!4873 = !DILocation(line: 127, column: 40, scope: !4859)
!4874 = !DILocation(line: 127, column: 9, scope: !4859)
!4875 = !DILocation(line: 127, column: 7, scope: !4859)
!4876 = !DILocation(line: 128, column: 5, scope: !4859)
!4877 = !DILocation(line: 130, column: 12, scope: !4859)
!4878 = !DILocation(line: 130, column: 5, scope: !4859)
!4879 = distinct !DISubprogram(name: "modbus_get_float_dcba", scope: !439, file: !439, line: 134, type: !4860, isLocal: false, isDefinition: true, scopeLine: 135, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4880 = !DILocalVariable(name: "src", arg: 1, scope: !4879, file: !439, line: 134, type: !3554)
!4881 = !DILocation(line: 134, column: 45, scope: !4879)
!4882 = !DILocalVariable(name: "f", scope: !4879, file: !439, line: 136, type: !4862)
!4883 = !DILocation(line: 136, column: 11, scope: !4879)
!4884 = !DILocalVariable(name: "i", scope: !4879, file: !439, line: 137, type: !312)
!4885 = !DILocation(line: 137, column: 14, scope: !4879)
!4886 = !DILocalVariable(name: "__v", scope: !4887, file: !439, line: 139, type: !72)
!4887 = distinct !DILexicalBlock(scope: !4879, file: !439, line: 139, column: 15)
!4888 = !DILocation(line: 139, column: 15, scope: !4887)
!4889 = !DILocalVariable(name: "__x", scope: !4887, file: !439, line: 139, type: !72)
!4890 = !DILocation(line: 139, column: 15, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4887, file: !439, line: 139, column: 15)
!4892 = !{i32 -2146942119}
!4893 = !DILocation(line: 139, column: 9, scope: !4879)
!4894 = !DILocation(line: 139, column: 7, scope: !4879)
!4895 = !DILocation(line: 140, column: 5, scope: !4879)
!4896 = !DILocation(line: 142, column: 12, scope: !4879)
!4897 = !DILocation(line: 142, column: 5, scope: !4879)
!4898 = distinct !DISubprogram(name: "modbus_get_float_badc", scope: !439, file: !439, line: 146, type: !4860, isLocal: false, isDefinition: true, scopeLine: 147, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4899 = !DILocalVariable(name: "src", arg: 1, scope: !4898, file: !439, line: 146, type: !3554)
!4900 = !DILocation(line: 146, column: 45, scope: !4898)
!4901 = !DILocalVariable(name: "f", scope: !4898, file: !439, line: 148, type: !4862)
!4902 = !DILocation(line: 148, column: 11, scope: !4898)
!4903 = !DILocalVariable(name: "i", scope: !4898, file: !439, line: 149, type: !312)
!4904 = !DILocation(line: 149, column: 14, scope: !4898)
!4905 = !DILocalVariable(name: "__v", scope: !4906, file: !439, line: 151, type: !66)
!4906 = distinct !DILexicalBlock(scope: !4898, file: !439, line: 151, column: 26)
!4907 = !DILocation(line: 151, column: 26, scope: !4906)
!4908 = !DILocalVariable(name: "__x", scope: !4906, file: !439, line: 151, type: !66)
!4909 = !DILocation(line: 151, column: 26, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4906, file: !439, line: 151, column: 26)
!4911 = !{i32 -2146941625}
!4912 = !DILocation(line: 151, column: 26, scope: !4898)
!4913 = !DILocation(line: 151, column: 43, scope: !4898)
!4914 = !DILocalVariable(name: "__v", scope: !4915, file: !439, line: 151, type: !66)
!4915 = distinct !DILexicalBlock(scope: !4898, file: !439, line: 151, column: 52)
!4916 = !DILocation(line: 151, column: 52, scope: !4915)
!4917 = !DILocalVariable(name: "__x", scope: !4915, file: !439, line: 151, type: !66)
!4918 = !DILocation(line: 151, column: 52, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4915, file: !439, line: 151, column: 52)
!4920 = !{i32 -2146941163}
!4921 = !DILocation(line: 151, column: 52, scope: !4898)
!4922 = !DILocation(line: 151, column: 50, scope: !4898)
!4923 = !DILocation(line: 151, column: 9, scope: !4898)
!4924 = !DILocation(line: 151, column: 7, scope: !4898)
!4925 = !DILocation(line: 152, column: 5, scope: !4898)
!4926 = !DILocation(line: 154, column: 12, scope: !4898)
!4927 = !DILocation(line: 154, column: 5, scope: !4898)
!4928 = distinct !DISubprogram(name: "modbus_get_float_cdab", scope: !439, file: !439, line: 158, type: !4860, isLocal: false, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4929 = !DILocalVariable(name: "src", arg: 1, scope: !4928, file: !439, line: 158, type: !3554)
!4930 = !DILocation(line: 158, column: 45, scope: !4928)
!4931 = !DILocalVariable(name: "f", scope: !4928, file: !439, line: 160, type: !4862)
!4932 = !DILocation(line: 160, column: 11, scope: !4928)
!4933 = !DILocalVariable(name: "i", scope: !4928, file: !439, line: 161, type: !312)
!4934 = !DILocation(line: 161, column: 14, scope: !4928)
!4935 = !DILocation(line: 163, column: 27, scope: !4928)
!4936 = !DILocation(line: 163, column: 17, scope: !4928)
!4937 = !DILocation(line: 163, column: 35, scope: !4928)
!4938 = !DILocation(line: 163, column: 44, scope: !4928)
!4939 = !DILocation(line: 163, column: 42, scope: !4928)
!4940 = !DILocation(line: 163, column: 9, scope: !4928)
!4941 = !DILocation(line: 163, column: 7, scope: !4928)
!4942 = !DILocation(line: 164, column: 5, scope: !4928)
!4943 = !DILocation(line: 166, column: 12, scope: !4928)
!4944 = !DILocation(line: 166, column: 5, scope: !4928)
!4945 = distinct !DISubprogram(name: "modbus_get_float", scope: !439, file: !439, line: 170, type: !4860, isLocal: false, isDefinition: true, scopeLine: 171, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4946 = !DILocalVariable(name: "src", arg: 1, scope: !4945, file: !439, line: 170, type: !3554)
!4947 = !DILocation(line: 170, column: 40, scope: !4945)
!4948 = !DILocalVariable(name: "f", scope: !4945, file: !439, line: 172, type: !4862)
!4949 = !DILocation(line: 172, column: 11, scope: !4945)
!4950 = !DILocalVariable(name: "i", scope: !4945, file: !439, line: 173, type: !312)
!4951 = !DILocation(line: 173, column: 14, scope: !4945)
!4952 = !DILocation(line: 175, column: 21, scope: !4945)
!4953 = !DILocation(line: 175, column: 11, scope: !4945)
!4954 = !DILocation(line: 175, column: 29, scope: !4945)
!4955 = !DILocation(line: 175, column: 38, scope: !4945)
!4956 = !DILocation(line: 175, column: 36, scope: !4945)
!4957 = !DILocation(line: 175, column: 7, scope: !4945)
!4958 = !DILocation(line: 176, column: 5, scope: !4945)
!4959 = !DILocation(line: 178, column: 12, scope: !4945)
!4960 = !DILocation(line: 178, column: 5, scope: !4945)
!4961 = distinct !DISubprogram(name: "modbus_set_float_abcd", scope: !439, file: !439, line: 182, type: !4962, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4962 = !DISubroutineType(types: !4963)
!4963 = !{null, !4862, !64}
!4964 = !DILocalVariable(name: "f", arg: 1, scope: !4961, file: !439, line: 182, type: !4862)
!4965 = !DILocation(line: 182, column: 34, scope: !4961)
!4966 = !DILocalVariable(name: "dest", arg: 2, scope: !4961, file: !439, line: 182, type: !64)
!4967 = !DILocation(line: 182, column: 47, scope: !4961)
!4968 = !DILocalVariable(name: "i", scope: !4961, file: !439, line: 184, type: !312)
!4969 = !DILocation(line: 184, column: 14, scope: !4961)
!4970 = !DILocation(line: 186, column: 5, scope: !4961)
!4971 = !DILocation(line: 187, column: 15, scope: !4961)
!4972 = !DILocation(line: 187, column: 9, scope: !4961)
!4973 = !DILocation(line: 187, column: 7, scope: !4961)
!4974 = !DILocation(line: 188, column: 26, scope: !4961)
!4975 = !DILocation(line: 188, column: 28, scope: !4961)
!4976 = !DILocation(line: 188, column: 15, scope: !4961)
!4977 = !DILocation(line: 188, column: 5, scope: !4961)
!4978 = !DILocation(line: 188, column: 13, scope: !4961)
!4979 = !DILocation(line: 189, column: 25, scope: !4961)
!4980 = !DILocation(line: 189, column: 15, scope: !4961)
!4981 = !DILocation(line: 189, column: 5, scope: !4961)
!4982 = !DILocation(line: 189, column: 13, scope: !4961)
!4983 = !DILocation(line: 190, column: 1, scope: !4961)
!4984 = distinct !DISubprogram(name: "modbus_set_float_dcba", scope: !439, file: !439, line: 193, type: !4962, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!4985 = !DILocalVariable(name: "f", arg: 1, scope: !4984, file: !439, line: 193, type: !4862)
!4986 = !DILocation(line: 193, column: 34, scope: !4984)
!4987 = !DILocalVariable(name: "dest", arg: 2, scope: !4984, file: !439, line: 193, type: !64)
!4988 = !DILocation(line: 193, column: 47, scope: !4984)
!4989 = !DILocalVariable(name: "i", scope: !4984, file: !439, line: 195, type: !312)
!4990 = !DILocation(line: 195, column: 14, scope: !4984)
!4991 = !DILocation(line: 197, column: 5, scope: !4984)
!4992 = !DILocalVariable(name: "__v", scope: !4993, file: !439, line: 198, type: !72)
!4993 = distinct !DILexicalBlock(scope: !4984, file: !439, line: 198, column: 9)
!4994 = !DILocation(line: 198, column: 9, scope: !4993)
!4995 = !DILocalVariable(name: "__x", scope: !4993, file: !439, line: 198, type: !72)
!4996 = !DILocation(line: 198, column: 9, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4993, file: !439, line: 198, column: 9)
!4998 = !{i32 -2146940717}
!4999 = !DILocation(line: 198, column: 7, scope: !4984)
!5000 = !DILocation(line: 199, column: 26, scope: !4984)
!5001 = !DILocation(line: 199, column: 28, scope: !4984)
!5002 = !DILocation(line: 199, column: 15, scope: !4984)
!5003 = !DILocation(line: 199, column: 5, scope: !4984)
!5004 = !DILocation(line: 199, column: 13, scope: !4984)
!5005 = !DILocation(line: 200, column: 25, scope: !4984)
!5006 = !DILocation(line: 200, column: 15, scope: !4984)
!5007 = !DILocation(line: 200, column: 5, scope: !4984)
!5008 = !DILocation(line: 200, column: 13, scope: !4984)
!5009 = !DILocation(line: 201, column: 1, scope: !4984)
!5010 = distinct !DISubprogram(name: "modbus_set_float_badc", scope: !439, file: !439, line: 204, type: !4962, isLocal: false, isDefinition: true, scopeLine: 205, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!5011 = !DILocalVariable(name: "f", arg: 1, scope: !5010, file: !439, line: 204, type: !4862)
!5012 = !DILocation(line: 204, column: 34, scope: !5010)
!5013 = !DILocalVariable(name: "dest", arg: 2, scope: !5010, file: !439, line: 204, type: !64)
!5014 = !DILocation(line: 204, column: 47, scope: !5010)
!5015 = !DILocalVariable(name: "i", scope: !5010, file: !439, line: 206, type: !312)
!5016 = !DILocation(line: 206, column: 14, scope: !5010)
!5017 = !DILocation(line: 208, column: 5, scope: !5010)
!5018 = !DILocation(line: 209, column: 15, scope: !5010)
!5019 = !DILocation(line: 209, column: 9, scope: !5010)
!5020 = !DILocation(line: 209, column: 7, scope: !5010)
!5021 = !DILocalVariable(name: "__v", scope: !5022, file: !439, line: 210, type: !66)
!5022 = distinct !DILexicalBlock(scope: !5010, file: !439, line: 210, column: 25)
!5023 = !DILocation(line: 210, column: 25, scope: !5022)
!5024 = !DILocalVariable(name: "__x", scope: !5022, file: !439, line: 210, type: !66)
!5025 = !DILocation(line: 210, column: 25, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !439, line: 210, column: 25)
!5027 = !{i32 -2146940249}
!5028 = !DILocation(line: 210, column: 5, scope: !5010)
!5029 = !DILocation(line: 210, column: 13, scope: !5010)
!5030 = !DILocalVariable(name: "__v", scope: !5031, file: !439, line: 211, type: !66)
!5031 = distinct !DILexicalBlock(scope: !5010, file: !439, line: 211, column: 25)
!5032 = !DILocation(line: 211, column: 25, scope: !5031)
!5033 = !DILocalVariable(name: "__x", scope: !5031, file: !439, line: 211, type: !66)
!5034 = !DILocation(line: 211, column: 25, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5031, file: !439, line: 211, column: 25)
!5036 = !{i32 -2146939782}
!5037 = !DILocation(line: 211, column: 5, scope: !5010)
!5038 = !DILocation(line: 211, column: 13, scope: !5010)
!5039 = !DILocation(line: 212, column: 1, scope: !5010)
!5040 = distinct !DISubprogram(name: "modbus_set_float_cdab", scope: !439, file: !439, line: 215, type: !4962, isLocal: false, isDefinition: true, scopeLine: 216, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!5041 = !DILocalVariable(name: "f", arg: 1, scope: !5040, file: !439, line: 215, type: !4862)
!5042 = !DILocation(line: 215, column: 34, scope: !5040)
!5043 = !DILocalVariable(name: "dest", arg: 2, scope: !5040, file: !439, line: 215, type: !64)
!5044 = !DILocation(line: 215, column: 47, scope: !5040)
!5045 = !DILocalVariable(name: "i", scope: !5040, file: !439, line: 217, type: !312)
!5046 = !DILocation(line: 217, column: 14, scope: !5040)
!5047 = !DILocation(line: 219, column: 5, scope: !5040)
!5048 = !DILocation(line: 220, column: 15, scope: !5040)
!5049 = !DILocation(line: 220, column: 9, scope: !5040)
!5050 = !DILocation(line: 220, column: 7, scope: !5040)
!5051 = !DILocation(line: 221, column: 25, scope: !5040)
!5052 = !DILocation(line: 221, column: 15, scope: !5040)
!5053 = !DILocation(line: 221, column: 5, scope: !5040)
!5054 = !DILocation(line: 221, column: 13, scope: !5040)
!5055 = !DILocation(line: 222, column: 26, scope: !5040)
!5056 = !DILocation(line: 222, column: 28, scope: !5040)
!5057 = !DILocation(line: 222, column: 15, scope: !5040)
!5058 = !DILocation(line: 222, column: 5, scope: !5040)
!5059 = !DILocation(line: 222, column: 13, scope: !5040)
!5060 = !DILocation(line: 223, column: 1, scope: !5040)
!5061 = distinct !DISubprogram(name: "modbus_set_float", scope: !439, file: !439, line: 226, type: !4962, isLocal: false, isDefinition: true, scopeLine: 227, flags: DIFlagPrototyped, isOptimized: false, unit: !438, variables: !440)
!5062 = !DILocalVariable(name: "f", arg: 1, scope: !5061, file: !439, line: 226, type: !4862)
!5063 = !DILocation(line: 226, column: 29, scope: !5061)
!5064 = !DILocalVariable(name: "dest", arg: 2, scope: !5061, file: !439, line: 226, type: !64)
!5065 = !DILocation(line: 226, column: 42, scope: !5061)
!5066 = !DILocalVariable(name: "i", scope: !5061, file: !439, line: 228, type: !312)
!5067 = !DILocation(line: 228, column: 14, scope: !5061)
!5068 = !DILocation(line: 230, column: 5, scope: !5061)
!5069 = !DILocation(line: 231, column: 25, scope: !5061)
!5070 = !DILocation(line: 231, column: 15, scope: !5061)
!5071 = !DILocation(line: 231, column: 5, scope: !5061)
!5072 = !DILocation(line: 231, column: 13, scope: !5061)
!5073 = !DILocation(line: 232, column: 26, scope: !5061)
!5074 = !DILocation(line: 232, column: 28, scope: !5061)
!5075 = !DILocation(line: 232, column: 15, scope: !5061)
!5076 = !DILocation(line: 232, column: 5, scope: !5061)
!5077 = !DILocation(line: 232, column: 13, scope: !5061)
!5078 = !DILocation(line: 233, column: 1, scope: !5061)
!5079 = distinct !DISubprogram(name: "modbus_rtu_set_serial_mode", scope: !78, file: !78, line: 901, type: !150, isLocal: false, isDefinition: true, scopeLine: 902, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5080 = !DILocalVariable(name: "ctx", arg: 1, scope: !5079, file: !78, line: 901, type: !119)
!5081 = !DILocation(line: 901, column: 42, scope: !5079)
!5082 = !DILocalVariable(name: "mode", arg: 2, scope: !5079, file: !78, line: 901, type: !44)
!5083 = !DILocation(line: 901, column: 51, scope: !5079)
!5084 = !DILocation(line: 903, column: 9, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5079, file: !78, line: 903, column: 9)
!5086 = !DILocation(line: 903, column: 13, scope: !5085)
!5087 = !DILocation(line: 903, column: 9, scope: !5079)
!5088 = !DILocation(line: 904, column: 9, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !5085, file: !78, line: 903, column: 22)
!5090 = !DILocation(line: 904, column: 15, scope: !5089)
!5091 = !DILocation(line: 905, column: 9, scope: !5089)
!5092 = !DILocation(line: 908, column: 9, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5079, file: !78, line: 908, column: 9)
!5094 = !DILocation(line: 908, column: 14, scope: !5093)
!5095 = !DILocation(line: 908, column: 23, scope: !5093)
!5096 = !DILocation(line: 908, column: 36, scope: !5093)
!5097 = !DILocation(line: 908, column: 9, scope: !5079)
!5098 = !DILocalVariable(name: "ctx_rtu", scope: !5099, file: !78, line: 910, type: !81)
!5099 = distinct !DILexicalBlock(scope: !5093, file: !78, line: 908, column: 65)
!5100 = !DILocation(line: 910, column: 23, scope: !5099)
!5101 = !DILocation(line: 910, column: 33, scope: !5099)
!5102 = !DILocation(line: 910, column: 38, scope: !5099)
!5103 = !DILocalVariable(name: "rs485conf", scope: !5099, file: !78, line: 911, type: !5104)
!5104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "serial_rs485", file: !5105, line: 115, size: 256, elements: !5106)
!5105 = !DIFile(filename: "/usr/include/linux/serial.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!5106 = !{!5107, !5110, !5111, !5112}
!5107 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5104, file: !5105, line: 116, baseType: !5108, size: 32)
!5108 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u32", file: !5109, line: 26, baseType: !72)
!5109 = !DIFile(filename: "/usr/include/asm-generic/int-ll64.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!5110 = !DIDerivedType(tag: DW_TAG_member, name: "delay_rts_before_send", scope: !5104, file: !5105, line: 124, baseType: !5108, size: 32, offset: 32)
!5111 = !DIDerivedType(tag: DW_TAG_member, name: "delay_rts_after_send", scope: !5104, file: !5105, line: 125, baseType: !5108, size: 32, offset: 64)
!5112 = !DIDerivedType(tag: DW_TAG_member, name: "padding", scope: !5104, file: !5105, line: 126, baseType: !5113, size: 160, offset: 96)
!5113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5108, size: 160, elements: !5114)
!5114 = !{!5115}
!5115 = !DISubrange(count: 5)
!5116 = !DILocation(line: 911, column: 29, scope: !5099)
!5117 = !DILocation(line: 913, column: 13, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5099, file: !78, line: 913, column: 13)
!5119 = !DILocation(line: 913, column: 18, scope: !5118)
!5120 = !DILocation(line: 913, column: 13, scope: !5099)
!5121 = !DILocation(line: 915, column: 23, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5123, file: !78, line: 915, column: 17)
!5123 = distinct !DILexicalBlock(scope: !5118, file: !78, line: 913, column: 39)
!5124 = !DILocation(line: 915, column: 28, scope: !5122)
!5125 = !DILocation(line: 915, column: 17, scope: !5122)
!5126 = !DILocation(line: 915, column: 55, scope: !5122)
!5127 = !DILocation(line: 915, column: 17, scope: !5123)
!5128 = !DILocation(line: 916, column: 17, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5122, file: !78, line: 915, column: 60)
!5130 = !DILocation(line: 919, column: 23, scope: !5123)
!5131 = !DILocation(line: 919, column: 29, scope: !5123)
!5132 = !DILocation(line: 920, column: 23, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5123, file: !78, line: 920, column: 17)
!5134 = !DILocation(line: 920, column: 28, scope: !5133)
!5135 = !DILocation(line: 920, column: 17, scope: !5133)
!5136 = !DILocation(line: 920, column: 55, scope: !5133)
!5137 = !DILocation(line: 920, column: 17, scope: !5123)
!5138 = !DILocation(line: 921, column: 17, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5133, file: !78, line: 920, column: 60)
!5140 = !DILocation(line: 924, column: 13, scope: !5123)
!5141 = !DILocation(line: 924, column: 22, scope: !5123)
!5142 = !DILocation(line: 924, column: 34, scope: !5123)
!5143 = !DILocation(line: 925, column: 13, scope: !5123)
!5144 = !DILocation(line: 926, column: 20, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5118, file: !78, line: 926, column: 20)
!5146 = !DILocation(line: 926, column: 25, scope: !5145)
!5147 = !DILocation(line: 926, column: 20, scope: !5118)
!5148 = !DILocation(line: 928, column: 17, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5150, file: !78, line: 928, column: 17)
!5150 = distinct !DILexicalBlock(scope: !5145, file: !78, line: 926, column: 46)
!5151 = !DILocation(line: 928, column: 26, scope: !5149)
!5152 = !DILocation(line: 928, column: 38, scope: !5149)
!5153 = !DILocation(line: 928, column: 17, scope: !5150)
!5154 = !DILocation(line: 930, column: 27, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5156, file: !78, line: 930, column: 21)
!5156 = distinct !DILexicalBlock(scope: !5149, file: !78, line: 928, column: 59)
!5157 = !DILocation(line: 930, column: 32, scope: !5155)
!5158 = !DILocation(line: 930, column: 21, scope: !5155)
!5159 = !DILocation(line: 930, column: 59, scope: !5155)
!5160 = !DILocation(line: 930, column: 21, scope: !5156)
!5161 = !DILocation(line: 931, column: 21, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5155, file: !78, line: 930, column: 64)
!5163 = !DILocation(line: 933, column: 27, scope: !5156)
!5164 = !DILocation(line: 933, column: 33, scope: !5156)
!5165 = !DILocation(line: 934, column: 27, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5156, file: !78, line: 934, column: 21)
!5167 = !DILocation(line: 934, column: 32, scope: !5166)
!5168 = !DILocation(line: 934, column: 21, scope: !5166)
!5169 = !DILocation(line: 934, column: 59, scope: !5166)
!5170 = !DILocation(line: 934, column: 21, scope: !5156)
!5171 = !DILocation(line: 935, column: 21, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5166, file: !78, line: 934, column: 64)
!5173 = !DILocation(line: 937, column: 13, scope: !5156)
!5174 = !DILocation(line: 938, column: 13, scope: !5150)
!5175 = !DILocation(line: 938, column: 22, scope: !5150)
!5176 = !DILocation(line: 938, column: 34, scope: !5150)
!5177 = !DILocation(line: 939, column: 13, scope: !5150)
!5178 = !DILocation(line: 948, column: 5, scope: !5099)
!5179 = !DILocation(line: 951, column: 5, scope: !5079)
!5180 = !DILocation(line: 951, column: 11, scope: !5079)
!5181 = !DILocation(line: 952, column: 5, scope: !5079)
!5182 = !DILocation(line: 953, column: 1, scope: !5079)
!5183 = distinct !DISubprogram(name: "modbus_rtu_get_serial_mode", scope: !78, file: !78, line: 955, type: !204, isLocal: false, isDefinition: true, scopeLine: 956, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5184 = !DILocalVariable(name: "ctx", arg: 1, scope: !5183, file: !78, line: 955, type: !119)
!5185 = !DILocation(line: 955, column: 42, scope: !5183)
!5186 = !DILocation(line: 957, column: 9, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5183, file: !78, line: 957, column: 9)
!5188 = !DILocation(line: 957, column: 13, scope: !5187)
!5189 = !DILocation(line: 957, column: 9, scope: !5183)
!5190 = !DILocation(line: 958, column: 9, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5187, file: !78, line: 957, column: 22)
!5192 = !DILocation(line: 958, column: 15, scope: !5191)
!5193 = !DILocation(line: 959, column: 9, scope: !5191)
!5194 = !DILocation(line: 962, column: 9, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5183, file: !78, line: 962, column: 9)
!5196 = !DILocation(line: 962, column: 14, scope: !5195)
!5197 = !DILocation(line: 962, column: 23, scope: !5195)
!5198 = !DILocation(line: 962, column: 36, scope: !5195)
!5199 = !DILocation(line: 962, column: 9, scope: !5183)
!5200 = !DILocalVariable(name: "ctx_rtu", scope: !5201, file: !78, line: 964, type: !81)
!5201 = distinct !DILexicalBlock(scope: !5195, file: !78, line: 962, column: 65)
!5202 = !DILocation(line: 964, column: 23, scope: !5201)
!5203 = !DILocation(line: 964, column: 33, scope: !5201)
!5204 = !DILocation(line: 964, column: 38, scope: !5201)
!5205 = !DILocation(line: 965, column: 16, scope: !5201)
!5206 = !DILocation(line: 965, column: 25, scope: !5201)
!5207 = !DILocation(line: 965, column: 9, scope: !5201)
!5208 = !DILocation(line: 974, column: 9, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5195, file: !78, line: 973, column: 12)
!5210 = !DILocation(line: 974, column: 15, scope: !5209)
!5211 = !DILocation(line: 975, column: 9, scope: !5209)
!5212 = !DILocation(line: 977, column: 1, scope: !5183)
!5213 = distinct !DISubprogram(name: "modbus_rtu_get_rts", scope: !78, file: !78, line: 979, type: !204, isLocal: false, isDefinition: true, scopeLine: 980, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5214 = !DILocalVariable(name: "ctx", arg: 1, scope: !5213, file: !78, line: 979, type: !119)
!5215 = !DILocation(line: 979, column: 34, scope: !5213)
!5216 = !DILocation(line: 981, column: 9, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5213, file: !78, line: 981, column: 9)
!5218 = !DILocation(line: 981, column: 13, scope: !5217)
!5219 = !DILocation(line: 981, column: 9, scope: !5213)
!5220 = !DILocation(line: 982, column: 9, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5217, file: !78, line: 981, column: 22)
!5222 = !DILocation(line: 982, column: 15, scope: !5221)
!5223 = !DILocation(line: 983, column: 9, scope: !5221)
!5224 = !DILocation(line: 986, column: 9, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5213, file: !78, line: 986, column: 9)
!5226 = !DILocation(line: 986, column: 14, scope: !5225)
!5227 = !DILocation(line: 986, column: 23, scope: !5225)
!5228 = !DILocation(line: 986, column: 36, scope: !5225)
!5229 = !DILocation(line: 986, column: 9, scope: !5213)
!5230 = !DILocalVariable(name: "ctx_rtu", scope: !5231, file: !78, line: 988, type: !81)
!5231 = distinct !DILexicalBlock(scope: !5225, file: !78, line: 986, column: 65)
!5232 = !DILocation(line: 988, column: 23, scope: !5231)
!5233 = !DILocation(line: 988, column: 33, scope: !5231)
!5234 = !DILocation(line: 988, column: 38, scope: !5231)
!5235 = !DILocation(line: 989, column: 16, scope: !5231)
!5236 = !DILocation(line: 989, column: 25, scope: !5231)
!5237 = !DILocation(line: 989, column: 9, scope: !5231)
!5238 = !DILocation(line: 998, column: 9, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5225, file: !78, line: 997, column: 12)
!5240 = !DILocation(line: 998, column: 15, scope: !5239)
!5241 = !DILocation(line: 999, column: 9, scope: !5239)
!5242 = !DILocation(line: 1001, column: 1, scope: !5213)
!5243 = distinct !DISubprogram(name: "modbus_rtu_set_rts", scope: !78, file: !78, line: 1003, type: !150, isLocal: false, isDefinition: true, scopeLine: 1004, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5244 = !DILocalVariable(name: "ctx", arg: 1, scope: !5243, file: !78, line: 1003, type: !119)
!5245 = !DILocation(line: 1003, column: 34, scope: !5243)
!5246 = !DILocalVariable(name: "mode", arg: 2, scope: !5243, file: !78, line: 1003, type: !44)
!5247 = !DILocation(line: 1003, column: 43, scope: !5243)
!5248 = !DILocation(line: 1005, column: 9, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5243, file: !78, line: 1005, column: 9)
!5250 = !DILocation(line: 1005, column: 13, scope: !5249)
!5251 = !DILocation(line: 1005, column: 9, scope: !5243)
!5252 = !DILocation(line: 1006, column: 9, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5249, file: !78, line: 1005, column: 22)
!5254 = !DILocation(line: 1006, column: 15, scope: !5253)
!5255 = !DILocation(line: 1007, column: 9, scope: !5253)
!5256 = !DILocation(line: 1010, column: 9, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5243, file: !78, line: 1010, column: 9)
!5258 = !DILocation(line: 1010, column: 14, scope: !5257)
!5259 = !DILocation(line: 1010, column: 23, scope: !5257)
!5260 = !DILocation(line: 1010, column: 36, scope: !5257)
!5261 = !DILocation(line: 1010, column: 9, scope: !5243)
!5262 = !DILocalVariable(name: "ctx_rtu", scope: !5263, file: !78, line: 1012, type: !81)
!5263 = distinct !DILexicalBlock(scope: !5257, file: !78, line: 1010, column: 65)
!5264 = !DILocation(line: 1012, column: 23, scope: !5263)
!5265 = !DILocation(line: 1012, column: 33, scope: !5263)
!5266 = !DILocation(line: 1012, column: 38, scope: !5263)
!5267 = !DILocation(line: 1014, column: 13, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5263, file: !78, line: 1014, column: 13)
!5269 = !DILocation(line: 1014, column: 18, scope: !5268)
!5270 = !DILocation(line: 1014, column: 41, scope: !5268)
!5271 = !DILocation(line: 1014, column: 44, scope: !5268)
!5272 = !DILocation(line: 1014, column: 49, scope: !5268)
!5273 = !DILocation(line: 1014, column: 70, scope: !5268)
!5274 = !DILocation(line: 1015, column: 13, scope: !5268)
!5275 = !DILocation(line: 1015, column: 18, scope: !5268)
!5276 = !DILocation(line: 1014, column: 13, scope: !5263)
!5277 = !DILocation(line: 1016, column: 28, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5268, file: !78, line: 1015, column: 42)
!5279 = !DILocation(line: 1016, column: 13, scope: !5278)
!5280 = !DILocation(line: 1016, column: 22, scope: !5278)
!5281 = !DILocation(line: 1016, column: 26, scope: !5278)
!5282 = !DILocation(line: 1019, column: 13, scope: !5278)
!5283 = !DILocation(line: 1019, column: 22, scope: !5278)
!5284 = !DILocation(line: 1019, column: 30, scope: !5278)
!5285 = !DILocation(line: 1019, column: 35, scope: !5278)
!5286 = !DILocation(line: 1019, column: 44, scope: !5278)
!5287 = !DILocation(line: 1019, column: 48, scope: !5278)
!5288 = !DILocation(line: 1021, column: 13, scope: !5278)
!5289 = !DILocation(line: 1023, column: 13, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5268, file: !78, line: 1022, column: 16)
!5291 = !DILocation(line: 1023, column: 19, scope: !5290)
!5292 = !DILocation(line: 1024, column: 13, scope: !5290)
!5293 = !DILocation(line: 1035, column: 5, scope: !5243)
!5294 = !DILocation(line: 1035, column: 11, scope: !5243)
!5295 = !DILocation(line: 1036, column: 5, scope: !5243)
!5296 = !DILocation(line: 1037, column: 1, scope: !5243)
!5297 = distinct !DISubprogram(name: "modbus_rtu_set_custom_rts", scope: !78, file: !78, line: 1039, type: !5298, isLocal: false, isDefinition: true, scopeLine: 1040, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5298 = !DISubroutineType(types: !5299)
!5299 = !{!44, !119, !116}
!5300 = !DILocalVariable(name: "ctx", arg: 1, scope: !5297, file: !78, line: 1039, type: !119)
!5301 = !DILocation(line: 1039, column: 41, scope: !5297)
!5302 = !DILocalVariable(name: "set_rts", arg: 2, scope: !5297, file: !78, line: 1039, type: !116)
!5303 = !DILocation(line: 1039, column: 53, scope: !5297)
!5304 = !DILocation(line: 1041, column: 9, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5297, file: !78, line: 1041, column: 9)
!5306 = !DILocation(line: 1041, column: 13, scope: !5305)
!5307 = !DILocation(line: 1041, column: 9, scope: !5297)
!5308 = !DILocation(line: 1042, column: 9, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5305, file: !78, line: 1041, column: 22)
!5310 = !DILocation(line: 1042, column: 15, scope: !5309)
!5311 = !DILocation(line: 1043, column: 9, scope: !5309)
!5312 = !DILocation(line: 1046, column: 9, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5297, file: !78, line: 1046, column: 9)
!5314 = !DILocation(line: 1046, column: 14, scope: !5313)
!5315 = !DILocation(line: 1046, column: 23, scope: !5313)
!5316 = !DILocation(line: 1046, column: 36, scope: !5313)
!5317 = !DILocation(line: 1046, column: 9, scope: !5297)
!5318 = !DILocalVariable(name: "ctx_rtu", scope: !5319, file: !78, line: 1048, type: !81)
!5319 = distinct !DILexicalBlock(scope: !5313, file: !78, line: 1046, column: 65)
!5320 = !DILocation(line: 1048, column: 23, scope: !5319)
!5321 = !DILocation(line: 1048, column: 33, scope: !5319)
!5322 = !DILocation(line: 1048, column: 38, scope: !5319)
!5323 = !DILocation(line: 1049, column: 28, scope: !5319)
!5324 = !DILocation(line: 1049, column: 9, scope: !5319)
!5325 = !DILocation(line: 1049, column: 18, scope: !5319)
!5326 = !DILocation(line: 1049, column: 26, scope: !5319)
!5327 = !DILocation(line: 1050, column: 9, scope: !5319)
!5328 = !DILocation(line: 1059, column: 9, scope: !5329)
!5329 = distinct !DILexicalBlock(scope: !5313, file: !78, line: 1058, column: 12)
!5330 = !DILocation(line: 1059, column: 15, scope: !5329)
!5331 = !DILocation(line: 1060, column: 9, scope: !5329)
!5332 = !DILocation(line: 1062, column: 1, scope: !5297)
!5333 = distinct !DISubprogram(name: "modbus_rtu_get_rts_delay", scope: !78, file: !78, line: 1064, type: !204, isLocal: false, isDefinition: true, scopeLine: 1065, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5334 = !DILocalVariable(name: "ctx", arg: 1, scope: !5333, file: !78, line: 1064, type: !119)
!5335 = !DILocation(line: 1064, column: 40, scope: !5333)
!5336 = !DILocation(line: 1066, column: 9, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5333, file: !78, line: 1066, column: 9)
!5338 = !DILocation(line: 1066, column: 13, scope: !5337)
!5339 = !DILocation(line: 1066, column: 9, scope: !5333)
!5340 = !DILocation(line: 1067, column: 9, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5337, file: !78, line: 1066, column: 22)
!5342 = !DILocation(line: 1067, column: 15, scope: !5341)
!5343 = !DILocation(line: 1068, column: 9, scope: !5341)
!5344 = !DILocation(line: 1071, column: 9, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5333, file: !78, line: 1071, column: 9)
!5346 = !DILocation(line: 1071, column: 14, scope: !5345)
!5347 = !DILocation(line: 1071, column: 23, scope: !5345)
!5348 = !DILocation(line: 1071, column: 36, scope: !5345)
!5349 = !DILocation(line: 1071, column: 9, scope: !5333)
!5350 = !DILocalVariable(name: "ctx_rtu", scope: !5351, file: !78, line: 1073, type: !81)
!5351 = distinct !DILexicalBlock(scope: !5345, file: !78, line: 1071, column: 65)
!5352 = !DILocation(line: 1073, column: 23, scope: !5351)
!5353 = !DILocation(line: 1074, column: 35, scope: !5351)
!5354 = !DILocation(line: 1074, column: 40, scope: !5351)
!5355 = !DILocation(line: 1074, column: 19, scope: !5351)
!5356 = !DILocation(line: 1074, column: 17, scope: !5351)
!5357 = !DILocation(line: 1075, column: 16, scope: !5351)
!5358 = !DILocation(line: 1075, column: 25, scope: !5351)
!5359 = !DILocation(line: 1075, column: 9, scope: !5351)
!5360 = !DILocation(line: 1084, column: 9, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5345, file: !78, line: 1083, column: 12)
!5362 = !DILocation(line: 1084, column: 15, scope: !5361)
!5363 = !DILocation(line: 1085, column: 9, scope: !5361)
!5364 = !DILocation(line: 1087, column: 1, scope: !5333)
!5365 = distinct !DISubprogram(name: "modbus_rtu_set_rts_delay", scope: !78, file: !78, line: 1089, type: !150, isLocal: false, isDefinition: true, scopeLine: 1090, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5366 = !DILocalVariable(name: "ctx", arg: 1, scope: !5365, file: !78, line: 1089, type: !119)
!5367 = !DILocation(line: 1089, column: 40, scope: !5365)
!5368 = !DILocalVariable(name: "us", arg: 2, scope: !5365, file: !78, line: 1089, type: !44)
!5369 = !DILocation(line: 1089, column: 49, scope: !5365)
!5370 = !DILocation(line: 1091, column: 9, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5365, file: !78, line: 1091, column: 9)
!5372 = !DILocation(line: 1091, column: 13, scope: !5371)
!5373 = !DILocation(line: 1091, column: 21, scope: !5371)
!5374 = !DILocation(line: 1091, column: 24, scope: !5371)
!5375 = !DILocation(line: 1091, column: 27, scope: !5371)
!5376 = !DILocation(line: 1091, column: 9, scope: !5365)
!5377 = !DILocation(line: 1092, column: 9, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5371, file: !78, line: 1091, column: 32)
!5379 = !DILocation(line: 1092, column: 15, scope: !5378)
!5380 = !DILocation(line: 1093, column: 9, scope: !5378)
!5381 = !DILocation(line: 1096, column: 9, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5365, file: !78, line: 1096, column: 9)
!5383 = !DILocation(line: 1096, column: 14, scope: !5382)
!5384 = !DILocation(line: 1096, column: 23, scope: !5382)
!5385 = !DILocation(line: 1096, column: 36, scope: !5382)
!5386 = !DILocation(line: 1096, column: 9, scope: !5365)
!5387 = !DILocalVariable(name: "ctx_rtu", scope: !5388, file: !78, line: 1098, type: !81)
!5388 = distinct !DILexicalBlock(scope: !5382, file: !78, line: 1096, column: 65)
!5389 = !DILocation(line: 1098, column: 23, scope: !5388)
!5390 = !DILocation(line: 1099, column: 35, scope: !5388)
!5391 = !DILocation(line: 1099, column: 40, scope: !5388)
!5392 = !DILocation(line: 1099, column: 19, scope: !5388)
!5393 = !DILocation(line: 1099, column: 17, scope: !5388)
!5394 = !DILocation(line: 1100, column: 30, scope: !5388)
!5395 = !DILocation(line: 1100, column: 9, scope: !5388)
!5396 = !DILocation(line: 1100, column: 18, scope: !5388)
!5397 = !DILocation(line: 1100, column: 28, scope: !5388)
!5398 = !DILocation(line: 1101, column: 9, scope: !5388)
!5399 = !DILocation(line: 1110, column: 9, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5382, file: !78, line: 1109, column: 12)
!5401 = !DILocation(line: 1110, column: 15, scope: !5400)
!5402 = !DILocation(line: 1111, column: 9, scope: !5400)
!5403 = !DILocation(line: 1113, column: 1, scope: !5365)
!5404 = distinct !DISubprogram(name: "modbus_new_rtu", scope: !78, file: !78, line: 1221, type: !5405, isLocal: false, isDefinition: true, scopeLine: 1224, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5405 = !DISubroutineType(types: !5406)
!5406 = !{!119, !431, !44, !88, !44, !44}
!5407 = !DILocalVariable(name: "device", arg: 1, scope: !5404, file: !78, line: 1221, type: !431)
!5408 = !DILocation(line: 1221, column: 38, scope: !5404)
!5409 = !DILocalVariable(name: "baud", arg: 2, scope: !5404, file: !78, line: 1222, type: !44)
!5410 = !DILocation(line: 1222, column: 30, scope: !5404)
!5411 = !DILocalVariable(name: "parity", arg: 3, scope: !5404, file: !78, line: 1222, type: !88)
!5412 = !DILocation(line: 1222, column: 41, scope: !5404)
!5413 = !DILocalVariable(name: "data_bit", arg: 4, scope: !5404, file: !78, line: 1222, type: !44)
!5414 = !DILocation(line: 1222, column: 53, scope: !5404)
!5415 = !DILocalVariable(name: "stop_bit", arg: 5, scope: !5404, file: !78, line: 1223, type: !44)
!5416 = !DILocation(line: 1223, column: 30, scope: !5404)
!5417 = !DILocalVariable(name: "ctx", scope: !5404, file: !78, line: 1225, type: !119)
!5418 = !DILocation(line: 1225, column: 15, scope: !5404)
!5419 = !DILocalVariable(name: "ctx_rtu", scope: !5404, file: !78, line: 1226, type: !81)
!5420 = !DILocation(line: 1226, column: 19, scope: !5404)
!5421 = !DILocation(line: 1229, column: 9, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1229, column: 9)
!5423 = !DILocation(line: 1229, column: 16, scope: !5422)
!5424 = !DILocation(line: 1229, column: 24, scope: !5422)
!5425 = !DILocation(line: 1229, column: 28, scope: !5422)
!5426 = !DILocation(line: 1229, column: 27, scope: !5422)
!5427 = !DILocation(line: 1229, column: 35, scope: !5422)
!5428 = !DILocation(line: 1229, column: 9, scope: !5404)
!5429 = !DILocation(line: 1230, column: 17, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5422, file: !78, line: 1229, column: 41)
!5431 = !DILocation(line: 1230, column: 9, scope: !5430)
!5432 = !DILocation(line: 1231, column: 9, scope: !5430)
!5433 = !DILocation(line: 1231, column: 15, scope: !5430)
!5434 = !DILocation(line: 1232, column: 9, scope: !5430)
!5435 = !DILocation(line: 1236, column: 9, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1236, column: 9)
!5437 = !DILocation(line: 1236, column: 14, scope: !5436)
!5438 = !DILocation(line: 1236, column: 9, scope: !5404)
!5439 = !DILocation(line: 1237, column: 17, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5436, file: !78, line: 1236, column: 20)
!5441 = !DILocation(line: 1237, column: 9, scope: !5440)
!5442 = !DILocation(line: 1238, column: 9, scope: !5440)
!5443 = !DILocation(line: 1238, column: 15, scope: !5440)
!5444 = !DILocation(line: 1239, column: 9, scope: !5440)
!5445 = !DILocation(line: 1242, column: 23, scope: !5404)
!5446 = !DILocation(line: 1242, column: 11, scope: !5404)
!5447 = !DILocation(line: 1242, column: 9, scope: !5404)
!5448 = !DILocation(line: 1243, column: 9, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1243, column: 9)
!5450 = !DILocation(line: 1243, column: 13, scope: !5449)
!5451 = !DILocation(line: 1243, column: 9, scope: !5404)
!5452 = !DILocation(line: 1244, column: 9, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5449, file: !78, line: 1243, column: 22)
!5454 = !DILocation(line: 1247, column: 25, scope: !5404)
!5455 = !DILocation(line: 1247, column: 5, scope: !5404)
!5456 = !DILocation(line: 1248, column: 5, scope: !5404)
!5457 = !DILocation(line: 1248, column: 10, scope: !5404)
!5458 = !DILocation(line: 1248, column: 18, scope: !5404)
!5459 = !DILocation(line: 1249, column: 41, scope: !5404)
!5460 = !DILocation(line: 1249, column: 25, scope: !5404)
!5461 = !DILocation(line: 1249, column: 5, scope: !5404)
!5462 = !DILocation(line: 1249, column: 10, scope: !5404)
!5463 = !DILocation(line: 1249, column: 23, scope: !5404)
!5464 = !DILocation(line: 1250, column: 9, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1250, column: 9)
!5466 = !DILocation(line: 1250, column: 14, scope: !5465)
!5467 = !DILocation(line: 1250, column: 27, scope: !5465)
!5468 = !DILocation(line: 1250, column: 9, scope: !5404)
!5469 = !DILocation(line: 1251, column: 21, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5465, file: !78, line: 1250, column: 36)
!5471 = !DILocation(line: 1251, column: 9, scope: !5470)
!5472 = !DILocation(line: 1252, column: 9, scope: !5470)
!5473 = !DILocation(line: 1252, column: 15, scope: !5470)
!5474 = !DILocation(line: 1253, column: 9, scope: !5470)
!5475 = !DILocation(line: 1255, column: 31, scope: !5404)
!5476 = !DILocation(line: 1255, column: 36, scope: !5404)
!5477 = !DILocation(line: 1255, column: 15, scope: !5404)
!5478 = !DILocation(line: 1255, column: 13, scope: !5404)
!5479 = !DILocation(line: 1258, column: 46, scope: !5404)
!5480 = !DILocation(line: 1258, column: 39, scope: !5404)
!5481 = !DILocation(line: 1258, column: 54, scope: !5404)
!5482 = !DILocation(line: 1258, column: 59, scope: !5404)
!5483 = !DILocation(line: 1258, column: 31, scope: !5404)
!5484 = !DILocation(line: 1258, column: 5, scope: !5404)
!5485 = !DILocation(line: 1258, column: 14, scope: !5404)
!5486 = !DILocation(line: 1258, column: 21, scope: !5404)
!5487 = !DILocation(line: 1259, column: 9, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1259, column: 9)
!5489 = !DILocation(line: 1259, column: 18, scope: !5488)
!5490 = !DILocation(line: 1259, column: 25, scope: !5488)
!5491 = !DILocation(line: 1259, column: 9, scope: !5404)
!5492 = !DILocation(line: 1260, column: 21, scope: !5493)
!5493 = distinct !DILexicalBlock(scope: !5488, file: !78, line: 1259, column: 34)
!5494 = !DILocation(line: 1260, column: 9, scope: !5493)
!5495 = !DILocation(line: 1261, column: 9, scope: !5493)
!5496 = !DILocation(line: 1261, column: 15, scope: !5493)
!5497 = !DILocation(line: 1262, column: 9, scope: !5493)
!5498 = !DILocation(line: 1264, column: 12, scope: !5404)
!5499 = !DILocation(line: 1264, column: 21, scope: !5404)
!5500 = !DILocation(line: 1264, column: 29, scope: !5404)
!5501 = !DILocation(line: 1264, column: 5, scope: !5404)
!5502 = !DILocation(line: 1266, column: 21, scope: !5404)
!5503 = !DILocation(line: 1266, column: 5, scope: !5404)
!5504 = !DILocation(line: 1266, column: 14, scope: !5404)
!5505 = !DILocation(line: 1266, column: 19, scope: !5404)
!5506 = !DILocation(line: 1267, column: 9, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5404, file: !78, line: 1267, column: 9)
!5508 = !DILocation(line: 1267, column: 16, scope: !5507)
!5509 = !DILocation(line: 1267, column: 23, scope: !5507)
!5510 = !DILocation(line: 1267, column: 26, scope: !5507)
!5511 = !DILocation(line: 1267, column: 33, scope: !5507)
!5512 = !DILocation(line: 1267, column: 40, scope: !5507)
!5513 = !DILocation(line: 1267, column: 43, scope: !5507)
!5514 = !DILocation(line: 1267, column: 50, scope: !5507)
!5515 = !DILocation(line: 1267, column: 9, scope: !5404)
!5516 = !DILocation(line: 1268, column: 27, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5507, file: !78, line: 1267, column: 58)
!5518 = !DILocation(line: 1268, column: 9, scope: !5517)
!5519 = !DILocation(line: 1268, column: 18, scope: !5517)
!5520 = !DILocation(line: 1268, column: 25, scope: !5517)
!5521 = !DILocation(line: 1269, column: 5, scope: !5517)
!5522 = !DILocation(line: 1270, column: 21, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5507, file: !78, line: 1269, column: 12)
!5524 = !DILocation(line: 1270, column: 9, scope: !5523)
!5525 = !DILocation(line: 1271, column: 9, scope: !5523)
!5526 = !DILocation(line: 1271, column: 15, scope: !5523)
!5527 = !DILocation(line: 1272, column: 9, scope: !5523)
!5528 = !DILocation(line: 1274, column: 25, scope: !5404)
!5529 = !DILocation(line: 1274, column: 5, scope: !5404)
!5530 = !DILocation(line: 1274, column: 14, scope: !5404)
!5531 = !DILocation(line: 1274, column: 23, scope: !5404)
!5532 = !DILocation(line: 1275, column: 25, scope: !5404)
!5533 = !DILocation(line: 1275, column: 5, scope: !5404)
!5534 = !DILocation(line: 1275, column: 14, scope: !5404)
!5535 = !DILocation(line: 1275, column: 23, scope: !5404)
!5536 = !DILocation(line: 1279, column: 5, scope: !5404)
!5537 = !DILocation(line: 1279, column: 14, scope: !5404)
!5538 = !DILocation(line: 1279, column: 26, scope: !5404)
!5539 = !DILocation(line: 1284, column: 5, scope: !5404)
!5540 = !DILocation(line: 1284, column: 14, scope: !5404)
!5541 = !DILocation(line: 1284, column: 18, scope: !5404)
!5542 = !DILocation(line: 1287, column: 44, scope: !5404)
!5543 = !DILocation(line: 1287, column: 42, scope: !5404)
!5544 = !DILocation(line: 1287, column: 56, scope: !5404)
!5545 = !DILocation(line: 1287, column: 63, scope: !5404)
!5546 = !DILocation(line: 1287, column: 53, scope: !5404)
!5547 = !DILocation(line: 1287, column: 81, scope: !5404)
!5548 = !DILocation(line: 1287, column: 79, scope: !5404)
!5549 = !DILocation(line: 1287, column: 37, scope: !5404)
!5550 = !DILocation(line: 1287, column: 93, scope: !5404)
!5551 = !DILocation(line: 1287, column: 91, scope: !5404)
!5552 = !DILocation(line: 1287, column: 5, scope: !5404)
!5553 = !DILocation(line: 1287, column: 14, scope: !5404)
!5554 = !DILocation(line: 1287, column: 27, scope: !5404)
!5555 = !DILocation(line: 1290, column: 5, scope: !5404)
!5556 = !DILocation(line: 1290, column: 14, scope: !5404)
!5557 = !DILocation(line: 1290, column: 22, scope: !5404)
!5558 = !DILocation(line: 1293, column: 26, scope: !5404)
!5559 = !DILocation(line: 1293, column: 35, scope: !5404)
!5560 = !DILocation(line: 1293, column: 5, scope: !5404)
!5561 = !DILocation(line: 1293, column: 14, scope: !5404)
!5562 = !DILocation(line: 1293, column: 24, scope: !5404)
!5563 = !DILocation(line: 1296, column: 5, scope: !5404)
!5564 = !DILocation(line: 1296, column: 14, scope: !5404)
!5565 = !DILocation(line: 1296, column: 37, scope: !5404)
!5566 = !DILocation(line: 1298, column: 12, scope: !5404)
!5567 = !DILocation(line: 1298, column: 5, scope: !5404)
!5568 = !DILocation(line: 1299, column: 1, scope: !5404)
!5569 = distinct !DISubprogram(name: "_modbus_rtu_ioctl_rts", scope: !78, file: !78, line: 255, type: !117, isLocal: true, isDefinition: true, scopeLine: 256, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5570 = !DILocalVariable(name: "ctx", arg: 1, scope: !5569, file: !78, line: 255, type: !119)
!5571 = !DILocation(line: 255, column: 45, scope: !5569)
!5572 = !DILocalVariable(name: "on", arg: 2, scope: !5569, file: !78, line: 255, type: !44)
!5573 = !DILocation(line: 255, column: 54, scope: !5569)
!5574 = !DILocalVariable(name: "fd", scope: !5569, file: !78, line: 257, type: !44)
!5575 = !DILocation(line: 257, column: 9, scope: !5569)
!5576 = !DILocation(line: 257, column: 14, scope: !5569)
!5577 = !DILocation(line: 257, column: 19, scope: !5569)
!5578 = !DILocalVariable(name: "flags", scope: !5569, file: !78, line: 258, type: !44)
!5579 = !DILocation(line: 258, column: 9, scope: !5569)
!5580 = !DILocation(line: 260, column: 11, scope: !5569)
!5581 = !DILocation(line: 260, column: 5, scope: !5569)
!5582 = !DILocation(line: 261, column: 9, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5569, file: !78, line: 261, column: 9)
!5584 = !DILocation(line: 261, column: 9, scope: !5569)
!5585 = !DILocation(line: 262, column: 15, scope: !5586)
!5586 = distinct !DILexicalBlock(scope: !5583, file: !78, line: 261, column: 13)
!5587 = !DILocation(line: 263, column: 5, scope: !5586)
!5588 = !DILocation(line: 264, column: 15, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5583, file: !78, line: 263, column: 12)
!5590 = !DILocation(line: 266, column: 11, scope: !5569)
!5591 = !DILocation(line: 266, column: 5, scope: !5569)
!5592 = !DILocation(line: 267, column: 1, scope: !5569)
!5593 = distinct !DISubprogram(name: "_modbus_set_slave", scope: !78, file: !78, line: 92, type: !150, isLocal: true, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5594 = !DILocalVariable(name: "ctx", arg: 1, scope: !5593, file: !78, line: 92, type: !119)
!5595 = !DILocation(line: 92, column: 40, scope: !5593)
!5596 = !DILocalVariable(name: "slave", arg: 2, scope: !5593, file: !78, line: 92, type: !44)
!5597 = !DILocation(line: 92, column: 49, scope: !5593)
!5598 = !DILocation(line: 95, column: 9, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5593, file: !78, line: 95, column: 9)
!5600 = !DILocation(line: 95, column: 15, scope: !5599)
!5601 = !DILocation(line: 95, column: 20, scope: !5599)
!5602 = !DILocation(line: 95, column: 23, scope: !5599)
!5603 = !DILocation(line: 95, column: 29, scope: !5599)
!5604 = !DILocation(line: 95, column: 9, scope: !5593)
!5605 = !DILocation(line: 96, column: 22, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5599, file: !78, line: 95, column: 37)
!5607 = !DILocation(line: 96, column: 9, scope: !5606)
!5608 = !DILocation(line: 96, column: 14, scope: !5606)
!5609 = !DILocation(line: 96, column: 20, scope: !5606)
!5610 = !DILocation(line: 97, column: 5, scope: !5606)
!5611 = !DILocation(line: 98, column: 9, scope: !5612)
!5612 = distinct !DILexicalBlock(scope: !5599, file: !78, line: 97, column: 12)
!5613 = !DILocation(line: 98, column: 15, scope: !5612)
!5614 = !DILocation(line: 99, column: 9, scope: !5612)
!5615 = !DILocation(line: 102, column: 5, scope: !5593)
!5616 = !DILocation(line: 103, column: 1, scope: !5593)
!5617 = distinct !DISubprogram(name: "_modbus_rtu_build_request_basis", scope: !78, file: !78, line: 106, type: !154, isLocal: true, isDefinition: true, scopeLine: 109, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5618 = !DILocalVariable(name: "ctx", arg: 1, scope: !5617, file: !78, line: 106, type: !119)
!5619 = !DILocation(line: 106, column: 54, scope: !5617)
!5620 = !DILocalVariable(name: "function", arg: 2, scope: !5617, file: !78, line: 106, type: !44)
!5621 = !DILocation(line: 106, column: 63, scope: !5617)
!5622 = !DILocalVariable(name: "addr", arg: 3, scope: !5617, file: !78, line: 107, type: !44)
!5623 = !DILocation(line: 107, column: 48, scope: !5617)
!5624 = !DILocalVariable(name: "nb", arg: 4, scope: !5617, file: !78, line: 107, type: !44)
!5625 = !DILocation(line: 107, column: 58, scope: !5617)
!5626 = !DILocalVariable(name: "req", arg: 5, scope: !5617, file: !78, line: 108, type: !61)
!5627 = !DILocation(line: 108, column: 53, scope: !5617)
!5628 = !DILocation(line: 110, column: 5, scope: !5617)
!5629 = !DILocation(line: 111, column: 14, scope: !5617)
!5630 = !DILocation(line: 111, column: 19, scope: !5617)
!5631 = !DILocation(line: 111, column: 5, scope: !5617)
!5632 = !DILocation(line: 111, column: 12, scope: !5617)
!5633 = !DILocation(line: 112, column: 14, scope: !5617)
!5634 = !DILocation(line: 112, column: 5, scope: !5617)
!5635 = !DILocation(line: 112, column: 12, scope: !5617)
!5636 = !DILocation(line: 113, column: 14, scope: !5617)
!5637 = !DILocation(line: 113, column: 19, scope: !5617)
!5638 = !DILocation(line: 113, column: 5, scope: !5617)
!5639 = !DILocation(line: 113, column: 12, scope: !5617)
!5640 = !DILocation(line: 114, column: 14, scope: !5617)
!5641 = !DILocation(line: 114, column: 19, scope: !5617)
!5642 = !DILocation(line: 114, column: 5, scope: !5617)
!5643 = !DILocation(line: 114, column: 12, scope: !5617)
!5644 = !DILocation(line: 115, column: 14, scope: !5617)
!5645 = !DILocation(line: 115, column: 17, scope: !5617)
!5646 = !DILocation(line: 115, column: 5, scope: !5617)
!5647 = !DILocation(line: 115, column: 12, scope: !5617)
!5648 = !DILocation(line: 116, column: 14, scope: !5617)
!5649 = !DILocation(line: 116, column: 17, scope: !5617)
!5650 = !DILocation(line: 116, column: 5, scope: !5617)
!5651 = !DILocation(line: 116, column: 12, scope: !5617)
!5652 = !DILocation(line: 118, column: 5, scope: !5617)
!5653 = distinct !DISubprogram(name: "_modbus_rtu_build_response_basis", scope: !78, file: !78, line: 122, type: !158, isLocal: true, isDefinition: true, scopeLine: 123, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5654 = !DILocalVariable(name: "sft", arg: 1, scope: !5653, file: !78, line: 122, type: !160)
!5655 = !DILocation(line: 122, column: 52, scope: !5653)
!5656 = !DILocalVariable(name: "rsp", arg: 2, scope: !5653, file: !78, line: 122, type: !61)
!5657 = !DILocation(line: 122, column: 66, scope: !5653)
!5658 = !DILocation(line: 126, column: 14, scope: !5653)
!5659 = !DILocation(line: 126, column: 19, scope: !5653)
!5660 = !DILocation(line: 126, column: 5, scope: !5653)
!5661 = !DILocation(line: 126, column: 12, scope: !5653)
!5662 = !DILocation(line: 127, column: 14, scope: !5653)
!5663 = !DILocation(line: 127, column: 19, scope: !5653)
!5664 = !DILocation(line: 127, column: 5, scope: !5653)
!5665 = !DILocation(line: 127, column: 12, scope: !5653)
!5666 = !DILocation(line: 129, column: 5, scope: !5653)
!5667 = distinct !DISubprogram(name: "_modbus_rtu_prepare_response_tid", scope: !78, file: !78, line: 148, type: !169, isLocal: true, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5668 = !DILocalVariable(name: "req", arg: 1, scope: !5667, file: !78, line: 148, type: !171)
!5669 = !DILocation(line: 148, column: 60, scope: !5667)
!5670 = !DILocalVariable(name: "req_length", arg: 2, scope: !5667, file: !78, line: 148, type: !173)
!5671 = !DILocation(line: 148, column: 70, scope: !5667)
!5672 = !DILocation(line: 150, column: 7, scope: !5667)
!5673 = !DILocation(line: 150, column: 19, scope: !5667)
!5674 = !DILocation(line: 152, column: 5, scope: !5667)
!5675 = distinct !DISubprogram(name: "_modbus_rtu_send_msg_pre", scope: !78, file: !78, line: 155, type: !176, isLocal: true, isDefinition: true, scopeLine: 156, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5676 = !DILocalVariable(name: "req", arg: 1, scope: !5675, file: !78, line: 155, type: !61)
!5677 = !DILocation(line: 155, column: 46, scope: !5675)
!5678 = !DILocalVariable(name: "req_length", arg: 2, scope: !5675, file: !78, line: 155, type: !44)
!5679 = !DILocation(line: 155, column: 55, scope: !5675)
!5680 = !DILocalVariable(name: "crc", scope: !5675, file: !78, line: 157, type: !65)
!5681 = !DILocation(line: 157, column: 14, scope: !5675)
!5682 = !DILocation(line: 157, column: 26, scope: !5675)
!5683 = !DILocation(line: 157, column: 31, scope: !5675)
!5684 = !DILocation(line: 157, column: 20, scope: !5675)
!5685 = !DILocation(line: 158, column: 25, scope: !5675)
!5686 = !DILocation(line: 158, column: 29, scope: !5675)
!5687 = !DILocation(line: 158, column: 5, scope: !5675)
!5688 = !DILocation(line: 158, column: 19, scope: !5675)
!5689 = !DILocation(line: 158, column: 23, scope: !5675)
!5690 = !DILocation(line: 159, column: 25, scope: !5675)
!5691 = !DILocation(line: 159, column: 29, scope: !5675)
!5692 = !DILocation(line: 159, column: 5, scope: !5675)
!5693 = !DILocation(line: 159, column: 19, scope: !5675)
!5694 = !DILocation(line: 159, column: 23, scope: !5675)
!5695 = !DILocation(line: 161, column: 12, scope: !5675)
!5696 = !DILocation(line: 161, column: 5, scope: !5675)
!5697 = distinct !DISubprogram(name: "_modbus_rtu_send", scope: !78, file: !78, line: 270, type: !180, isLocal: true, isDefinition: true, scopeLine: 271, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5698 = !DILocalVariable(name: "ctx", arg: 1, scope: !5697, file: !78, line: 270, type: !119)
!5699 = !DILocation(line: 270, column: 43, scope: !5697)
!5700 = !DILocalVariable(name: "req", arg: 2, scope: !5697, file: !78, line: 270, type: !171)
!5701 = !DILocation(line: 270, column: 63, scope: !5697)
!5702 = !DILocalVariable(name: "req_length", arg: 3, scope: !5697, file: !78, line: 270, type: !44)
!5703 = !DILocation(line: 270, column: 72, scope: !5697)
!5704 = !DILocalVariable(name: "ctx_rtu", scope: !5697, file: !78, line: 278, type: !81)
!5705 = !DILocation(line: 278, column: 19, scope: !5697)
!5706 = !DILocation(line: 278, column: 29, scope: !5697)
!5707 = !DILocation(line: 278, column: 34, scope: !5697)
!5708 = !DILocation(line: 279, column: 9, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5697, file: !78, line: 279, column: 9)
!5710 = !DILocation(line: 279, column: 18, scope: !5709)
!5711 = !DILocation(line: 279, column: 22, scope: !5709)
!5712 = !DILocation(line: 279, column: 9, scope: !5697)
!5713 = !DILocalVariable(name: "size", scope: !5714, file: !78, line: 280, type: !182)
!5714 = distinct !DILexicalBlock(scope: !5709, file: !78, line: 279, column: 46)
!5715 = !DILocation(line: 280, column: 17, scope: !5714)
!5716 = !DILocation(line: 282, column: 13, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5714, file: !78, line: 282, column: 13)
!5718 = !DILocation(line: 282, column: 18, scope: !5717)
!5719 = !DILocation(line: 282, column: 13, scope: !5714)
!5720 = !DILocation(line: 283, column: 21, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5717, file: !78, line: 282, column: 25)
!5722 = !DILocation(line: 283, column: 13, scope: !5721)
!5723 = !DILocation(line: 284, column: 9, scope: !5721)
!5724 = !DILocation(line: 286, column: 9, scope: !5714)
!5725 = !DILocation(line: 286, column: 18, scope: !5714)
!5726 = !DILocation(line: 286, column: 26, scope: !5714)
!5727 = !DILocation(line: 286, column: 31, scope: !5714)
!5728 = !DILocation(line: 286, column: 40, scope: !5714)
!5729 = !DILocation(line: 286, column: 44, scope: !5714)
!5730 = !DILocation(line: 287, column: 16, scope: !5714)
!5731 = !DILocation(line: 287, column: 25, scope: !5714)
!5732 = !DILocation(line: 287, column: 9, scope: !5714)
!5733 = !DILocation(line: 289, column: 22, scope: !5714)
!5734 = !DILocation(line: 289, column: 27, scope: !5714)
!5735 = !DILocation(line: 289, column: 30, scope: !5714)
!5736 = !DILocation(line: 289, column: 35, scope: !5714)
!5737 = !DILocation(line: 289, column: 16, scope: !5714)
!5738 = !DILocation(line: 289, column: 14, scope: !5714)
!5739 = !DILocation(line: 291, column: 16, scope: !5714)
!5740 = !DILocation(line: 291, column: 25, scope: !5714)
!5741 = !DILocation(line: 291, column: 40, scope: !5714)
!5742 = !DILocation(line: 291, column: 38, scope: !5714)
!5743 = !DILocation(line: 291, column: 53, scope: !5714)
!5744 = !DILocation(line: 291, column: 62, scope: !5714)
!5745 = !DILocation(line: 291, column: 51, scope: !5714)
!5746 = !DILocation(line: 291, column: 9, scope: !5714)
!5747 = !DILocation(line: 292, column: 9, scope: !5714)
!5748 = !DILocation(line: 292, column: 18, scope: !5714)
!5749 = !DILocation(line: 292, column: 26, scope: !5714)
!5750 = !DILocation(line: 292, column: 31, scope: !5714)
!5751 = !DILocation(line: 292, column: 40, scope: !5714)
!5752 = !DILocation(line: 292, column: 44, scope: !5714)
!5753 = !DILocation(line: 294, column: 16, scope: !5714)
!5754 = !DILocation(line: 294, column: 9, scope: !5714)
!5755 = !DILocation(line: 297, column: 22, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5709, file: !78, line: 295, column: 12)
!5757 = !DILocation(line: 297, column: 27, scope: !5756)
!5758 = !DILocation(line: 297, column: 30, scope: !5756)
!5759 = !DILocation(line: 297, column: 35, scope: !5756)
!5760 = !DILocation(line: 297, column: 16, scope: !5756)
!5761 = !DILocation(line: 297, column: 9, scope: !5756)
!5762 = !DILocation(line: 302, column: 1, scope: !5697)
!5763 = distinct !DISubprogram(name: "_modbus_rtu_receive", scope: !78, file: !78, line: 304, type: !187, isLocal: true, isDefinition: true, scopeLine: 305, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5764 = !DILocalVariable(name: "ctx", arg: 1, scope: !5763, file: !78, line: 304, type: !119)
!5765 = !DILocation(line: 304, column: 42, scope: !5763)
!5766 = !DILocalVariable(name: "req", arg: 2, scope: !5763, file: !78, line: 304, type: !61)
!5767 = !DILocation(line: 304, column: 56, scope: !5763)
!5768 = !DILocalVariable(name: "rc", scope: !5763, file: !78, line: 306, type: !44)
!5769 = !DILocation(line: 306, column: 9, scope: !5763)
!5770 = !DILocalVariable(name: "ctx_rtu", scope: !5763, file: !78, line: 307, type: !81)
!5771 = !DILocation(line: 307, column: 19, scope: !5763)
!5772 = !DILocation(line: 307, column: 29, scope: !5763)
!5773 = !DILocation(line: 307, column: 34, scope: !5763)
!5774 = !DILocation(line: 309, column: 9, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5763, file: !78, line: 309, column: 9)
!5776 = !DILocation(line: 309, column: 18, scope: !5775)
!5777 = !DILocation(line: 309, column: 9, scope: !5763)
!5778 = !DILocation(line: 310, column: 29, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5775, file: !78, line: 309, column: 42)
!5780 = !DILocation(line: 310, column: 34, scope: !5779)
!5781 = !DILocation(line: 310, column: 9, scope: !5779)
!5782 = !DILocation(line: 312, column: 9, scope: !5779)
!5783 = !DILocation(line: 312, column: 18, scope: !5779)
!5784 = !DILocation(line: 312, column: 41, scope: !5779)
!5785 = !DILocation(line: 313, column: 12, scope: !5779)
!5786 = !DILocation(line: 314, column: 13, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5779, file: !78, line: 314, column: 13)
!5788 = !DILocation(line: 314, column: 18, scope: !5787)
!5789 = !DILocation(line: 314, column: 13, scope: !5779)
!5790 = !DILocation(line: 315, column: 13, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5787, file: !78, line: 314, column: 25)
!5792 = !DILocation(line: 316, column: 9, scope: !5791)
!5793 = !DILocation(line: 317, column: 5, scope: !5779)
!5794 = !DILocation(line: 318, column: 34, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5775, file: !78, line: 317, column: 12)
!5796 = !DILocation(line: 318, column: 39, scope: !5795)
!5797 = !DILocation(line: 318, column: 14, scope: !5795)
!5798 = !DILocation(line: 318, column: 12, scope: !5795)
!5799 = !DILocation(line: 319, column: 13, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5795, file: !78, line: 319, column: 13)
!5801 = !DILocation(line: 319, column: 16, scope: !5800)
!5802 = !DILocation(line: 319, column: 13, scope: !5795)
!5803 = !DILocation(line: 321, column: 13, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5800, file: !78, line: 319, column: 22)
!5805 = !DILocation(line: 321, column: 22, scope: !5804)
!5806 = !DILocation(line: 321, column: 45, scope: !5804)
!5807 = !DILocation(line: 322, column: 9, scope: !5804)
!5808 = !DILocation(line: 324, column: 12, scope: !5763)
!5809 = !DILocation(line: 324, column: 5, scope: !5763)
!5810 = distinct !DISubprogram(name: "_modbus_rtu_recv", scope: !78, file: !78, line: 327, type: !191, isLocal: true, isDefinition: true, scopeLine: 328, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5811 = !DILocalVariable(name: "ctx", arg: 1, scope: !5810, file: !78, line: 327, type: !119)
!5812 = !DILocation(line: 327, column: 43, scope: !5810)
!5813 = !DILocalVariable(name: "rsp", arg: 2, scope: !5810, file: !78, line: 327, type: !61)
!5814 = !DILocation(line: 327, column: 57, scope: !5810)
!5815 = !DILocalVariable(name: "rsp_length", arg: 3, scope: !5810, file: !78, line: 327, type: !44)
!5816 = !DILocation(line: 327, column: 66, scope: !5810)
!5817 = !DILocation(line: 332, column: 17, scope: !5810)
!5818 = !DILocation(line: 332, column: 22, scope: !5810)
!5819 = !DILocation(line: 332, column: 25, scope: !5810)
!5820 = !DILocation(line: 332, column: 30, scope: !5810)
!5821 = !DILocation(line: 332, column: 12, scope: !5810)
!5822 = !DILocation(line: 332, column: 5, scope: !5810)
!5823 = distinct !DISubprogram(name: "_modbus_rtu_check_integrity", scope: !78, file: !78, line: 359, type: !195, isLocal: true, isDefinition: true, scopeLine: 361, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5824 = !DILocalVariable(name: "ctx", arg: 1, scope: !5823, file: !78, line: 359, type: !119)
!5825 = !DILocation(line: 359, column: 50, scope: !5823)
!5826 = !DILocalVariable(name: "msg", arg: 2, scope: !5823, file: !78, line: 359, type: !61)
!5827 = !DILocation(line: 359, column: 64, scope: !5823)
!5828 = !DILocalVariable(name: "msg_length", arg: 3, scope: !5823, file: !78, line: 360, type: !197)
!5829 = !DILocation(line: 360, column: 50, scope: !5823)
!5830 = !DILocalVariable(name: "crc_calculated", scope: !5823, file: !78, line: 362, type: !65)
!5831 = !DILocation(line: 362, column: 14, scope: !5823)
!5832 = !DILocalVariable(name: "crc_received", scope: !5823, file: !78, line: 363, type: !65)
!5833 = !DILocation(line: 363, column: 14, scope: !5823)
!5834 = !DILocalVariable(name: "slave", scope: !5823, file: !78, line: 364, type: !44)
!5835 = !DILocation(line: 364, column: 9, scope: !5823)
!5836 = !DILocation(line: 364, column: 17, scope: !5823)
!5837 = !DILocation(line: 368, column: 9, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5823, file: !78, line: 368, column: 9)
!5839 = !DILocation(line: 368, column: 18, scope: !5838)
!5840 = !DILocation(line: 368, column: 23, scope: !5838)
!5841 = !DILocation(line: 368, column: 15, scope: !5838)
!5842 = !DILocation(line: 368, column: 29, scope: !5838)
!5843 = !DILocation(line: 368, column: 32, scope: !5838)
!5844 = !DILocation(line: 368, column: 38, scope: !5838)
!5845 = !DILocation(line: 368, column: 9, scope: !5823)
!5846 = !DILocation(line: 369, column: 13, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5848, file: !78, line: 369, column: 13)
!5848 = distinct !DILexicalBlock(scope: !5838, file: !78, line: 368, column: 67)
!5849 = !DILocation(line: 369, column: 18, scope: !5847)
!5850 = !DILocation(line: 369, column: 13, scope: !5848)
!5851 = !DILocation(line: 370, column: 63, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5847, file: !78, line: 369, column: 25)
!5853 = !DILocation(line: 370, column: 70, scope: !5852)
!5854 = !DILocation(line: 370, column: 75, scope: !5852)
!5855 = !DILocation(line: 370, column: 13, scope: !5852)
!5856 = !DILocation(line: 371, column: 9, scope: !5852)
!5857 = !DILocation(line: 373, column: 9, scope: !5848)
!5858 = !DILocation(line: 376, column: 28, scope: !5823)
!5859 = !DILocation(line: 376, column: 33, scope: !5823)
!5860 = !DILocation(line: 376, column: 44, scope: !5823)
!5861 = !DILocation(line: 376, column: 22, scope: !5823)
!5862 = !DILocation(line: 376, column: 20, scope: !5823)
!5863 = !DILocation(line: 377, column: 21, scope: !5823)
!5864 = !DILocation(line: 377, column: 25, scope: !5823)
!5865 = !DILocation(line: 377, column: 36, scope: !5823)
!5866 = !DILocation(line: 377, column: 41, scope: !5823)
!5867 = !DILocation(line: 377, column: 49, scope: !5823)
!5868 = !DILocation(line: 377, column: 53, scope: !5823)
!5869 = !DILocation(line: 377, column: 64, scope: !5823)
!5870 = !DILocation(line: 377, column: 47, scope: !5823)
!5871 = !DILocation(line: 377, column: 20, scope: !5823)
!5872 = !DILocation(line: 377, column: 18, scope: !5823)
!5873 = !DILocation(line: 380, column: 9, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5823, file: !78, line: 380, column: 9)
!5875 = !DILocation(line: 380, column: 27, scope: !5874)
!5876 = !DILocation(line: 380, column: 24, scope: !5874)
!5877 = !DILocation(line: 380, column: 9, scope: !5823)
!5878 = !DILocation(line: 381, column: 16, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5874, file: !78, line: 380, column: 41)
!5880 = !DILocation(line: 381, column: 9, scope: !5879)
!5881 = !DILocation(line: 383, column: 13, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5883, file: !78, line: 383, column: 13)
!5883 = distinct !DILexicalBlock(scope: !5874, file: !78, line: 382, column: 12)
!5884 = !DILocation(line: 383, column: 18, scope: !5882)
!5885 = !DILocation(line: 383, column: 13, scope: !5883)
!5886 = !DILocation(line: 384, column: 21, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5882, file: !78, line: 383, column: 25)
!5888 = !DILocation(line: 385, column: 21, scope: !5887)
!5889 = !DILocation(line: 385, column: 35, scope: !5887)
!5890 = !DILocation(line: 384, column: 13, scope: !5887)
!5891 = !DILocation(line: 386, column: 9, scope: !5887)
!5892 = !DILocation(line: 388, column: 13, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5883, file: !78, line: 388, column: 13)
!5894 = !DILocation(line: 388, column: 18, scope: !5893)
!5895 = !DILocation(line: 388, column: 33, scope: !5893)
!5896 = !DILocation(line: 388, column: 13, scope: !5883)
!5897 = !DILocation(line: 389, column: 31, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5893, file: !78, line: 388, column: 67)
!5899 = !DILocation(line: 389, column: 13, scope: !5898)
!5900 = !DILocation(line: 390, column: 9, scope: !5898)
!5901 = !DILocation(line: 391, column: 9, scope: !5883)
!5902 = !DILocation(line: 391, column: 15, scope: !5883)
!5903 = !DILocation(line: 392, column: 9, scope: !5883)
!5904 = !DILocation(line: 394, column: 1, scope: !5823)
!5905 = distinct !DISubprogram(name: "_modbus_rtu_pre_check_confirmation", scope: !78, file: !78, line: 338, type: !200, isLocal: true, isDefinition: true, scopeLine: 340, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5906 = !DILocalVariable(name: "ctx", arg: 1, scope: !5905, file: !78, line: 338, type: !119)
!5907 = !DILocation(line: 338, column: 57, scope: !5905)
!5908 = !DILocalVariable(name: "req", arg: 2, scope: !5905, file: !78, line: 338, type: !171)
!5909 = !DILocation(line: 338, column: 77, scope: !5905)
!5910 = !DILocalVariable(name: "rsp", arg: 3, scope: !5905, file: !78, line: 339, type: !171)
!5911 = !DILocation(line: 339, column: 62, scope: !5905)
!5912 = !DILocalVariable(name: "rsp_length", arg: 4, scope: !5905, file: !78, line: 339, type: !44)
!5913 = !DILocation(line: 339, column: 71, scope: !5905)
!5914 = !DILocation(line: 343, column: 9, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5905, file: !78, line: 343, column: 9)
!5916 = !DILocation(line: 343, column: 19, scope: !5915)
!5917 = !DILocation(line: 343, column: 16, scope: !5915)
!5918 = !DILocation(line: 343, column: 26, scope: !5915)
!5919 = !DILocation(line: 343, column: 29, scope: !5915)
!5920 = !DILocation(line: 343, column: 36, scope: !5915)
!5921 = !DILocation(line: 343, column: 9, scope: !5905)
!5922 = !DILocation(line: 344, column: 13, scope: !5923)
!5923 = distinct !DILexicalBlock(scope: !5924, file: !78, line: 344, column: 13)
!5924 = distinct !DILexicalBlock(scope: !5915, file: !78, line: 343, column: 65)
!5925 = !DILocation(line: 344, column: 18, scope: !5923)
!5926 = !DILocation(line: 344, column: 13, scope: !5924)
!5927 = !DILocation(line: 345, column: 21, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5923, file: !78, line: 344, column: 25)
!5929 = !DILocation(line: 347, column: 21, scope: !5928)
!5930 = !DILocation(line: 347, column: 29, scope: !5928)
!5931 = !DILocation(line: 345, column: 13, scope: !5928)
!5932 = !DILocation(line: 348, column: 9, scope: !5928)
!5933 = !DILocation(line: 349, column: 9, scope: !5924)
!5934 = !DILocation(line: 349, column: 15, scope: !5924)
!5935 = !DILocation(line: 350, column: 9, scope: !5924)
!5936 = !DILocation(line: 352, column: 9, scope: !5937)
!5937 = distinct !DILexicalBlock(scope: !5915, file: !78, line: 351, column: 12)
!5938 = !DILocation(line: 354, column: 1, scope: !5905)
!5939 = distinct !DISubprogram(name: "_modbus_rtu_connect", scope: !78, file: !78, line: 397, type: !204, isLocal: true, isDefinition: true, scopeLine: 398, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!5940 = !DILocalVariable(name: "ctx", arg: 1, scope: !5939, file: !78, line: 397, type: !119)
!5941 = !DILocation(line: 397, column: 42, scope: !5939)
!5942 = !DILocalVariable(name: "tios", scope: !5939, file: !78, line: 402, type: !94)
!5943 = !DILocation(line: 402, column: 20, scope: !5939)
!5944 = !DILocalVariable(name: "speed", scope: !5939, file: !78, line: 403, type: !109)
!5945 = !DILocation(line: 403, column: 13, scope: !5939)
!5946 = !DILocalVariable(name: "flags", scope: !5939, file: !78, line: 404, type: !44)
!5947 = !DILocation(line: 404, column: 9, scope: !5939)
!5948 = !DILocalVariable(name: "ctx_rtu", scope: !5939, file: !78, line: 406, type: !81)
!5949 = !DILocation(line: 406, column: 19, scope: !5939)
!5950 = !DILocation(line: 406, column: 29, scope: !5939)
!5951 = !DILocation(line: 406, column: 34, scope: !5939)
!5952 = !DILocation(line: 408, column: 9, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 408, column: 9)
!5954 = !DILocation(line: 408, column: 14, scope: !5953)
!5955 = !DILocation(line: 408, column: 9, scope: !5939)
!5956 = !DILocation(line: 410, column: 16, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5953, file: !78, line: 408, column: 21)
!5958 = !DILocation(line: 410, column: 25, scope: !5957)
!5959 = !DILocation(line: 410, column: 33, scope: !5957)
!5960 = !DILocation(line: 410, column: 42, scope: !5957)
!5961 = !DILocation(line: 410, column: 48, scope: !5957)
!5962 = !DILocation(line: 410, column: 57, scope: !5957)
!5963 = !DILocation(line: 411, column: 16, scope: !5957)
!5964 = !DILocation(line: 411, column: 25, scope: !5957)
!5965 = !DILocation(line: 411, column: 35, scope: !5957)
!5966 = !DILocation(line: 411, column: 44, scope: !5957)
!5967 = !DILocation(line: 409, column: 9, scope: !5957)
!5968 = !DILocation(line: 412, column: 5, scope: !5957)
!5969 = !DILocation(line: 586, column: 11, scope: !5939)
!5970 = !DILocation(line: 588, column: 11, scope: !5939)
!5971 = !DILocation(line: 591, column: 19, scope: !5939)
!5972 = !DILocation(line: 591, column: 28, scope: !5939)
!5973 = !DILocation(line: 591, column: 36, scope: !5939)
!5974 = !DILocation(line: 591, column: 14, scope: !5939)
!5975 = !DILocation(line: 591, column: 5, scope: !5939)
!5976 = !DILocation(line: 591, column: 10, scope: !5939)
!5977 = !DILocation(line: 591, column: 12, scope: !5939)
!5978 = !DILocation(line: 592, column: 9, scope: !5979)
!5979 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 592, column: 9)
!5980 = !DILocation(line: 592, column: 14, scope: !5979)
!5981 = !DILocation(line: 592, column: 16, scope: !5979)
!5982 = !DILocation(line: 592, column: 9, scope: !5939)
!5983 = !DILocation(line: 593, column: 13, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5985, file: !78, line: 593, column: 13)
!5985 = distinct !DILexicalBlock(scope: !5979, file: !78, line: 592, column: 23)
!5986 = !DILocation(line: 593, column: 18, scope: !5984)
!5987 = !DILocation(line: 593, column: 13, scope: !5985)
!5988 = !DILocation(line: 594, column: 21, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5984, file: !78, line: 593, column: 25)
!5990 = !DILocation(line: 595, column: 21, scope: !5989)
!5991 = !DILocation(line: 595, column: 30, scope: !5989)
!5992 = !DILocation(line: 595, column: 47, scope: !5989)
!5993 = !DILocation(line: 595, column: 38, scope: !5989)
!5994 = !DILocation(line: 594, column: 13, scope: !5989)
!5995 = !DILocation(line: 596, column: 9, scope: !5989)
!5996 = !DILocation(line: 597, column: 9, scope: !5985)
!5997 = !DILocation(line: 601, column: 15, scope: !5939)
!5998 = !DILocation(line: 601, column: 20, scope: !5939)
!5999 = !DILocation(line: 601, column: 24, scope: !5939)
!6000 = !DILocation(line: 601, column: 33, scope: !5939)
!6001 = !DILocation(line: 601, column: 5, scope: !5939)
!6002 = !DILocation(line: 603, column: 5, scope: !5939)
!6003 = !DILocation(line: 608, column: 13, scope: !5939)
!6004 = !DILocation(line: 608, column: 22, scope: !5939)
!6005 = !DILocation(line: 608, column: 5, scope: !5939)
!6006 = !DILocation(line: 610, column: 15, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 608, column: 28)
!6008 = !DILocation(line: 611, column: 9, scope: !6007)
!6009 = !DILocation(line: 613, column: 15, scope: !6007)
!6010 = !DILocation(line: 614, column: 9, scope: !6007)
!6011 = !DILocation(line: 616, column: 15, scope: !6007)
!6012 = !DILocation(line: 617, column: 9, scope: !6007)
!6013 = !DILocation(line: 619, column: 15, scope: !6007)
!6014 = !DILocation(line: 620, column: 9, scope: !6007)
!6015 = !DILocation(line: 622, column: 15, scope: !6007)
!6016 = !DILocation(line: 623, column: 9, scope: !6007)
!6017 = !DILocation(line: 625, column: 15, scope: !6007)
!6018 = !DILocation(line: 626, column: 9, scope: !6007)
!6019 = !DILocation(line: 628, column: 15, scope: !6007)
!6020 = !DILocation(line: 629, column: 9, scope: !6007)
!6021 = !DILocation(line: 631, column: 15, scope: !6007)
!6022 = !DILocation(line: 632, column: 9, scope: !6007)
!6023 = !DILocation(line: 634, column: 15, scope: !6007)
!6024 = !DILocation(line: 635, column: 9, scope: !6007)
!6025 = !DILocation(line: 638, column: 15, scope: !6007)
!6026 = !DILocation(line: 639, column: 9, scope: !6007)
!6027 = !DILocation(line: 643, column: 15, scope: !6007)
!6028 = !DILocation(line: 644, column: 9, scope: !6007)
!6029 = !DILocation(line: 648, column: 15, scope: !6007)
!6030 = !DILocation(line: 649, column: 9, scope: !6007)
!6031 = !DILocation(line: 653, column: 15, scope: !6007)
!6032 = !DILocation(line: 654, column: 9, scope: !6007)
!6033 = !DILocation(line: 658, column: 15, scope: !6007)
!6034 = !DILocation(line: 659, column: 9, scope: !6007)
!6035 = !DILocation(line: 663, column: 15, scope: !6007)
!6036 = !DILocation(line: 664, column: 9, scope: !6007)
!6037 = !DILocation(line: 668, column: 15, scope: !6007)
!6038 = !DILocation(line: 669, column: 9, scope: !6007)
!6039 = !DILocation(line: 673, column: 15, scope: !6007)
!6040 = !DILocation(line: 674, column: 9, scope: !6007)
!6041 = !DILocation(line: 678, column: 15, scope: !6007)
!6042 = !DILocation(line: 679, column: 9, scope: !6007)
!6043 = !DILocation(line: 683, column: 15, scope: !6007)
!6044 = !DILocation(line: 684, column: 9, scope: !6007)
!6045 = !DILocation(line: 688, column: 15, scope: !6007)
!6046 = !DILocation(line: 689, column: 9, scope: !6007)
!6047 = !DILocation(line: 693, column: 15, scope: !6007)
!6048 = !DILocation(line: 694, column: 9, scope: !6007)
!6049 = !DILocation(line: 698, column: 15, scope: !6007)
!6050 = !DILocation(line: 699, column: 9, scope: !6007)
!6051 = !DILocation(line: 703, column: 15, scope: !6007)
!6052 = !DILocation(line: 704, column: 9, scope: !6007)
!6053 = !DILocation(line: 707, column: 15, scope: !6007)
!6054 = !DILocation(line: 708, column: 13, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6007, file: !78, line: 708, column: 13)
!6056 = !DILocation(line: 708, column: 18, scope: !6055)
!6057 = !DILocation(line: 708, column: 13, scope: !6007)
!6058 = !DILocation(line: 709, column: 21, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6055, file: !78, line: 708, column: 25)
!6060 = !DILocation(line: 711, column: 21, scope: !6059)
!6061 = !DILocation(line: 711, column: 30, scope: !6059)
!6062 = !DILocation(line: 711, column: 36, scope: !6059)
!6063 = !DILocation(line: 711, column: 45, scope: !6059)
!6064 = !DILocation(line: 709, column: 13, scope: !6059)
!6065 = !DILocation(line: 712, column: 9, scope: !6059)
!6066 = !DILocation(line: 713, column: 5, scope: !6007)
!6067 = !DILocation(line: 716, column: 29, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 716, column: 9)
!6069 = !DILocation(line: 716, column: 10, scope: !6068)
!6070 = !DILocation(line: 716, column: 36, scope: !6068)
!6071 = !DILocation(line: 716, column: 41, scope: !6068)
!6072 = !DILocation(line: 717, column: 29, scope: !6068)
!6073 = !DILocation(line: 717, column: 10, scope: !6068)
!6074 = !DILocation(line: 717, column: 36, scope: !6068)
!6075 = !DILocation(line: 716, column: 9, scope: !5939)
!6076 = !DILocation(line: 718, column: 15, scope: !6077)
!6077 = distinct !DILexicalBlock(scope: !6068, file: !78, line: 717, column: 42)
!6078 = !DILocation(line: 718, column: 20, scope: !6077)
!6079 = !DILocation(line: 718, column: 9, scope: !6077)
!6080 = !DILocation(line: 719, column: 9, scope: !6077)
!6081 = !DILocation(line: 719, column: 14, scope: !6077)
!6082 = !DILocation(line: 719, column: 16, scope: !6077)
!6083 = !DILocation(line: 720, column: 9, scope: !6077)
!6084 = !DILocation(line: 727, column: 10, scope: !5939)
!6085 = !DILocation(line: 727, column: 18, scope: !5939)
!6086 = !DILocation(line: 733, column: 10, scope: !5939)
!6087 = !DILocation(line: 733, column: 18, scope: !5939)
!6088 = !DILocation(line: 734, column: 13, scope: !5939)
!6089 = !DILocation(line: 734, column: 22, scope: !5939)
!6090 = !DILocation(line: 734, column: 5, scope: !5939)
!6091 = !DILocation(line: 736, column: 14, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 734, column: 32)
!6093 = !DILocation(line: 736, column: 22, scope: !6092)
!6094 = !DILocation(line: 737, column: 9, scope: !6092)
!6095 = !DILocation(line: 739, column: 14, scope: !6092)
!6096 = !DILocation(line: 739, column: 22, scope: !6092)
!6097 = !DILocation(line: 740, column: 9, scope: !6092)
!6098 = !DILocation(line: 742, column: 14, scope: !6092)
!6099 = !DILocation(line: 742, column: 22, scope: !6092)
!6100 = !DILocation(line: 743, column: 9, scope: !6092)
!6101 = !DILocation(line: 746, column: 14, scope: !6092)
!6102 = !DILocation(line: 746, column: 22, scope: !6092)
!6103 = !DILocation(line: 747, column: 9, scope: !6092)
!6104 = !DILocation(line: 751, column: 9, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 751, column: 9)
!6106 = !DILocation(line: 751, column: 18, scope: !6105)
!6107 = !DILocation(line: 751, column: 27, scope: !6105)
!6108 = !DILocation(line: 751, column: 9, scope: !5939)
!6109 = !DILocation(line: 752, column: 14, scope: !6105)
!6110 = !DILocation(line: 752, column: 22, scope: !6105)
!6111 = !DILocation(line: 752, column: 9, scope: !6105)
!6112 = !DILocation(line: 754, column: 14, scope: !6105)
!6113 = !DILocation(line: 754, column: 22, scope: !6105)
!6114 = !DILocation(line: 758, column: 9, scope: !6115)
!6115 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 758, column: 9)
!6116 = !DILocation(line: 758, column: 18, scope: !6115)
!6117 = !DILocation(line: 758, column: 25, scope: !6115)
!6118 = !DILocation(line: 758, column: 9, scope: !5939)
!6119 = !DILocation(line: 760, column: 14, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6115, file: !78, line: 758, column: 33)
!6121 = !DILocation(line: 760, column: 22, scope: !6120)
!6122 = !DILocation(line: 761, column: 5, scope: !6120)
!6123 = !DILocation(line: 761, column: 16, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6115, file: !78, line: 761, column: 16)
!6125 = !DILocation(line: 761, column: 25, scope: !6124)
!6126 = !DILocation(line: 761, column: 32, scope: !6124)
!6127 = !DILocation(line: 761, column: 16, scope: !6115)
!6128 = !DILocation(line: 763, column: 14, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6124, file: !78, line: 761, column: 40)
!6130 = !DILocation(line: 763, column: 22, scope: !6129)
!6131 = !DILocation(line: 764, column: 14, scope: !6129)
!6132 = !DILocation(line: 764, column: 22, scope: !6129)
!6133 = !DILocation(line: 765, column: 5, scope: !6129)
!6134 = !DILocation(line: 767, column: 14, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6124, file: !78, line: 765, column: 12)
!6136 = !DILocation(line: 767, column: 22, scope: !6135)
!6137 = !DILocation(line: 768, column: 14, scope: !6135)
!6138 = !DILocation(line: 768, column: 22, scope: !6135)
!6139 = !DILocation(line: 808, column: 10, scope: !5939)
!6140 = !DILocation(line: 808, column: 18, scope: !5939)
!6141 = !DILocation(line: 828, column: 9, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 828, column: 9)
!6143 = !DILocation(line: 828, column: 18, scope: !6142)
!6144 = !DILocation(line: 828, column: 25, scope: !6142)
!6145 = !DILocation(line: 828, column: 9, scope: !5939)
!6146 = !DILocation(line: 830, column: 14, scope: !6147)
!6147 = distinct !DILexicalBlock(scope: !6142, file: !78, line: 828, column: 33)
!6148 = !DILocation(line: 830, column: 22, scope: !6147)
!6149 = !DILocation(line: 831, column: 5, scope: !6147)
!6150 = !DILocation(line: 832, column: 14, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6142, file: !78, line: 831, column: 12)
!6152 = !DILocation(line: 832, column: 22, scope: !6151)
!6153 = !DILocation(line: 836, column: 10, scope: !5939)
!6154 = !DILocation(line: 836, column: 18, scope: !5939)
!6155 = !DILocation(line: 846, column: 10, scope: !5939)
!6156 = !DILocation(line: 846, column: 18, scope: !5939)
!6157 = !DILocation(line: 888, column: 10, scope: !5939)
!6158 = !DILocation(line: 888, column: 5, scope: !5939)
!6159 = !DILocation(line: 888, column: 21, scope: !5939)
!6160 = !DILocation(line: 889, column: 10, scope: !5939)
!6161 = !DILocation(line: 889, column: 5, scope: !5939)
!6162 = !DILocation(line: 889, column: 22, scope: !5939)
!6163 = !DILocation(line: 891, column: 19, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !5939, file: !78, line: 891, column: 9)
!6165 = !DILocation(line: 891, column: 24, scope: !6164)
!6166 = !DILocation(line: 891, column: 9, scope: !6164)
!6167 = !DILocation(line: 891, column: 43, scope: !6164)
!6168 = !DILocation(line: 891, column: 9, scope: !5939)
!6169 = !DILocation(line: 892, column: 15, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6164, file: !78, line: 891, column: 48)
!6171 = !DILocation(line: 892, column: 20, scope: !6170)
!6172 = !DILocation(line: 892, column: 9, scope: !6170)
!6173 = !DILocation(line: 893, column: 9, scope: !6170)
!6174 = !DILocation(line: 893, column: 14, scope: !6170)
!6175 = !DILocation(line: 893, column: 16, scope: !6170)
!6176 = !DILocation(line: 894, column: 9, scope: !6170)
!6177 = !DILocation(line: 898, column: 5, scope: !5939)
!6178 = !DILocation(line: 899, column: 1, scope: !5939)
!6179 = distinct !DISubprogram(name: "_modbus_rtu_close", scope: !78, file: !78, line: 1115, type: !208, isLocal: true, isDefinition: true, scopeLine: 1116, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!6180 = !DILocalVariable(name: "ctx", arg: 1, scope: !6179, file: !78, line: 1115, type: !119)
!6181 = !DILocation(line: 1115, column: 41, scope: !6179)
!6182 = !DILocalVariable(name: "ctx_rtu", scope: !6179, file: !78, line: 1118, type: !81)
!6183 = !DILocation(line: 1118, column: 19, scope: !6179)
!6184 = !DILocation(line: 1118, column: 29, scope: !6179)
!6185 = !DILocation(line: 1118, column: 34, scope: !6179)
!6186 = !DILocation(line: 1132, column: 9, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6179, file: !78, line: 1132, column: 9)
!6188 = !DILocation(line: 1132, column: 14, scope: !6187)
!6189 = !DILocation(line: 1132, column: 16, scope: !6187)
!6190 = !DILocation(line: 1132, column: 9, scope: !6179)
!6191 = !DILocation(line: 1133, column: 19, scope: !6192)
!6192 = distinct !DILexicalBlock(scope: !6187, file: !78, line: 1132, column: 23)
!6193 = !DILocation(line: 1133, column: 24, scope: !6192)
!6194 = !DILocation(line: 1133, column: 37, scope: !6192)
!6195 = !DILocation(line: 1133, column: 46, scope: !6192)
!6196 = !DILocation(line: 1133, column: 9, scope: !6192)
!6197 = !DILocation(line: 1134, column: 15, scope: !6192)
!6198 = !DILocation(line: 1134, column: 20, scope: !6192)
!6199 = !DILocation(line: 1134, column: 9, scope: !6192)
!6200 = !DILocation(line: 1135, column: 9, scope: !6192)
!6201 = !DILocation(line: 1135, column: 14, scope: !6192)
!6202 = !DILocation(line: 1135, column: 16, scope: !6192)
!6203 = !DILocation(line: 1136, column: 5, scope: !6192)
!6204 = !DILocation(line: 1138, column: 1, scope: !6179)
!6205 = distinct !DISubprogram(name: "_modbus_rtu_flush", scope: !78, file: !78, line: 1140, type: !204, isLocal: true, isDefinition: true, scopeLine: 1141, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!6206 = !DILocalVariable(name: "ctx", arg: 1, scope: !6205, file: !78, line: 1140, type: !119)
!6207 = !DILocation(line: 1140, column: 40, scope: !6205)
!6208 = !DILocation(line: 1147, column: 20, scope: !6205)
!6209 = !DILocation(line: 1147, column: 25, scope: !6205)
!6210 = !DILocation(line: 1147, column: 12, scope: !6205)
!6211 = !DILocation(line: 1147, column: 5, scope: !6205)
!6212 = distinct !DISubprogram(name: "_modbus_rtu_select", scope: !78, file: !78, line: 1151, type: !213, isLocal: true, isDefinition: true, scopeLine: 1153, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!6213 = !DILocalVariable(name: "ctx", arg: 1, scope: !6212, file: !78, line: 1151, type: !119)
!6214 = !DILocation(line: 1151, column: 41, scope: !6212)
!6215 = !DILocalVariable(name: "rset", arg: 2, scope: !6212, file: !78, line: 1151, type: !215)
!6216 = !DILocation(line: 1151, column: 54, scope: !6212)
!6217 = !DILocalVariable(name: "tv", arg: 3, scope: !6212, file: !78, line: 1152, type: !223)
!6218 = !DILocation(line: 1152, column: 47, scope: !6212)
!6219 = !DILocalVariable(name: "length_to_read", arg: 4, scope: !6212, file: !78, line: 1152, type: !44)
!6220 = !DILocation(line: 1152, column: 55, scope: !6212)
!6221 = !DILocalVariable(name: "s_rc", scope: !6212, file: !78, line: 1154, type: !44)
!6222 = !DILocation(line: 1154, column: 9, scope: !6212)
!6223 = !DILocation(line: 1167, column: 5, scope: !6212)
!6224 = !DILocation(line: 1167, column: 27, scope: !6212)
!6225 = !DILocation(line: 1167, column: 32, scope: !6212)
!6226 = !DILocation(line: 1167, column: 33, scope: !6212)
!6227 = !DILocation(line: 1167, column: 37, scope: !6212)
!6228 = !DILocation(line: 1167, column: 55, scope: !6212)
!6229 = !DILocation(line: 1167, column: 20, scope: !6212)
!6230 = !DILocation(line: 1167, column: 18, scope: !6212)
!6231 = !DILocation(line: 1167, column: 60, scope: !6212)
!6232 = !DILocation(line: 1168, column: 13, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6234, file: !78, line: 1168, column: 13)
!6234 = distinct !DILexicalBlock(scope: !6212, file: !78, line: 1167, column: 67)
!6235 = !DILocation(line: 1168, column: 19, scope: !6233)
!6236 = !DILocation(line: 1168, column: 13, scope: !6234)
!6237 = !DILocation(line: 1169, column: 17, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6239, file: !78, line: 1169, column: 17)
!6239 = distinct !DILexicalBlock(scope: !6233, file: !78, line: 1168, column: 29)
!6240 = !DILocation(line: 1169, column: 22, scope: !6238)
!6241 = !DILocation(line: 1169, column: 17, scope: !6239)
!6242 = !DILocation(line: 1170, column: 25, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6238, file: !78, line: 1169, column: 29)
!6244 = !DILocation(line: 1170, column: 17, scope: !6243)
!6245 = !DILocation(line: 1171, column: 13, scope: !6243)
!6246 = !DILocation(line: 1173, column: 13, scope: !6239)
!6247 = distinct !{!6247, !6246, !6246}
!6248 = !DILocalVariable(name: "__d0", scope: !6249, file: !78, line: 1173, type: !44)
!6249 = distinct !DILexicalBlock(scope: !6239, file: !78, line: 1173, column: 13)
!6250 = !DILocation(line: 1173, column: 13, scope: !6249)
!6251 = !DILocalVariable(name: "__d1", scope: !6249, file: !78, line: 1173, type: !44)
!6252 = !{i32 -2146684939}
!6253 = !DILocation(line: 1174, column: 13, scope: !6239)
!6254 = !DILocation(line: 1175, column: 9, scope: !6239)
!6255 = !DILocation(line: 1176, column: 13, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6233, file: !78, line: 1175, column: 16)
!6257 = distinct !{!6257, !6223, !6258}
!6258 = !DILocation(line: 1178, column: 5, scope: !6212)
!6259 = !DILocation(line: 1180, column: 9, scope: !6260)
!6260 = distinct !DILexicalBlock(scope: !6212, file: !78, line: 1180, column: 9)
!6261 = !DILocation(line: 1180, column: 14, scope: !6260)
!6262 = !DILocation(line: 1180, column: 9, scope: !6212)
!6263 = !DILocation(line: 1182, column: 9, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6260, file: !78, line: 1180, column: 20)
!6265 = !DILocation(line: 1182, column: 15, scope: !6264)
!6266 = !DILocation(line: 1183, column: 9, scope: !6264)
!6267 = !DILocation(line: 1187, column: 12, scope: !6212)
!6268 = !DILocation(line: 1187, column: 5, scope: !6212)
!6269 = !DILocation(line: 1188, column: 1, scope: !6212)
!6270 = distinct !DISubprogram(name: "_modbus_rtu_free", scope: !78, file: !78, line: 1190, type: !208, isLocal: true, isDefinition: true, scopeLine: 1190, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!6271 = !DILocalVariable(name: "ctx", arg: 1, scope: !6270, file: !78, line: 1190, type: !119)
!6272 = !DILocation(line: 1190, column: 40, scope: !6270)
!6273 = !DILocation(line: 1191, column: 9, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6270, file: !78, line: 1191, column: 9)
!6275 = !DILocation(line: 1191, column: 14, scope: !6274)
!6276 = !DILocation(line: 1191, column: 9, scope: !6270)
!6277 = !DILocation(line: 1192, column: 31, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6274, file: !78, line: 1191, column: 28)
!6279 = !DILocation(line: 1192, column: 36, scope: !6278)
!6280 = !DILocation(line: 1192, column: 15, scope: !6278)
!6281 = !DILocation(line: 1192, column: 51, scope: !6278)
!6282 = !DILocation(line: 1192, column: 9, scope: !6278)
!6283 = !DILocation(line: 1193, column: 14, scope: !6278)
!6284 = !DILocation(line: 1193, column: 19, scope: !6278)
!6285 = !DILocation(line: 1193, column: 9, scope: !6278)
!6286 = !DILocation(line: 1194, column: 5, scope: !6278)
!6287 = !DILocation(line: 1196, column: 10, scope: !6270)
!6288 = !DILocation(line: 1196, column: 5, scope: !6270)
!6289 = !DILocation(line: 1197, column: 1, scope: !6270)
!6290 = distinct !DISubprogram(name: "crc16", scope: !78, file: !78, line: 132, type: !6291, isLocal: true, isDefinition: true, scopeLine: 133, flags: DIFlagPrototyped, isOptimized: false, unit: !77, variables: !440)
!6291 = !DISubroutineType(types: !6292)
!6292 = !{!65, !61, !65}
!6293 = !DILocalVariable(name: "buffer", arg: 1, scope: !6290, file: !78, line: 132, type: !61)
!6294 = !DILocation(line: 132, column: 32, scope: !6290)
!6295 = !DILocalVariable(name: "buffer_length", arg: 2, scope: !6290, file: !78, line: 132, type: !65)
!6296 = !DILocation(line: 132, column: 49, scope: !6290)
!6297 = !DILocalVariable(name: "crc_hi", scope: !6290, file: !78, line: 134, type: !45)
!6298 = !DILocation(line: 134, column: 13, scope: !6290)
!6299 = !DILocalVariable(name: "crc_lo", scope: !6290, file: !78, line: 135, type: !45)
!6300 = !DILocation(line: 135, column: 13, scope: !6290)
!6301 = !DILocalVariable(name: "i", scope: !6290, file: !78, line: 136, type: !72)
!6302 = !DILocation(line: 136, column: 18, scope: !6290)
!6303 = !DILocation(line: 139, column: 5, scope: !6290)
!6304 = !DILocation(line: 139, column: 25, scope: !6290)
!6305 = !DILocation(line: 140, column: 13, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !6290, file: !78, line: 139, column: 29)
!6307 = !DILocation(line: 140, column: 29, scope: !6306)
!6308 = !DILocation(line: 140, column: 22, scope: !6306)
!6309 = !DILocation(line: 140, column: 20, scope: !6306)
!6310 = !DILocation(line: 140, column: 11, scope: !6306)
!6311 = !DILocation(line: 141, column: 18, scope: !6306)
!6312 = !DILocation(line: 141, column: 40, scope: !6306)
!6313 = !DILocation(line: 141, column: 27, scope: !6306)
!6314 = !DILocation(line: 141, column: 25, scope: !6306)
!6315 = !DILocation(line: 141, column: 16, scope: !6306)
!6316 = !DILocation(line: 142, column: 31, scope: !6306)
!6317 = !DILocation(line: 142, column: 18, scope: !6306)
!6318 = !DILocation(line: 142, column: 16, scope: !6306)
!6319 = distinct !{!6319, !6303, !6320}
!6320 = !DILocation(line: 143, column: 5, scope: !6290)
!6321 = !DILocation(line: 145, column: 13, scope: !6290)
!6322 = !DILocation(line: 145, column: 20, scope: !6290)
!6323 = !DILocation(line: 145, column: 27, scope: !6290)
!6324 = !DILocation(line: 145, column: 25, scope: !6290)
!6325 = !DILocation(line: 145, column: 12, scope: !6290)
!6326 = !DILocation(line: 145, column: 5, scope: !6290)
!6327 = distinct !DISubprogram(name: "modbus_tcp_listen", scope: !238, file: !238, line: 480, type: !350, isLocal: false, isDefinition: true, scopeLine: 481, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6328 = !DILocalVariable(name: "ctx", arg: 1, scope: !6327, file: !238, line: 480, type: !323)
!6329 = !DILocation(line: 480, column: 33, scope: !6327)
!6330 = !DILocalVariable(name: "nb_connection", arg: 2, scope: !6327, file: !238, line: 480, type: !44)
!6331 = !DILocation(line: 480, column: 42, scope: !6327)
!6332 = !DILocalVariable(name: "new_s", scope: !6327, file: !238, line: 482, type: !44)
!6333 = !DILocation(line: 482, column: 9, scope: !6327)
!6334 = !DILocalVariable(name: "enable", scope: !6327, file: !238, line: 483, type: !44)
!6335 = !DILocation(line: 483, column: 9, scope: !6327)
!6336 = !DILocalVariable(name: "addr", scope: !6327, file: !238, line: 484, type: !6337)
!6337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_in", file: !253, line: 239, size: 128, elements: !6338)
!6338 = !{!6339, !6340, !6342, !6346}
!6339 = !DIDerivedType(tag: DW_TAG_member, name: "sin_family", scope: !6337, file: !253, line: 241, baseType: !317, size: 16)
!6340 = !DIDerivedType(tag: DW_TAG_member, name: "sin_port", scope: !6337, file: !253, line: 242, baseType: !6341, size: 16, offset: 16)
!6341 = !DIDerivedType(tag: DW_TAG_typedef, name: "in_port_t", file: !253, line: 119, baseType: !65)
!6342 = !DIDerivedType(tag: DW_TAG_member, name: "sin_addr", scope: !6337, file: !253, line: 243, baseType: !6343, size: 32, offset: 32)
!6343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "in_addr", file: !253, line: 31, size: 32, elements: !6344)
!6344 = !{!6345}
!6345 = !DIDerivedType(tag: DW_TAG_member, name: "s_addr", scope: !6343, file: !253, line: 33, baseType: !311, size: 32)
!6346 = !DIDerivedType(tag: DW_TAG_member, name: "sin_zero", scope: !6337, file: !253, line: 246, baseType: !6347, size: 64, offset: 64)
!6347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !47, size: 64, elements: !6348)
!6348 = !{!6349}
!6349 = !DISubrange(count: 8)
!6350 = !DILocation(line: 484, column: 24, scope: !6327)
!6351 = !DILocalVariable(name: "ctx_tcp", scope: !6327, file: !238, line: 485, type: !410)
!6352 = !DILocation(line: 485, column: 19, scope: !6327)
!6353 = !DILocation(line: 487, column: 9, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 487, column: 9)
!6355 = !DILocation(line: 487, column: 13, scope: !6354)
!6356 = !DILocation(line: 487, column: 9, scope: !6327)
!6357 = !DILocation(line: 488, column: 9, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6354, file: !238, line: 487, column: 22)
!6359 = !DILocation(line: 488, column: 15, scope: !6358)
!6360 = !DILocation(line: 489, column: 9, scope: !6358)
!6361 = !DILocation(line: 492, column: 15, scope: !6327)
!6362 = !DILocation(line: 492, column: 20, scope: !6327)
!6363 = !DILocation(line: 492, column: 13, scope: !6327)
!6364 = !DILocation(line: 500, column: 13, scope: !6327)
!6365 = !DILocation(line: 500, column: 11, scope: !6327)
!6366 = !DILocation(line: 501, column: 9, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 501, column: 9)
!6368 = !DILocation(line: 501, column: 15, scope: !6367)
!6369 = !DILocation(line: 501, column: 9, scope: !6327)
!6370 = !DILocation(line: 502, column: 9, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6367, file: !238, line: 501, column: 22)
!6372 = !DILocation(line: 505, column: 12, scope: !6327)
!6373 = !DILocation(line: 506, column: 20, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 506, column: 9)
!6375 = !DILocation(line: 507, column: 20, scope: !6374)
!6376 = !DILocation(line: 506, column: 9, scope: !6374)
!6377 = !DILocation(line: 507, column: 53, scope: !6374)
!6378 = !DILocation(line: 506, column: 9, scope: !6327)
!6379 = !DILocation(line: 508, column: 15, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6374, file: !238, line: 507, column: 60)
!6381 = !DILocation(line: 508, column: 9, scope: !6380)
!6382 = !DILocation(line: 509, column: 9, scope: !6380)
!6383 = !DILocation(line: 512, column: 5, scope: !6327)
!6384 = !DILocation(line: 513, column: 10, scope: !6327)
!6385 = !DILocation(line: 513, column: 21, scope: !6327)
!6386 = !DILocation(line: 515, column: 27, scope: !6327)
!6387 = !DILocation(line: 515, column: 36, scope: !6327)
!6388 = !DILocation(line: 515, column: 21, scope: !6327)
!6389 = !DILocation(line: 515, column: 10, scope: !6327)
!6390 = !DILocation(line: 515, column: 19, scope: !6327)
!6391 = !DILocation(line: 516, column: 9, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 516, column: 9)
!6393 = !DILocation(line: 516, column: 18, scope: !6392)
!6394 = !DILocation(line: 516, column: 24, scope: !6392)
!6395 = !DILocation(line: 516, column: 9, scope: !6327)
!6396 = !DILocation(line: 518, column: 32, scope: !6397)
!6397 = distinct !DILexicalBlock(scope: !6392, file: !238, line: 516, column: 32)
!6398 = !DILocation(line: 518, column: 14, scope: !6397)
!6399 = !DILocation(line: 518, column: 23, scope: !6397)
!6400 = !DILocation(line: 518, column: 30, scope: !6397)
!6401 = !DILocation(line: 519, column: 5, scope: !6397)
!6402 = !DILocation(line: 521, column: 42, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6392, file: !238, line: 519, column: 12)
!6404 = !DILocation(line: 521, column: 51, scope: !6403)
!6405 = !DILocation(line: 521, column: 32, scope: !6403)
!6406 = !DILocation(line: 521, column: 14, scope: !6403)
!6407 = !DILocation(line: 521, column: 23, scope: !6403)
!6408 = !DILocation(line: 521, column: 30, scope: !6403)
!6409 = !DILocation(line: 523, column: 14, scope: !6410)
!6410 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 523, column: 9)
!6411 = !DILocation(line: 523, column: 21, scope: !6410)
!6412 = !DILocation(line: 523, column: 9, scope: !6410)
!6413 = !DILocation(line: 523, column: 61, scope: !6410)
!6414 = !DILocation(line: 523, column: 9, scope: !6327)
!6415 = !DILocation(line: 524, column: 15, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6410, file: !238, line: 523, column: 68)
!6417 = !DILocation(line: 524, column: 9, scope: !6416)
!6418 = !DILocation(line: 525, column: 9, scope: !6416)
!6419 = !DILocation(line: 528, column: 16, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6327, file: !238, line: 528, column: 9)
!6421 = !DILocation(line: 528, column: 23, scope: !6420)
!6422 = !DILocation(line: 528, column: 9, scope: !6420)
!6423 = !DILocation(line: 528, column: 38, scope: !6420)
!6424 = !DILocation(line: 528, column: 9, scope: !6327)
!6425 = !DILocation(line: 529, column: 15, scope: !6426)
!6426 = distinct !DILexicalBlock(scope: !6420, file: !238, line: 528, column: 45)
!6427 = !DILocation(line: 529, column: 9, scope: !6426)
!6428 = !DILocation(line: 530, column: 9, scope: !6426)
!6429 = !DILocation(line: 533, column: 12, scope: !6327)
!6430 = !DILocation(line: 533, column: 5, scope: !6327)
!6431 = !DILocation(line: 534, column: 1, scope: !6327)
!6432 = distinct !DISubprogram(name: "modbus_tcp_pi_listen", scope: !238, file: !238, line: 536, type: !350, isLocal: false, isDefinition: true, scopeLine: 537, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6433 = !DILocalVariable(name: "ctx", arg: 1, scope: !6432, file: !238, line: 536, type: !323)
!6434 = !DILocation(line: 536, column: 36, scope: !6432)
!6435 = !DILocalVariable(name: "nb_connection", arg: 2, scope: !6432, file: !238, line: 536, type: !44)
!6436 = !DILocation(line: 536, column: 45, scope: !6432)
!6437 = !DILocalVariable(name: "rc", scope: !6432, file: !238, line: 538, type: !44)
!6438 = !DILocation(line: 538, column: 9, scope: !6432)
!6439 = !DILocalVariable(name: "ai_list", scope: !6432, file: !238, line: 539, type: !6440)
!6440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6441, size: 64)
!6441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !6442, line: 567, size: 384, elements: !6443)
!6442 = !DIFile(filename: "/usr/include/netdb.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!6443 = !{!6444, !6445, !6446, !6447, !6448, !6452, !6453, !6454}
!6444 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !6441, file: !6442, line: 569, baseType: !44, size: 32)
!6445 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !6441, file: !6442, line: 570, baseType: !44, size: 32, offset: 32)
!6446 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !6441, file: !6442, line: 571, baseType: !44, size: 32, offset: 64)
!6447 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !6441, file: !6442, line: 572, baseType: !44, size: 32, offset: 96)
!6448 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !6441, file: !6442, line: 573, baseType: !6449, size: 32, offset: 128)
!6449 = !DIDerivedType(tag: DW_TAG_typedef, name: "socklen_t", file: !6450, line: 277, baseType: !6451)
!6450 = !DIFile(filename: "/usr/include/unistd.h", directory: "/home/kevin/Downloads/libmodbus-master/build/src")
!6451 = !DIDerivedType(tag: DW_TAG_typedef, name: "__socklen_t", file: !133, line: 189, baseType: !72)
!6452 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !6441, file: !6442, line: 574, baseType: !313, size: 64, offset: 192)
!6453 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !6441, file: !6442, line: 575, baseType: !87, size: 64, offset: 256)
!6454 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !6441, file: !6442, line: 576, baseType: !6440, size: 64, offset: 320)
!6455 = !DILocation(line: 539, column: 22, scope: !6432)
!6456 = !DILocalVariable(name: "ai_ptr", scope: !6432, file: !238, line: 540, type: !6440)
!6457 = !DILocation(line: 540, column: 22, scope: !6432)
!6458 = !DILocalVariable(name: "ai_hints", scope: !6432, file: !238, line: 541, type: !6441)
!6459 = !DILocation(line: 541, column: 21, scope: !6432)
!6460 = !DILocalVariable(name: "node", scope: !6432, file: !238, line: 542, type: !431)
!6461 = !DILocation(line: 542, column: 17, scope: !6432)
!6462 = !DILocalVariable(name: "service", scope: !6432, file: !238, line: 543, type: !431)
!6463 = !DILocation(line: 543, column: 17, scope: !6432)
!6464 = !DILocalVariable(name: "new_s", scope: !6432, file: !238, line: 544, type: !44)
!6465 = !DILocation(line: 544, column: 9, scope: !6432)
!6466 = !DILocalVariable(name: "ctx_tcp_pi", scope: !6432, file: !238, line: 545, type: !419)
!6467 = !DILocation(line: 545, column: 22, scope: !6432)
!6468 = !DILocation(line: 547, column: 9, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 547, column: 9)
!6470 = !DILocation(line: 547, column: 13, scope: !6469)
!6471 = !DILocation(line: 547, column: 9, scope: !6432)
!6472 = !DILocation(line: 548, column: 9, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6469, file: !238, line: 547, column: 22)
!6474 = !DILocation(line: 548, column: 15, scope: !6473)
!6475 = !DILocation(line: 549, column: 9, scope: !6473)
!6476 = !DILocation(line: 552, column: 18, scope: !6432)
!6477 = !DILocation(line: 552, column: 23, scope: !6432)
!6478 = !DILocation(line: 552, column: 16, scope: !6432)
!6479 = !DILocation(line: 560, column: 9, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 560, column: 9)
!6481 = !DILocation(line: 560, column: 21, scope: !6480)
!6482 = !DILocation(line: 560, column: 29, scope: !6480)
!6483 = !DILocation(line: 560, column: 9, scope: !6432)
!6484 = !DILocation(line: 561, column: 14, scope: !6485)
!6485 = distinct !DILexicalBlock(scope: !6480, file: !238, line: 560, column: 35)
!6486 = !DILocation(line: 562, column: 5, scope: !6485)
!6487 = !DILocation(line: 563, column: 16, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6480, file: !238, line: 562, column: 12)
!6489 = !DILocation(line: 563, column: 28, scope: !6488)
!6490 = !DILocation(line: 563, column: 14, scope: !6488)
!6491 = !DILocation(line: 566, column: 9, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 566, column: 9)
!6493 = !DILocation(line: 566, column: 21, scope: !6492)
!6494 = !DILocation(line: 566, column: 32, scope: !6492)
!6495 = !DILocation(line: 566, column: 9, scope: !6432)
!6496 = !DILocation(line: 567, column: 17, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6492, file: !238, line: 566, column: 38)
!6498 = !DILocation(line: 568, column: 5, scope: !6497)
!6499 = !DILocation(line: 569, column: 19, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6492, file: !238, line: 568, column: 12)
!6501 = !DILocation(line: 569, column: 31, scope: !6500)
!6502 = !DILocation(line: 569, column: 17, scope: !6500)
!6503 = !DILocation(line: 572, column: 5, scope: !6432)
!6504 = !DILocation(line: 574, column: 14, scope: !6432)
!6505 = !DILocation(line: 574, column: 23, scope: !6432)
!6506 = !DILocation(line: 576, column: 14, scope: !6432)
!6507 = !DILocation(line: 576, column: 23, scope: !6432)
!6508 = !DILocation(line: 578, column: 14, scope: !6432)
!6509 = !DILocation(line: 578, column: 24, scope: !6432)
!6510 = !DILocation(line: 579, column: 14, scope: !6432)
!6511 = !DILocation(line: 579, column: 26, scope: !6432)
!6512 = !DILocation(line: 580, column: 14, scope: !6432)
!6513 = !DILocation(line: 580, column: 22, scope: !6432)
!6514 = !DILocation(line: 581, column: 14, scope: !6432)
!6515 = !DILocation(line: 581, column: 27, scope: !6432)
!6516 = !DILocation(line: 582, column: 14, scope: !6432)
!6517 = !DILocation(line: 582, column: 22, scope: !6432)
!6518 = !DILocation(line: 584, column: 13, scope: !6432)
!6519 = !DILocation(line: 585, column: 22, scope: !6432)
!6520 = !DILocation(line: 585, column: 28, scope: !6432)
!6521 = !DILocation(line: 585, column: 10, scope: !6432)
!6522 = !DILocation(line: 585, column: 8, scope: !6432)
!6523 = !DILocation(line: 586, column: 9, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 586, column: 9)
!6525 = !DILocation(line: 586, column: 12, scope: !6524)
!6526 = !DILocation(line: 586, column: 9, scope: !6432)
!6527 = !DILocation(line: 587, column: 13, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6529, file: !238, line: 587, column: 13)
!6529 = distinct !DILexicalBlock(scope: !6524, file: !238, line: 586, column: 18)
!6530 = !DILocation(line: 587, column: 18, scope: !6528)
!6531 = !DILocation(line: 587, column: 13, scope: !6529)
!6532 = !DILocation(line: 588, column: 21, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6528, file: !238, line: 587, column: 25)
!6534 = !DILocation(line: 588, column: 81, scope: !6533)
!6535 = !DILocation(line: 588, column: 68, scope: !6533)
!6536 = !DILocation(line: 588, column: 13, scope: !6533)
!6537 = !DILocation(line: 589, column: 9, scope: !6533)
!6538 = !DILocation(line: 590, column: 9, scope: !6529)
!6539 = !DILocation(line: 590, column: 15, scope: !6529)
!6540 = !DILocation(line: 591, column: 9, scope: !6529)
!6541 = !DILocation(line: 594, column: 11, scope: !6432)
!6542 = !DILocation(line: 595, column: 19, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 595, column: 5)
!6544 = !DILocation(line: 595, column: 17, scope: !6543)
!6545 = !DILocation(line: 595, column: 10, scope: !6543)
!6546 = !DILocation(line: 595, column: 28, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6543, file: !238, line: 595, column: 5)
!6548 = !DILocation(line: 595, column: 35, scope: !6547)
!6549 = !DILocation(line: 595, column: 5, scope: !6543)
!6550 = !DILocalVariable(name: "s", scope: !6551, file: !238, line: 596, type: !44)
!6551 = distinct !DILexicalBlock(scope: !6547, file: !238, line: 595, column: 70)
!6552 = !DILocation(line: 596, column: 13, scope: !6551)
!6553 = !DILocation(line: 598, column: 20, scope: !6551)
!6554 = !DILocation(line: 598, column: 28, scope: !6551)
!6555 = !DILocation(line: 598, column: 39, scope: !6551)
!6556 = !DILocation(line: 598, column: 47, scope: !6551)
!6557 = !DILocation(line: 599, column: 20, scope: !6551)
!6558 = !DILocation(line: 599, column: 28, scope: !6551)
!6559 = !DILocation(line: 598, column: 13, scope: !6551)
!6560 = !DILocation(line: 598, column: 11, scope: !6551)
!6561 = !DILocation(line: 600, column: 13, scope: !6562)
!6562 = distinct !DILexicalBlock(scope: !6551, file: !238, line: 600, column: 13)
!6563 = !DILocation(line: 600, column: 15, scope: !6562)
!6564 = !DILocation(line: 600, column: 13, scope: !6551)
!6565 = !DILocation(line: 601, column: 17, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6567, file: !238, line: 601, column: 17)
!6567 = distinct !DILexicalBlock(scope: !6562, file: !238, line: 600, column: 20)
!6568 = !DILocation(line: 601, column: 22, scope: !6566)
!6569 = !DILocation(line: 601, column: 17, scope: !6567)
!6570 = !DILocation(line: 602, column: 17, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6566, file: !238, line: 601, column: 29)
!6572 = !DILocation(line: 603, column: 13, scope: !6571)
!6573 = !DILocation(line: 604, column: 13, scope: !6567)
!6574 = !DILocalVariable(name: "enable", scope: !6575, file: !238, line: 606, type: !44)
!6575 = distinct !DILexicalBlock(scope: !6562, file: !238, line: 605, column: 16)
!6576 = !DILocation(line: 606, column: 17, scope: !6575)
!6577 = !DILocation(line: 607, column: 29, scope: !6575)
!6578 = !DILocation(line: 608, column: 29, scope: !6575)
!6579 = !DILocation(line: 607, column: 18, scope: !6575)
!6580 = !DILocation(line: 607, column: 16, scope: !6575)
!6581 = !DILocation(line: 609, column: 17, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6575, file: !238, line: 609, column: 17)
!6583 = !DILocation(line: 609, column: 20, scope: !6582)
!6584 = !DILocation(line: 609, column: 17, scope: !6575)
!6585 = !DILocation(line: 610, column: 23, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6582, file: !238, line: 609, column: 26)
!6587 = !DILocation(line: 610, column: 17, scope: !6586)
!6588 = !DILocation(line: 611, column: 21, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6586, file: !238, line: 611, column: 21)
!6590 = !DILocation(line: 611, column: 26, scope: !6589)
!6591 = !DILocation(line: 611, column: 21, scope: !6586)
!6592 = !DILocation(line: 612, column: 21, scope: !6593)
!6593 = distinct !DILexicalBlock(scope: !6589, file: !238, line: 611, column: 33)
!6594 = !DILocation(line: 613, column: 17, scope: !6593)
!6595 = !DILocation(line: 614, column: 17, scope: !6586)
!6596 = !DILocation(line: 618, column: 19, scope: !6551)
!6597 = !DILocation(line: 618, column: 22, scope: !6551)
!6598 = !DILocation(line: 618, column: 30, scope: !6551)
!6599 = !DILocation(line: 618, column: 39, scope: !6551)
!6600 = !DILocation(line: 618, column: 47, scope: !6551)
!6601 = !DILocation(line: 618, column: 14, scope: !6551)
!6602 = !DILocation(line: 618, column: 12, scope: !6551)
!6603 = !DILocation(line: 619, column: 13, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6551, file: !238, line: 619, column: 13)
!6605 = !DILocation(line: 619, column: 16, scope: !6604)
!6606 = !DILocation(line: 619, column: 13, scope: !6551)
!6607 = !DILocation(line: 620, column: 19, scope: !6608)
!6608 = distinct !DILexicalBlock(scope: !6604, file: !238, line: 619, column: 22)
!6609 = !DILocation(line: 620, column: 13, scope: !6608)
!6610 = !DILocation(line: 621, column: 17, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6608, file: !238, line: 621, column: 17)
!6612 = !DILocation(line: 621, column: 22, scope: !6611)
!6613 = !DILocation(line: 621, column: 17, scope: !6608)
!6614 = !DILocation(line: 622, column: 17, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6611, file: !238, line: 621, column: 29)
!6616 = !DILocation(line: 623, column: 13, scope: !6615)
!6617 = !DILocation(line: 624, column: 13, scope: !6608)
!6618 = !DILocation(line: 627, column: 21, scope: !6551)
!6619 = !DILocation(line: 627, column: 24, scope: !6551)
!6620 = !DILocation(line: 627, column: 14, scope: !6551)
!6621 = !DILocation(line: 627, column: 12, scope: !6551)
!6622 = !DILocation(line: 628, column: 13, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6551, file: !238, line: 628, column: 13)
!6624 = !DILocation(line: 628, column: 16, scope: !6623)
!6625 = !DILocation(line: 628, column: 13, scope: !6551)
!6626 = !DILocation(line: 629, column: 19, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !6623, file: !238, line: 628, column: 22)
!6628 = !DILocation(line: 629, column: 13, scope: !6627)
!6629 = !DILocation(line: 630, column: 17, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6627, file: !238, line: 630, column: 17)
!6631 = !DILocation(line: 630, column: 22, scope: !6630)
!6632 = !DILocation(line: 630, column: 17, scope: !6627)
!6633 = !DILocation(line: 631, column: 17, scope: !6634)
!6634 = distinct !DILexicalBlock(scope: !6630, file: !238, line: 630, column: 29)
!6635 = !DILocation(line: 632, column: 13, scope: !6634)
!6636 = !DILocation(line: 633, column: 13, scope: !6627)
!6637 = !DILocation(line: 636, column: 17, scope: !6551)
!6638 = !DILocation(line: 636, column: 15, scope: !6551)
!6639 = !DILocation(line: 637, column: 9, scope: !6551)
!6640 = !DILocation(line: 595, column: 53, scope: !6547)
!6641 = !DILocation(line: 595, column: 61, scope: !6547)
!6642 = !DILocation(line: 595, column: 51, scope: !6547)
!6643 = !DILocation(line: 595, column: 5, scope: !6547)
!6644 = distinct !{!6644, !6549, !6645}
!6645 = !DILocation(line: 638, column: 5, scope: !6543)
!6646 = !DILocation(line: 639, column: 18, scope: !6432)
!6647 = !DILocation(line: 639, column: 5, scope: !6432)
!6648 = !DILocation(line: 641, column: 9, scope: !6649)
!6649 = distinct !DILexicalBlock(scope: !6432, file: !238, line: 641, column: 9)
!6650 = !DILocation(line: 641, column: 15, scope: !6649)
!6651 = !DILocation(line: 641, column: 9, scope: !6432)
!6652 = !DILocation(line: 642, column: 9, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6649, file: !238, line: 641, column: 20)
!6654 = !DILocation(line: 645, column: 12, scope: !6432)
!6655 = !DILocation(line: 645, column: 5, scope: !6432)
!6656 = !DILocation(line: 646, column: 1, scope: !6432)
!6657 = distinct !DISubprogram(name: "modbus_tcp_accept", scope: !238, file: !238, line: 648, type: !6658, isLocal: false, isDefinition: true, scopeLine: 649, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6658 = !DISubroutineType(types: !6659)
!6659 = !{!44, !323, !173}
!6660 = !DILocalVariable(name: "ctx", arg: 1, scope: !6657, file: !238, line: 648, type: !323)
!6661 = !DILocation(line: 648, column: 33, scope: !6657)
!6662 = !DILocalVariable(name: "s", arg: 2, scope: !6657, file: !238, line: 648, type: !173)
!6663 = !DILocation(line: 648, column: 43, scope: !6657)
!6664 = !DILocalVariable(name: "addr", scope: !6657, file: !238, line: 650, type: !6337)
!6665 = !DILocation(line: 650, column: 24, scope: !6657)
!6666 = !DILocalVariable(name: "addrlen", scope: !6657, file: !238, line: 651, type: !6449)
!6667 = !DILocation(line: 651, column: 15, scope: !6657)
!6668 = !DILocation(line: 653, column: 9, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6657, file: !238, line: 653, column: 9)
!6670 = !DILocation(line: 653, column: 13, scope: !6669)
!6671 = !DILocation(line: 653, column: 9, scope: !6657)
!6672 = !DILocation(line: 654, column: 9, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6669, file: !238, line: 653, column: 22)
!6674 = !DILocation(line: 654, column: 15, scope: !6673)
!6675 = !DILocation(line: 655, column: 9, scope: !6673)
!6676 = !DILocation(line: 658, column: 13, scope: !6657)
!6677 = !DILocation(line: 661, column: 23, scope: !6657)
!6678 = !DILocation(line: 661, column: 22, scope: !6657)
!6679 = !DILocation(line: 661, column: 26, scope: !6657)
!6680 = !DILocation(line: 661, column: 14, scope: !6657)
!6681 = !DILocation(line: 661, column: 5, scope: !6657)
!6682 = !DILocation(line: 661, column: 10, scope: !6657)
!6683 = !DILocation(line: 661, column: 12, scope: !6657)
!6684 = !DILocation(line: 666, column: 9, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6657, file: !238, line: 666, column: 9)
!6686 = !DILocation(line: 666, column: 14, scope: !6685)
!6687 = !DILocation(line: 666, column: 16, scope: !6685)
!6688 = !DILocation(line: 666, column: 9, scope: !6657)
!6689 = !DILocation(line: 667, column: 9, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !6685, file: !238, line: 666, column: 23)
!6691 = !DILocation(line: 670, column: 9, scope: !6692)
!6692 = distinct !DILexicalBlock(scope: !6657, file: !238, line: 670, column: 9)
!6693 = !DILocation(line: 670, column: 14, scope: !6692)
!6694 = !DILocation(line: 670, column: 9, scope: !6657)
!6695 = !DILocation(line: 672, column: 31, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6692, file: !238, line: 670, column: 21)
!6697 = !DILocation(line: 672, column: 16, scope: !6696)
!6698 = !DILocation(line: 671, column: 9, scope: !6696)
!6699 = !DILocation(line: 673, column: 5, scope: !6696)
!6700 = !DILocation(line: 675, column: 12, scope: !6657)
!6701 = !DILocation(line: 675, column: 17, scope: !6657)
!6702 = !DILocation(line: 675, column: 5, scope: !6657)
!6703 = !DILocation(line: 676, column: 1, scope: !6657)
!6704 = distinct !DISubprogram(name: "modbus_tcp_pi_accept", scope: !238, file: !238, line: 678, type: !6658, isLocal: false, isDefinition: true, scopeLine: 679, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6705 = !DILocalVariable(name: "ctx", arg: 1, scope: !6704, file: !238, line: 678, type: !323)
!6706 = !DILocation(line: 678, column: 36, scope: !6704)
!6707 = !DILocalVariable(name: "s", arg: 2, scope: !6704, file: !238, line: 678, type: !173)
!6708 = !DILocation(line: 678, column: 46, scope: !6704)
!6709 = !DILocalVariable(name: "addr", scope: !6704, file: !238, line: 680, type: !6710)
!6710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_storage", file: !282, line: 166, size: 1024, elements: !6711)
!6711 = !{!6712, !6713, !6717}
!6712 = !DIDerivedType(tag: DW_TAG_member, name: "ss_family", scope: !6710, file: !282, line: 168, baseType: !317, size: 16)
!6713 = !DIDerivedType(tag: DW_TAG_member, name: "__ss_padding", scope: !6710, file: !282, line: 169, baseType: !6714, size: 944, offset: 16)
!6714 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 944, elements: !6715)
!6715 = !{!6716}
!6716 = !DISubrange(count: 118)
!6717 = !DIDerivedType(tag: DW_TAG_member, name: "__ss_align", scope: !6710, file: !282, line: 170, baseType: !4668, size: 64, offset: 960)
!6718 = !DILocation(line: 680, column: 29, scope: !6704)
!6719 = !DILocalVariable(name: "addrlen", scope: !6704, file: !238, line: 681, type: !6449)
!6720 = !DILocation(line: 681, column: 15, scope: !6704)
!6721 = !DILocation(line: 683, column: 9, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6704, file: !238, line: 683, column: 9)
!6723 = !DILocation(line: 683, column: 13, scope: !6722)
!6724 = !DILocation(line: 683, column: 9, scope: !6704)
!6725 = !DILocation(line: 684, column: 9, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6722, file: !238, line: 683, column: 22)
!6727 = !DILocation(line: 684, column: 15, scope: !6726)
!6728 = !DILocation(line: 685, column: 9, scope: !6726)
!6729 = !DILocation(line: 688, column: 13, scope: !6704)
!6730 = !DILocation(line: 691, column: 23, scope: !6704)
!6731 = !DILocation(line: 691, column: 22, scope: !6704)
!6732 = !DILocation(line: 691, column: 26, scope: !6704)
!6733 = !DILocation(line: 691, column: 14, scope: !6704)
!6734 = !DILocation(line: 691, column: 5, scope: !6704)
!6735 = !DILocation(line: 691, column: 10, scope: !6704)
!6736 = !DILocation(line: 691, column: 12, scope: !6704)
!6737 = !DILocation(line: 696, column: 9, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6704, file: !238, line: 696, column: 9)
!6739 = !DILocation(line: 696, column: 14, scope: !6738)
!6740 = !DILocation(line: 696, column: 16, scope: !6738)
!6741 = !DILocation(line: 696, column: 9, scope: !6704)
!6742 = !DILocation(line: 697, column: 9, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6738, file: !238, line: 696, column: 23)
!6744 = !DILocation(line: 700, column: 9, scope: !6745)
!6745 = distinct !DILexicalBlock(scope: !6704, file: !238, line: 700, column: 9)
!6746 = !DILocation(line: 700, column: 14, scope: !6745)
!6747 = !DILocation(line: 700, column: 9, scope: !6704)
!6748 = !DILocation(line: 701, column: 9, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !6745, file: !238, line: 700, column: 21)
!6750 = !DILocation(line: 702, column: 5, scope: !6749)
!6751 = !DILocation(line: 704, column: 12, scope: !6704)
!6752 = !DILocation(line: 704, column: 17, scope: !6704)
!6753 = !DILocation(line: 704, column: 5, scope: !6704)
!6754 = !DILocation(line: 705, column: 1, scope: !6704)
!6755 = distinct !DISubprogram(name: "modbus_new_tcp", scope: !238, file: !238, line: 781, type: !6756, isLocal: false, isDefinition: true, scopeLine: 782, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6756 = !DISubroutineType(types: !6757)
!6757 = !{!323, !431, !44}
!6758 = !DILocalVariable(name: "ip", arg: 1, scope: !6755, file: !238, line: 781, type: !431)
!6759 = !DILocation(line: 781, column: 38, scope: !6755)
!6760 = !DILocalVariable(name: "port", arg: 2, scope: !6755, file: !238, line: 781, type: !44)
!6761 = !DILocation(line: 781, column: 46, scope: !6755)
!6762 = !DILocalVariable(name: "ctx", scope: !6755, file: !238, line: 783, type: !323)
!6763 = !DILocation(line: 783, column: 15, scope: !6755)
!6764 = !DILocalVariable(name: "ctx_tcp", scope: !6755, file: !238, line: 784, type: !410)
!6765 = !DILocation(line: 784, column: 19, scope: !6755)
!6766 = !DILocalVariable(name: "dest_size", scope: !6755, file: !238, line: 785, type: !4669)
!6767 = !DILocation(line: 785, column: 12, scope: !6755)
!6768 = !DILocalVariable(name: "ret_size", scope: !6755, file: !238, line: 786, type: !4669)
!6769 = !DILocation(line: 786, column: 12, scope: !6755)
!6770 = !DILocation(line: 801, column: 23, scope: !6755)
!6771 = !DILocation(line: 801, column: 11, scope: !6755)
!6772 = !DILocation(line: 801, column: 9, scope: !6755)
!6773 = !DILocation(line: 802, column: 9, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6755, file: !238, line: 802, column: 9)
!6775 = !DILocation(line: 802, column: 13, scope: !6774)
!6776 = !DILocation(line: 802, column: 9, scope: !6755)
!6777 = !DILocation(line: 803, column: 9, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6774, file: !238, line: 802, column: 22)
!6779 = !DILocation(line: 805, column: 25, scope: !6755)
!6780 = !DILocation(line: 805, column: 5, scope: !6755)
!6781 = !DILocation(line: 808, column: 5, scope: !6755)
!6782 = !DILocation(line: 808, column: 10, scope: !6755)
!6783 = !DILocation(line: 808, column: 16, scope: !6755)
!6784 = !DILocation(line: 810, column: 5, scope: !6755)
!6785 = !DILocation(line: 810, column: 10, scope: !6755)
!6786 = !DILocation(line: 810, column: 18, scope: !6755)
!6787 = !DILocation(line: 812, column: 41, scope: !6755)
!6788 = !DILocation(line: 812, column: 25, scope: !6755)
!6789 = !DILocation(line: 812, column: 5, scope: !6755)
!6790 = !DILocation(line: 812, column: 10, scope: !6755)
!6791 = !DILocation(line: 812, column: 23, scope: !6755)
!6792 = !DILocation(line: 813, column: 9, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6755, file: !238, line: 813, column: 9)
!6794 = !DILocation(line: 813, column: 14, scope: !6793)
!6795 = !DILocation(line: 813, column: 27, scope: !6793)
!6796 = !DILocation(line: 813, column: 9, scope: !6755)
!6797 = !DILocation(line: 814, column: 21, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6793, file: !238, line: 813, column: 36)
!6799 = !DILocation(line: 814, column: 9, scope: !6798)
!6800 = !DILocation(line: 815, column: 9, scope: !6798)
!6801 = !DILocation(line: 815, column: 15, scope: !6798)
!6802 = !DILocation(line: 816, column: 9, scope: !6798)
!6803 = !DILocation(line: 818, column: 31, scope: !6755)
!6804 = !DILocation(line: 818, column: 36, scope: !6755)
!6805 = !DILocation(line: 818, column: 15, scope: !6755)
!6806 = !DILocation(line: 818, column: 13, scope: !6755)
!6807 = !DILocation(line: 820, column: 9, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6755, file: !238, line: 820, column: 9)
!6809 = !DILocation(line: 820, column: 12, scope: !6808)
!6810 = !DILocation(line: 820, column: 9, scope: !6755)
!6811 = !DILocation(line: 821, column: 19, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6808, file: !238, line: 820, column: 21)
!6813 = !DILocation(line: 822, column: 28, scope: !6812)
!6814 = !DILocation(line: 822, column: 37, scope: !6812)
!6815 = !DILocation(line: 822, column: 41, scope: !6812)
!6816 = !DILocation(line: 822, column: 45, scope: !6812)
!6817 = !DILocation(line: 822, column: 20, scope: !6812)
!6818 = !DILocation(line: 822, column: 18, scope: !6812)
!6819 = !DILocation(line: 823, column: 13, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6812, file: !238, line: 823, column: 13)
!6821 = !DILocation(line: 823, column: 22, scope: !6820)
!6822 = !DILocation(line: 823, column: 13, scope: !6812)
!6823 = !DILocation(line: 824, column: 21, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6820, file: !238, line: 823, column: 28)
!6825 = !DILocation(line: 824, column: 13, scope: !6824)
!6826 = !DILocation(line: 825, column: 25, scope: !6824)
!6827 = !DILocation(line: 825, column: 13, scope: !6824)
!6828 = !DILocation(line: 826, column: 13, scope: !6824)
!6829 = !DILocation(line: 826, column: 19, scope: !6824)
!6830 = !DILocation(line: 827, column: 13, scope: !6824)
!6831 = !DILocation(line: 830, column: 13, scope: !6832)
!6832 = distinct !DILexicalBlock(scope: !6812, file: !238, line: 830, column: 13)
!6833 = !DILocation(line: 830, column: 25, scope: !6832)
!6834 = !DILocation(line: 830, column: 22, scope: !6832)
!6835 = !DILocation(line: 830, column: 13, scope: !6812)
!6836 = !DILocation(line: 831, column: 21, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6832, file: !238, line: 830, column: 36)
!6838 = !DILocation(line: 831, column: 13, scope: !6837)
!6839 = !DILocation(line: 832, column: 25, scope: !6837)
!6840 = !DILocation(line: 832, column: 13, scope: !6837)
!6841 = !DILocation(line: 833, column: 13, scope: !6837)
!6842 = !DILocation(line: 833, column: 19, scope: !6837)
!6843 = !DILocation(line: 834, column: 13, scope: !6837)
!6844 = !DILocation(line: 836, column: 5, scope: !6812)
!6845 = !DILocation(line: 837, column: 9, scope: !6846)
!6846 = distinct !DILexicalBlock(scope: !6808, file: !238, line: 836, column: 12)
!6847 = !DILocation(line: 837, column: 18, scope: !6846)
!6848 = !DILocation(line: 837, column: 24, scope: !6846)
!6849 = !DILocation(line: 839, column: 21, scope: !6755)
!6850 = !DILocation(line: 839, column: 5, scope: !6755)
!6851 = !DILocation(line: 839, column: 14, scope: !6755)
!6852 = !DILocation(line: 839, column: 19, scope: !6755)
!6853 = !DILocation(line: 840, column: 5, scope: !6755)
!6854 = !DILocation(line: 840, column: 14, scope: !6755)
!6855 = !DILocation(line: 840, column: 19, scope: !6755)
!6856 = !DILocation(line: 842, column: 12, scope: !6755)
!6857 = !DILocation(line: 842, column: 5, scope: !6755)
!6858 = !DILocation(line: 843, column: 1, scope: !6755)
!6859 = distinct !DISubprogram(name: "_modbus_set_slave", scope: !238, file: !238, line: 77, type: !350, isLocal: true, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6860 = !DILocalVariable(name: "ctx", arg: 1, scope: !6859, file: !238, line: 77, type: !323)
!6861 = !DILocation(line: 77, column: 40, scope: !6859)
!6862 = !DILocalVariable(name: "slave", arg: 2, scope: !6859, file: !238, line: 77, type: !44)
!6863 = !DILocation(line: 77, column: 49, scope: !6859)
!6864 = !DILocation(line: 80, column: 9, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6859, file: !238, line: 80, column: 9)
!6866 = !DILocation(line: 80, column: 15, scope: !6865)
!6867 = !DILocation(line: 80, column: 20, scope: !6865)
!6868 = !DILocation(line: 80, column: 23, scope: !6865)
!6869 = !DILocation(line: 80, column: 29, scope: !6865)
!6870 = !DILocation(line: 80, column: 9, scope: !6859)
!6871 = !DILocation(line: 81, column: 22, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6865, file: !238, line: 80, column: 37)
!6873 = !DILocation(line: 81, column: 9, scope: !6872)
!6874 = !DILocation(line: 81, column: 14, scope: !6872)
!6875 = !DILocation(line: 81, column: 20, scope: !6872)
!6876 = !DILocation(line: 82, column: 5, scope: !6872)
!6877 = !DILocation(line: 82, column: 16, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6865, file: !238, line: 82, column: 16)
!6879 = !DILocation(line: 82, column: 22, scope: !6878)
!6880 = !DILocation(line: 82, column: 16, scope: !6865)
!6881 = !DILocation(line: 85, column: 22, scope: !6882)
!6882 = distinct !DILexicalBlock(scope: !6878, file: !238, line: 82, column: 43)
!6883 = !DILocation(line: 85, column: 9, scope: !6882)
!6884 = !DILocation(line: 85, column: 14, scope: !6882)
!6885 = !DILocation(line: 85, column: 20, scope: !6882)
!6886 = !DILocation(line: 86, column: 5, scope: !6882)
!6887 = !DILocation(line: 87, column: 9, scope: !6888)
!6888 = distinct !DILexicalBlock(scope: !6878, file: !238, line: 86, column: 12)
!6889 = !DILocation(line: 87, column: 15, scope: !6888)
!6890 = !DILocation(line: 88, column: 9, scope: !6888)
!6891 = !DILocation(line: 91, column: 5, scope: !6859)
!6892 = !DILocation(line: 92, column: 1, scope: !6859)
!6893 = distinct !DISubprogram(name: "_modbus_tcp_build_request_basis", scope: !238, file: !238, line: 95, type: !354, isLocal: true, isDefinition: true, scopeLine: 98, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6894 = !DILocalVariable(name: "ctx", arg: 1, scope: !6893, file: !238, line: 95, type: !323)
!6895 = !DILocation(line: 95, column: 54, scope: !6893)
!6896 = !DILocalVariable(name: "function", arg: 2, scope: !6893, file: !238, line: 95, type: !44)
!6897 = !DILocation(line: 95, column: 63, scope: !6893)
!6898 = !DILocalVariable(name: "addr", arg: 3, scope: !6893, file: !238, line: 96, type: !44)
!6899 = !DILocation(line: 96, column: 48, scope: !6893)
!6900 = !DILocalVariable(name: "nb", arg: 4, scope: !6893, file: !238, line: 96, type: !44)
!6901 = !DILocation(line: 96, column: 58, scope: !6893)
!6902 = !DILocalVariable(name: "req", arg: 5, scope: !6893, file: !238, line: 97, type: !61)
!6903 = !DILocation(line: 97, column: 53, scope: !6893)
!6904 = !DILocalVariable(name: "ctx_tcp", scope: !6893, file: !238, line: 99, type: !410)
!6905 = !DILocation(line: 99, column: 19, scope: !6893)
!6906 = !DILocation(line: 99, column: 29, scope: !6893)
!6907 = !DILocation(line: 99, column: 34, scope: !6893)
!6908 = !DILocation(line: 102, column: 9, scope: !6909)
!6909 = distinct !DILexicalBlock(scope: !6893, file: !238, line: 102, column: 9)
!6910 = !DILocation(line: 102, column: 18, scope: !6909)
!6911 = !DILocation(line: 102, column: 23, scope: !6909)
!6912 = !DILocation(line: 102, column: 9, scope: !6893)
!6913 = !DILocation(line: 103, column: 9, scope: !6909)
!6914 = !DILocation(line: 103, column: 18, scope: !6909)
!6915 = !DILocation(line: 103, column: 22, scope: !6909)
!6916 = !DILocation(line: 105, column: 9, scope: !6909)
!6917 = !DILocation(line: 105, column: 18, scope: !6909)
!6918 = !DILocation(line: 105, column: 23, scope: !6909)
!6919 = !DILocation(line: 106, column: 14, scope: !6893)
!6920 = !DILocation(line: 106, column: 23, scope: !6893)
!6921 = !DILocation(line: 106, column: 28, scope: !6893)
!6922 = !DILocation(line: 106, column: 5, scope: !6893)
!6923 = !DILocation(line: 106, column: 12, scope: !6893)
!6924 = !DILocation(line: 107, column: 14, scope: !6893)
!6925 = !DILocation(line: 107, column: 23, scope: !6893)
!6926 = !DILocation(line: 107, column: 28, scope: !6893)
!6927 = !DILocation(line: 107, column: 5, scope: !6893)
!6928 = !DILocation(line: 107, column: 12, scope: !6893)
!6929 = !DILocation(line: 110, column: 5, scope: !6893)
!6930 = !DILocation(line: 110, column: 12, scope: !6893)
!6931 = !DILocation(line: 111, column: 5, scope: !6893)
!6932 = !DILocation(line: 111, column: 12, scope: !6893)
!6933 = !DILocation(line: 116, column: 14, scope: !6893)
!6934 = !DILocation(line: 116, column: 19, scope: !6893)
!6935 = !DILocation(line: 116, column: 5, scope: !6893)
!6936 = !DILocation(line: 116, column: 12, scope: !6893)
!6937 = !DILocation(line: 117, column: 14, scope: !6893)
!6938 = !DILocation(line: 117, column: 5, scope: !6893)
!6939 = !DILocation(line: 117, column: 12, scope: !6893)
!6940 = !DILocation(line: 118, column: 14, scope: !6893)
!6941 = !DILocation(line: 118, column: 19, scope: !6893)
!6942 = !DILocation(line: 118, column: 5, scope: !6893)
!6943 = !DILocation(line: 118, column: 12, scope: !6893)
!6944 = !DILocation(line: 119, column: 14, scope: !6893)
!6945 = !DILocation(line: 119, column: 19, scope: !6893)
!6946 = !DILocation(line: 119, column: 5, scope: !6893)
!6947 = !DILocation(line: 119, column: 12, scope: !6893)
!6948 = !DILocation(line: 120, column: 15, scope: !6893)
!6949 = !DILocation(line: 120, column: 18, scope: !6893)
!6950 = !DILocation(line: 120, column: 5, scope: !6893)
!6951 = !DILocation(line: 120, column: 13, scope: !6893)
!6952 = !DILocation(line: 121, column: 15, scope: !6893)
!6953 = !DILocation(line: 121, column: 18, scope: !6893)
!6954 = !DILocation(line: 121, column: 5, scope: !6893)
!6955 = !DILocation(line: 121, column: 13, scope: !6893)
!6956 = !DILocation(line: 123, column: 5, scope: !6893)
!6957 = distinct !DISubprogram(name: "_modbus_tcp_build_response_basis", scope: !238, file: !238, line: 127, type: !358, isLocal: true, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6958 = !DILocalVariable(name: "sft", arg: 1, scope: !6957, file: !238, line: 127, type: !360)
!6959 = !DILocation(line: 127, column: 52, scope: !6957)
!6960 = !DILocalVariable(name: "rsp", arg: 2, scope: !6957, file: !238, line: 127, type: !61)
!6961 = !DILocation(line: 127, column: 66, scope: !6957)
!6962 = !DILocation(line: 133, column: 14, scope: !6957)
!6963 = !DILocation(line: 133, column: 19, scope: !6957)
!6964 = !DILocation(line: 133, column: 24, scope: !6957)
!6965 = !DILocation(line: 133, column: 5, scope: !6957)
!6966 = !DILocation(line: 133, column: 12, scope: !6957)
!6967 = !DILocation(line: 134, column: 14, scope: !6957)
!6968 = !DILocation(line: 134, column: 19, scope: !6957)
!6969 = !DILocation(line: 134, column: 24, scope: !6957)
!6970 = !DILocation(line: 134, column: 5, scope: !6957)
!6971 = !DILocation(line: 134, column: 12, scope: !6957)
!6972 = !DILocation(line: 137, column: 5, scope: !6957)
!6973 = !DILocation(line: 137, column: 12, scope: !6957)
!6974 = !DILocation(line: 138, column: 5, scope: !6957)
!6975 = !DILocation(line: 138, column: 12, scope: !6957)
!6976 = !DILocation(line: 143, column: 14, scope: !6957)
!6977 = !DILocation(line: 143, column: 19, scope: !6957)
!6978 = !DILocation(line: 143, column: 5, scope: !6957)
!6979 = !DILocation(line: 143, column: 12, scope: !6957)
!6980 = !DILocation(line: 144, column: 14, scope: !6957)
!6981 = !DILocation(line: 144, column: 19, scope: !6957)
!6982 = !DILocation(line: 144, column: 5, scope: !6957)
!6983 = !DILocation(line: 144, column: 12, scope: !6957)
!6984 = !DILocation(line: 146, column: 5, scope: !6957)
!6985 = distinct !DISubprogram(name: "_modbus_tcp_prepare_response_tid", scope: !238, file: !238, line: 150, type: !169, isLocal: true, isDefinition: true, scopeLine: 151, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6986 = !DILocalVariable(name: "req", arg: 1, scope: !6985, file: !238, line: 150, type: !171)
!6987 = !DILocation(line: 150, column: 60, scope: !6985)
!6988 = !DILocalVariable(name: "req_length", arg: 2, scope: !6985, file: !238, line: 150, type: !173)
!6989 = !DILocation(line: 150, column: 70, scope: !6985)
!6990 = !DILocation(line: 152, column: 13, scope: !6985)
!6991 = !DILocation(line: 152, column: 20, scope: !6985)
!6992 = !DILocation(line: 152, column: 28, scope: !6985)
!6993 = !DILocation(line: 152, column: 26, scope: !6985)
!6994 = !DILocation(line: 152, column: 5, scope: !6985)
!6995 = distinct !DISubprogram(name: "_modbus_tcp_send_msg_pre", scope: !238, file: !238, line: 155, type: !176, isLocal: true, isDefinition: true, scopeLine: 156, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!6996 = !DILocalVariable(name: "req", arg: 1, scope: !6995, file: !238, line: 155, type: !61)
!6997 = !DILocation(line: 155, column: 46, scope: !6995)
!6998 = !DILocalVariable(name: "req_length", arg: 2, scope: !6995, file: !238, line: 155, type: !44)
!6999 = !DILocation(line: 155, column: 55, scope: !6995)
!7000 = !DILocalVariable(name: "mbap_length", scope: !6995, file: !238, line: 158, type: !44)
!7001 = !DILocation(line: 158, column: 9, scope: !6995)
!7002 = !DILocation(line: 158, column: 23, scope: !6995)
!7003 = !DILocation(line: 158, column: 34, scope: !6995)
!7004 = !DILocation(line: 160, column: 14, scope: !6995)
!7005 = !DILocation(line: 160, column: 26, scope: !6995)
!7006 = !DILocation(line: 160, column: 5, scope: !6995)
!7007 = !DILocation(line: 160, column: 12, scope: !6995)
!7008 = !DILocation(line: 161, column: 14, scope: !6995)
!7009 = !DILocation(line: 161, column: 26, scope: !6995)
!7010 = !DILocation(line: 161, column: 5, scope: !6995)
!7011 = !DILocation(line: 161, column: 12, scope: !6995)
!7012 = !DILocation(line: 163, column: 12, scope: !6995)
!7013 = !DILocation(line: 163, column: 5, scope: !6995)
!7014 = distinct !DISubprogram(name: "_modbus_tcp_send", scope: !238, file: !238, line: 166, type: !371, isLocal: true, isDefinition: true, scopeLine: 167, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7015 = !DILocalVariable(name: "ctx", arg: 1, scope: !7014, file: !238, line: 166, type: !323)
!7016 = !DILocation(line: 166, column: 43, scope: !7014)
!7017 = !DILocalVariable(name: "req", arg: 2, scope: !7014, file: !238, line: 166, type: !171)
!7018 = !DILocation(line: 166, column: 63, scope: !7014)
!7019 = !DILocalVariable(name: "req_length", arg: 3, scope: !7014, file: !238, line: 166, type: !44)
!7020 = !DILocation(line: 166, column: 72, scope: !7014)
!7021 = !DILocation(line: 172, column: 17, scope: !7014)
!7022 = !DILocation(line: 172, column: 22, scope: !7014)
!7023 = !DILocation(line: 172, column: 39, scope: !7014)
!7024 = !DILocation(line: 172, column: 44, scope: !7014)
!7025 = !DILocation(line: 172, column: 12, scope: !7014)
!7026 = !DILocation(line: 172, column: 5, scope: !7014)
!7027 = distinct !DISubprogram(name: "_modbus_tcp_receive", scope: !238, file: !238, line: 175, type: !375, isLocal: true, isDefinition: true, scopeLine: 175, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7028 = !DILocalVariable(name: "ctx", arg: 1, scope: !7027, file: !238, line: 175, type: !323)
!7029 = !DILocation(line: 175, column: 42, scope: !7027)
!7030 = !DILocalVariable(name: "req", arg: 2, scope: !7027, file: !238, line: 175, type: !61)
!7031 = !DILocation(line: 175, column: 56, scope: !7027)
!7032 = !DILocation(line: 176, column: 32, scope: !7027)
!7033 = !DILocation(line: 176, column: 37, scope: !7027)
!7034 = !DILocation(line: 176, column: 12, scope: !7027)
!7035 = !DILocation(line: 176, column: 5, scope: !7027)
!7036 = distinct !DISubprogram(name: "_modbus_tcp_recv", scope: !238, file: !238, line: 179, type: !379, isLocal: true, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7037 = !DILocalVariable(name: "ctx", arg: 1, scope: !7036, file: !238, line: 179, type: !323)
!7038 = !DILocation(line: 179, column: 43, scope: !7036)
!7039 = !DILocalVariable(name: "rsp", arg: 2, scope: !7036, file: !238, line: 179, type: !61)
!7040 = !DILocation(line: 179, column: 57, scope: !7036)
!7041 = !DILocalVariable(name: "rsp_length", arg: 3, scope: !7036, file: !238, line: 179, type: !44)
!7042 = !DILocation(line: 179, column: 66, scope: !7036)
!7043 = !DILocation(line: 180, column: 17, scope: !7036)
!7044 = !DILocation(line: 180, column: 22, scope: !7036)
!7045 = !DILocation(line: 180, column: 33, scope: !7036)
!7046 = !DILocation(line: 180, column: 38, scope: !7036)
!7047 = !DILocation(line: 180, column: 12, scope: !7036)
!7048 = !DILocation(line: 180, column: 5, scope: !7036)
!7049 = distinct !DISubprogram(name: "_modbus_tcp_check_integrity", scope: !238, file: !238, line: 183, type: !383, isLocal: true, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7050 = !DILocalVariable(name: "ctx", arg: 1, scope: !7049, file: !238, line: 183, type: !323)
!7051 = !DILocation(line: 183, column: 50, scope: !7049)
!7052 = !DILocalVariable(name: "msg", arg: 2, scope: !7049, file: !238, line: 183, type: !61)
!7053 = !DILocation(line: 183, column: 64, scope: !7049)
!7054 = !DILocalVariable(name: "msg_length", arg: 3, scope: !7049, file: !238, line: 183, type: !197)
!7055 = !DILocation(line: 183, column: 79, scope: !7049)
!7056 = !DILocation(line: 185, column: 12, scope: !7049)
!7057 = !DILocation(line: 185, column: 5, scope: !7049)
!7058 = distinct !DISubprogram(name: "_modbus_tcp_pre_check_confirmation", scope: !238, file: !238, line: 188, type: !387, isLocal: true, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7059 = !DILocalVariable(name: "ctx", arg: 1, scope: !7058, file: !238, line: 188, type: !323)
!7060 = !DILocation(line: 188, column: 57, scope: !7058)
!7061 = !DILocalVariable(name: "req", arg: 2, scope: !7058, file: !238, line: 188, type: !171)
!7062 = !DILocation(line: 188, column: 77, scope: !7058)
!7063 = !DILocalVariable(name: "rsp", arg: 3, scope: !7058, file: !238, line: 189, type: !171)
!7064 = !DILocation(line: 189, column: 62, scope: !7058)
!7065 = !DILocalVariable(name: "rsp_length", arg: 4, scope: !7058, file: !238, line: 189, type: !44)
!7066 = !DILocation(line: 189, column: 71, scope: !7058)
!7067 = !DILocation(line: 192, column: 9, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7058, file: !238, line: 192, column: 9)
!7069 = !DILocation(line: 192, column: 19, scope: !7068)
!7070 = !DILocation(line: 192, column: 16, scope: !7068)
!7071 = !DILocation(line: 192, column: 26, scope: !7068)
!7072 = !DILocation(line: 192, column: 29, scope: !7068)
!7073 = !DILocation(line: 192, column: 39, scope: !7068)
!7074 = !DILocation(line: 192, column: 36, scope: !7068)
!7075 = !DILocation(line: 192, column: 9, scope: !7058)
!7076 = !DILocation(line: 193, column: 13, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !7078, file: !238, line: 193, column: 13)
!7078 = distinct !DILexicalBlock(scope: !7068, file: !238, line: 192, column: 47)
!7079 = !DILocation(line: 193, column: 18, scope: !7077)
!7080 = !DILocation(line: 193, column: 13, scope: !7078)
!7081 = !DILocation(line: 194, column: 21, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7077, file: !238, line: 193, column: 25)
!7083 = !DILocation(line: 195, column: 22, scope: !7082)
!7084 = !DILocation(line: 195, column: 29, scope: !7082)
!7085 = !DILocation(line: 195, column: 37, scope: !7082)
!7086 = !DILocation(line: 195, column: 35, scope: !7082)
!7087 = !DILocation(line: 195, column: 46, scope: !7082)
!7088 = !DILocation(line: 195, column: 53, scope: !7082)
!7089 = !DILocation(line: 195, column: 61, scope: !7082)
!7090 = !DILocation(line: 195, column: 59, scope: !7082)
!7091 = !DILocation(line: 194, column: 13, scope: !7082)
!7092 = !DILocation(line: 196, column: 9, scope: !7082)
!7093 = !DILocation(line: 197, column: 9, scope: !7078)
!7094 = !DILocation(line: 197, column: 15, scope: !7078)
!7095 = !DILocation(line: 198, column: 9, scope: !7078)
!7096 = !DILocation(line: 202, column: 9, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !7058, file: !238, line: 202, column: 9)
!7098 = !DILocation(line: 202, column: 16, scope: !7097)
!7099 = !DILocation(line: 202, column: 23, scope: !7097)
!7100 = !DILocation(line: 202, column: 26, scope: !7097)
!7101 = !DILocation(line: 202, column: 33, scope: !7097)
!7102 = !DILocation(line: 202, column: 9, scope: !7058)
!7103 = !DILocation(line: 203, column: 13, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7105, file: !238, line: 203, column: 13)
!7105 = distinct !DILexicalBlock(scope: !7097, file: !238, line: 202, column: 41)
!7106 = !DILocation(line: 203, column: 18, scope: !7104)
!7107 = !DILocation(line: 203, column: 13, scope: !7105)
!7108 = !DILocation(line: 204, column: 21, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7104, file: !238, line: 203, column: 25)
!7110 = !DILocation(line: 205, column: 22, scope: !7109)
!7111 = !DILocation(line: 205, column: 29, scope: !7109)
!7112 = !DILocation(line: 205, column: 37, scope: !7109)
!7113 = !DILocation(line: 205, column: 35, scope: !7109)
!7114 = !DILocation(line: 204, column: 13, scope: !7109)
!7115 = !DILocation(line: 206, column: 9, scope: !7109)
!7116 = !DILocation(line: 207, column: 9, scope: !7105)
!7117 = !DILocation(line: 207, column: 15, scope: !7105)
!7118 = !DILocation(line: 208, column: 9, scope: !7105)
!7119 = !DILocation(line: 211, column: 5, scope: !7058)
!7120 = !DILocation(line: 212, column: 1, scope: !7058)
!7121 = distinct !DISubprogram(name: "_modbus_tcp_connect", scope: !238, file: !238, line: 303, type: !391, isLocal: true, isDefinition: true, scopeLine: 304, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7122 = !DILocalVariable(name: "ctx", arg: 1, scope: !7121, file: !238, line: 303, type: !323)
!7123 = !DILocation(line: 303, column: 42, scope: !7121)
!7124 = !DILocalVariable(name: "rc", scope: !7121, file: !238, line: 305, type: !44)
!7125 = !DILocation(line: 305, column: 9, scope: !7121)
!7126 = !DILocalVariable(name: "addr", scope: !7121, file: !238, line: 307, type: !6337)
!7127 = !DILocation(line: 307, column: 24, scope: !7121)
!7128 = !DILocalVariable(name: "ctx_tcp", scope: !7121, file: !238, line: 308, type: !410)
!7129 = !DILocation(line: 308, column: 19, scope: !7121)
!7130 = !DILocation(line: 308, column: 29, scope: !7121)
!7131 = !DILocation(line: 308, column: 34, scope: !7121)
!7132 = !DILocalVariable(name: "flags", scope: !7121, file: !238, line: 309, type: !44)
!7133 = !DILocation(line: 309, column: 9, scope: !7121)
!7134 = !DILocation(line: 318, column: 11, scope: !7121)
!7135 = !DILocation(line: 322, column: 11, scope: !7121)
!7136 = !DILocation(line: 325, column: 30, scope: !7121)
!7137 = !DILocation(line: 325, column: 14, scope: !7121)
!7138 = !DILocation(line: 325, column: 5, scope: !7121)
!7139 = !DILocation(line: 325, column: 10, scope: !7121)
!7140 = !DILocation(line: 325, column: 12, scope: !7121)
!7141 = !DILocation(line: 326, column: 9, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7121, file: !238, line: 326, column: 9)
!7143 = !DILocation(line: 326, column: 14, scope: !7142)
!7144 = !DILocation(line: 326, column: 16, scope: !7142)
!7145 = !DILocation(line: 326, column: 9, scope: !7121)
!7146 = !DILocation(line: 327, column: 9, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7142, file: !238, line: 326, column: 23)
!7148 = !DILocation(line: 330, column: 39, scope: !7121)
!7149 = !DILocation(line: 330, column: 44, scope: !7121)
!7150 = !DILocation(line: 330, column: 10, scope: !7121)
!7151 = !DILocation(line: 330, column: 8, scope: !7121)
!7152 = !DILocation(line: 331, column: 9, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7121, file: !238, line: 331, column: 9)
!7154 = !DILocation(line: 331, column: 12, scope: !7153)
!7155 = !DILocation(line: 331, column: 9, scope: !7121)
!7156 = !DILocation(line: 332, column: 15, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7153, file: !238, line: 331, column: 19)
!7158 = !DILocation(line: 332, column: 20, scope: !7157)
!7159 = !DILocation(line: 332, column: 9, scope: !7157)
!7160 = !DILocation(line: 333, column: 9, scope: !7157)
!7161 = !DILocation(line: 333, column: 14, scope: !7157)
!7162 = !DILocation(line: 333, column: 16, scope: !7157)
!7163 = !DILocation(line: 334, column: 9, scope: !7157)
!7164 = !DILocation(line: 337, column: 9, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7121, file: !238, line: 337, column: 9)
!7166 = !DILocation(line: 337, column: 14, scope: !7165)
!7167 = !DILocation(line: 337, column: 9, scope: !7121)
!7168 = !DILocation(line: 338, column: 41, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7165, file: !238, line: 337, column: 21)
!7170 = !DILocation(line: 338, column: 50, scope: !7169)
!7171 = !DILocation(line: 338, column: 54, scope: !7169)
!7172 = !DILocation(line: 338, column: 63, scope: !7169)
!7173 = !DILocation(line: 338, column: 9, scope: !7169)
!7174 = !DILocation(line: 339, column: 5, scope: !7169)
!7175 = !DILocation(line: 341, column: 10, scope: !7121)
!7176 = !DILocation(line: 341, column: 21, scope: !7121)
!7177 = !DILocation(line: 342, column: 27, scope: !7121)
!7178 = !DILocation(line: 342, column: 36, scope: !7121)
!7179 = !DILocation(line: 342, column: 21, scope: !7121)
!7180 = !DILocation(line: 342, column: 10, scope: !7121)
!7181 = !DILocation(line: 342, column: 19, scope: !7121)
!7182 = !DILocation(line: 343, column: 38, scope: !7121)
!7183 = !DILocation(line: 343, column: 47, scope: !7121)
!7184 = !DILocation(line: 343, column: 28, scope: !7121)
!7185 = !DILocation(line: 343, column: 10, scope: !7121)
!7186 = !DILocation(line: 343, column: 19, scope: !7121)
!7187 = !DILocation(line: 343, column: 26, scope: !7121)
!7188 = !DILocation(line: 344, column: 19, scope: !7121)
!7189 = !DILocation(line: 344, column: 24, scope: !7121)
!7190 = !DILocation(line: 344, column: 27, scope: !7121)
!7191 = !DILocation(line: 344, column: 68, scope: !7121)
!7192 = !DILocation(line: 344, column: 73, scope: !7121)
!7193 = !DILocation(line: 344, column: 10, scope: !7121)
!7194 = !DILocation(line: 344, column: 8, scope: !7121)
!7195 = !DILocation(line: 345, column: 9, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7121, file: !238, line: 345, column: 9)
!7197 = !DILocation(line: 345, column: 12, scope: !7196)
!7198 = !DILocation(line: 345, column: 9, scope: !7121)
!7199 = !DILocation(line: 346, column: 15, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7196, file: !238, line: 345, column: 19)
!7201 = !DILocation(line: 346, column: 20, scope: !7200)
!7202 = !DILocation(line: 346, column: 9, scope: !7200)
!7203 = !DILocation(line: 347, column: 9, scope: !7200)
!7204 = !DILocation(line: 347, column: 14, scope: !7200)
!7205 = !DILocation(line: 347, column: 16, scope: !7200)
!7206 = !DILocation(line: 348, column: 9, scope: !7200)
!7207 = !DILocation(line: 351, column: 5, scope: !7121)
!7208 = !DILocation(line: 352, column: 1, scope: !7121)
!7209 = distinct !DISubprogram(name: "_modbus_tcp_close", scope: !238, file: !238, line: 433, type: !395, isLocal: true, isDefinition: true, scopeLine: 434, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7210 = !DILocalVariable(name: "ctx", arg: 1, scope: !7209, file: !238, line: 433, type: !323)
!7211 = !DILocation(line: 433, column: 41, scope: !7209)
!7212 = !DILocation(line: 435, column: 9, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7209, file: !238, line: 435, column: 9)
!7214 = !DILocation(line: 435, column: 14, scope: !7213)
!7215 = !DILocation(line: 435, column: 16, scope: !7213)
!7216 = !DILocation(line: 435, column: 9, scope: !7209)
!7217 = !DILocation(line: 436, column: 18, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7213, file: !238, line: 435, column: 23)
!7219 = !DILocation(line: 436, column: 23, scope: !7218)
!7220 = !DILocation(line: 436, column: 9, scope: !7218)
!7221 = !DILocation(line: 437, column: 15, scope: !7218)
!7222 = !DILocation(line: 437, column: 20, scope: !7218)
!7223 = !DILocation(line: 437, column: 9, scope: !7218)
!7224 = !DILocation(line: 438, column: 9, scope: !7218)
!7225 = !DILocation(line: 438, column: 14, scope: !7218)
!7226 = !DILocation(line: 438, column: 16, scope: !7218)
!7227 = !DILocation(line: 439, column: 5, scope: !7218)
!7228 = !DILocation(line: 440, column: 1, scope: !7209)
!7229 = distinct !DISubprogram(name: "_modbus_tcp_flush", scope: !238, file: !238, line: 442, type: !391, isLocal: true, isDefinition: true, scopeLine: 443, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7230 = !DILocalVariable(name: "ctx", arg: 1, scope: !7229, file: !238, line: 442, type: !323)
!7231 = !DILocation(line: 442, column: 40, scope: !7229)
!7232 = !DILocalVariable(name: "rc", scope: !7229, file: !238, line: 444, type: !44)
!7233 = !DILocation(line: 444, column: 9, scope: !7229)
!7234 = !DILocalVariable(name: "rc_sum", scope: !7229, file: !238, line: 445, type: !44)
!7235 = !DILocation(line: 445, column: 9, scope: !7229)
!7236 = !DILocation(line: 447, column: 5, scope: !7229)
!7237 = distinct !{!7237, !7236, !7238}
!7238 = !DILocation(line: 474, column: 45, scope: !7229)
!7239 = !DILocalVariable(name: "devnull", scope: !7240, file: !238, line: 449, type: !7241)
!7240 = distinct !DILexicalBlock(scope: !7229, file: !238, line: 447, column: 8)
!7241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 2080, elements: !637)
!7242 = !DILocation(line: 449, column: 14, scope: !7240)
!7243 = !DILocation(line: 451, column: 19, scope: !7240)
!7244 = !DILocation(line: 451, column: 24, scope: !7240)
!7245 = !DILocation(line: 451, column: 27, scope: !7240)
!7246 = !DILocation(line: 451, column: 14, scope: !7240)
!7247 = !DILocation(line: 451, column: 12, scope: !7240)
!7248 = !DILocation(line: 471, column: 13, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7240, file: !238, line: 471, column: 13)
!7250 = !DILocation(line: 471, column: 16, scope: !7249)
!7251 = !DILocation(line: 471, column: 13, scope: !7240)
!7252 = !DILocation(line: 472, column: 23, scope: !7253)
!7253 = distinct !DILexicalBlock(scope: !7249, file: !238, line: 471, column: 21)
!7254 = !DILocation(line: 472, column: 20, scope: !7253)
!7255 = !DILocation(line: 473, column: 9, scope: !7253)
!7256 = !DILocation(line: 474, column: 5, scope: !7240)
!7257 = !DILocation(line: 474, column: 14, scope: !7229)
!7258 = !DILocation(line: 474, column: 17, scope: !7229)
!7259 = !DILocation(line: 476, column: 12, scope: !7229)
!7260 = !DILocation(line: 476, column: 5, scope: !7229)
!7261 = distinct !DISubprogram(name: "_modbus_tcp_select", scope: !238, file: !238, line: 707, type: !400, isLocal: true, isDefinition: true, scopeLine: 708, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7262 = !DILocalVariable(name: "ctx", arg: 1, scope: !7261, file: !238, line: 707, type: !323)
!7263 = !DILocation(line: 707, column: 41, scope: !7261)
!7264 = !DILocalVariable(name: "rset", arg: 2, scope: !7261, file: !238, line: 707, type: !402)
!7265 = !DILocation(line: 707, column: 54, scope: !7261)
!7266 = !DILocalVariable(name: "tv", arg: 3, scope: !7261, file: !238, line: 707, type: !407)
!7267 = !DILocation(line: 707, column: 76, scope: !7261)
!7268 = !DILocalVariable(name: "length_to_read", arg: 4, scope: !7261, file: !238, line: 707, type: !44)
!7269 = !DILocation(line: 707, column: 84, scope: !7261)
!7270 = !DILocalVariable(name: "s_rc", scope: !7261, file: !238, line: 709, type: !44)
!7271 = !DILocation(line: 709, column: 9, scope: !7261)
!7272 = !DILocation(line: 710, column: 5, scope: !7261)
!7273 = !DILocation(line: 710, column: 27, scope: !7261)
!7274 = !DILocation(line: 710, column: 32, scope: !7261)
!7275 = !DILocation(line: 710, column: 33, scope: !7261)
!7276 = !DILocation(line: 710, column: 37, scope: !7261)
!7277 = !DILocation(line: 710, column: 55, scope: !7261)
!7278 = !DILocation(line: 710, column: 20, scope: !7261)
!7279 = !DILocation(line: 710, column: 18, scope: !7261)
!7280 = !DILocation(line: 710, column: 60, scope: !7261)
!7281 = !DILocation(line: 711, column: 13, scope: !7282)
!7282 = distinct !DILexicalBlock(scope: !7283, file: !238, line: 711, column: 13)
!7283 = distinct !DILexicalBlock(scope: !7261, file: !238, line: 710, column: 67)
!7284 = !DILocation(line: 711, column: 19, scope: !7282)
!7285 = !DILocation(line: 711, column: 13, scope: !7283)
!7286 = !DILocation(line: 712, column: 17, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7288, file: !238, line: 712, column: 17)
!7288 = distinct !DILexicalBlock(scope: !7282, file: !238, line: 711, column: 29)
!7289 = !DILocation(line: 712, column: 22, scope: !7287)
!7290 = !DILocation(line: 712, column: 17, scope: !7288)
!7291 = !DILocation(line: 713, column: 25, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7287, file: !238, line: 712, column: 29)
!7293 = !DILocation(line: 713, column: 17, scope: !7292)
!7294 = !DILocation(line: 714, column: 13, scope: !7292)
!7295 = !DILocation(line: 716, column: 13, scope: !7288)
!7296 = distinct !{!7296, !7295, !7295}
!7297 = !DILocalVariable(name: "__d0", scope: !7298, file: !238, line: 716, type: !44)
!7298 = distinct !DILexicalBlock(scope: !7288, file: !238, line: 716, column: 13)
!7299 = !DILocation(line: 716, column: 13, scope: !7298)
!7300 = !DILocalVariable(name: "__d1", scope: !7298, file: !238, line: 716, type: !44)
!7301 = !{i32 -2146603760}
!7302 = !DILocation(line: 717, column: 13, scope: !7288)
!7303 = !DILocation(line: 718, column: 9, scope: !7288)
!7304 = !DILocation(line: 719, column: 13, scope: !7305)
!7305 = distinct !DILexicalBlock(scope: !7282, file: !238, line: 718, column: 16)
!7306 = distinct !{!7306, !7272, !7307}
!7307 = !DILocation(line: 721, column: 5, scope: !7261)
!7308 = !DILocation(line: 723, column: 9, scope: !7309)
!7309 = distinct !DILexicalBlock(scope: !7261, file: !238, line: 723, column: 9)
!7310 = !DILocation(line: 723, column: 14, scope: !7309)
!7311 = !DILocation(line: 723, column: 9, scope: !7261)
!7312 = !DILocation(line: 724, column: 9, scope: !7313)
!7313 = distinct !DILexicalBlock(scope: !7309, file: !238, line: 723, column: 20)
!7314 = !DILocation(line: 724, column: 15, scope: !7313)
!7315 = !DILocation(line: 725, column: 9, scope: !7313)
!7316 = !DILocation(line: 728, column: 12, scope: !7261)
!7317 = !DILocation(line: 728, column: 5, scope: !7261)
!7318 = !DILocation(line: 729, column: 1, scope: !7261)
!7319 = distinct !DISubprogram(name: "_modbus_tcp_free", scope: !238, file: !238, line: 731, type: !395, isLocal: true, isDefinition: true, scopeLine: 731, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7320 = !DILocalVariable(name: "ctx", arg: 1, scope: !7319, file: !238, line: 731, type: !323)
!7321 = !DILocation(line: 731, column: 40, scope: !7319)
!7322 = !DILocation(line: 732, column: 10, scope: !7319)
!7323 = !DILocation(line: 732, column: 15, scope: !7319)
!7324 = !DILocation(line: 732, column: 5, scope: !7319)
!7325 = !DILocation(line: 733, column: 10, scope: !7319)
!7326 = !DILocation(line: 733, column: 5, scope: !7319)
!7327 = !DILocation(line: 734, column: 1, scope: !7319)
!7328 = distinct !DISubprogram(name: "_modbus_tcp_set_ipv4_options", scope: !238, file: !238, line: 214, type: !7329, isLocal: true, isDefinition: true, scopeLine: 215, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7329 = !DISubroutineType(types: !7330)
!7330 = !{!44, !44}
!7331 = !DILocalVariable(name: "s", arg: 1, scope: !7328, file: !238, line: 214, type: !44)
!7332 = !DILocation(line: 214, column: 45, scope: !7328)
!7333 = !DILocalVariable(name: "rc", scope: !7328, file: !238, line: 216, type: !44)
!7334 = !DILocation(line: 216, column: 9, scope: !7328)
!7335 = !DILocalVariable(name: "option", scope: !7328, file: !238, line: 217, type: !44)
!7336 = !DILocation(line: 217, column: 9, scope: !7328)
!7337 = !DILocation(line: 221, column: 12, scope: !7328)
!7338 = !DILocation(line: 222, column: 21, scope: !7328)
!7339 = !DILocation(line: 223, column: 21, scope: !7328)
!7340 = !DILocation(line: 222, column: 10, scope: !7328)
!7341 = !DILocation(line: 222, column: 8, scope: !7328)
!7342 = !DILocation(line: 224, column: 9, scope: !7343)
!7343 = distinct !DILexicalBlock(scope: !7328, file: !238, line: 224, column: 9)
!7344 = !DILocation(line: 224, column: 12, scope: !7343)
!7345 = !DILocation(line: 224, column: 9, scope: !7328)
!7346 = !DILocation(line: 225, column: 9, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7343, file: !238, line: 224, column: 19)
!7348 = !DILocation(line: 250, column: 12, scope: !7328)
!7349 = !DILocation(line: 251, column: 21, scope: !7328)
!7350 = !DILocation(line: 252, column: 21, scope: !7328)
!7351 = !DILocation(line: 251, column: 10, scope: !7328)
!7352 = !DILocation(line: 251, column: 8, scope: !7328)
!7353 = !DILocation(line: 253, column: 9, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7328, file: !238, line: 253, column: 9)
!7355 = !DILocation(line: 253, column: 12, scope: !7354)
!7356 = !DILocation(line: 253, column: 9, scope: !7328)
!7357 = !DILocation(line: 254, column: 9, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7354, file: !238, line: 253, column: 19)
!7359 = !DILocation(line: 258, column: 5, scope: !7328)
!7360 = !DILocation(line: 259, column: 1, scope: !7328)
!7361 = distinct !DISubprogram(name: "_connect", scope: !238, file: !238, line: 261, type: !7362, isLocal: true, isDefinition: true, scopeLine: 263, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7362 = !DISubroutineType(types: !7363)
!7363 = !{!44, !44, !7364, !6449, !7366}
!7364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7365, size: 64)
!7365 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !314)
!7366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7367, size: 64)
!7367 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!7368 = !DILocalVariable(name: "sockfd", arg: 1, scope: !7361, file: !238, line: 261, type: !44)
!7369 = !DILocation(line: 261, column: 25, scope: !7361)
!7370 = !DILocalVariable(name: "addr", arg: 2, scope: !7361, file: !238, line: 261, type: !7364)
!7371 = !DILocation(line: 261, column: 56, scope: !7361)
!7372 = !DILocalVariable(name: "addrlen", arg: 3, scope: !7361, file: !238, line: 261, type: !6449)
!7373 = !DILocation(line: 261, column: 72, scope: !7361)
!7374 = !DILocalVariable(name: "ro_tv", arg: 4, scope: !7361, file: !238, line: 262, type: !7366)
!7375 = !DILocation(line: 262, column: 43, scope: !7361)
!7376 = !DILocalVariable(name: "rc", scope: !7361, file: !238, line: 264, type: !44)
!7377 = !DILocation(line: 264, column: 9, scope: !7361)
!7378 = !DILocation(line: 264, column: 22, scope: !7361)
!7379 = !DILocation(line: 264, column: 30, scope: !7361)
!7380 = !DILocation(line: 264, column: 36, scope: !7361)
!7381 = !DILocation(line: 264, column: 14, scope: !7361)
!7382 = !DILocation(line: 274, column: 9, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7361, file: !238, line: 274, column: 9)
!7384 = !DILocation(line: 274, column: 12, scope: !7383)
!7385 = !DILocation(line: 274, column: 18, scope: !7383)
!7386 = !DILocation(line: 274, column: 21, scope: !7383)
!7387 = !DILocation(line: 274, column: 27, scope: !7383)
!7388 = !DILocation(line: 274, column: 9, scope: !7361)
!7389 = !DILocalVariable(name: "wset", scope: !7390, file: !238, line: 276, type: !403)
!7390 = distinct !DILexicalBlock(scope: !7383, file: !238, line: 274, column: 43)
!7391 = !DILocation(line: 276, column: 16, scope: !7390)
!7392 = !DILocalVariable(name: "optval", scope: !7390, file: !238, line: 277, type: !44)
!7393 = !DILocation(line: 277, column: 13, scope: !7390)
!7394 = !DILocalVariable(name: "optlen", scope: !7390, file: !238, line: 278, type: !6449)
!7395 = !DILocation(line: 278, column: 19, scope: !7390)
!7396 = !DILocalVariable(name: "tv", scope: !7390, file: !238, line: 279, type: !332)
!7397 = !DILocation(line: 279, column: 24, scope: !7390)
!7398 = !DILocation(line: 279, column: 30, scope: !7390)
!7399 = !DILocation(line: 279, column: 29, scope: !7390)
!7400 = !DILocation(line: 282, column: 9, scope: !7390)
!7401 = distinct !{!7401, !7400, !7400}
!7402 = !DILocalVariable(name: "__d0", scope: !7403, file: !238, line: 282, type: !44)
!7403 = distinct !DILexicalBlock(scope: !7390, file: !238, line: 282, column: 9)
!7404 = !DILocation(line: 282, column: 9, scope: !7403)
!7405 = !DILocalVariable(name: "__d1", scope: !7403, file: !238, line: 282, type: !44)
!7406 = !{i32 -2146605160}
!7407 = !DILocation(line: 283, column: 9, scope: !7390)
!7408 = !DILocation(line: 284, column: 21, scope: !7390)
!7409 = !DILocation(line: 284, column: 28, scope: !7390)
!7410 = !DILocation(line: 284, column: 14, scope: !7390)
!7411 = !DILocation(line: 284, column: 12, scope: !7390)
!7412 = !DILocation(line: 285, column: 13, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7390, file: !238, line: 285, column: 13)
!7414 = !DILocation(line: 285, column: 16, scope: !7413)
!7415 = !DILocation(line: 285, column: 13, scope: !7390)
!7416 = !DILocation(line: 287, column: 13, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7413, file: !238, line: 285, column: 22)
!7418 = !DILocation(line: 291, column: 25, scope: !7390)
!7419 = !DILocation(line: 291, column: 55, scope: !7390)
!7420 = !DILocation(line: 291, column: 14, scope: !7390)
!7421 = !DILocation(line: 291, column: 12, scope: !7390)
!7422 = !DILocation(line: 292, column: 13, scope: !7423)
!7423 = distinct !DILexicalBlock(scope: !7390, file: !238, line: 292, column: 13)
!7424 = !DILocation(line: 292, column: 16, scope: !7423)
!7425 = !DILocation(line: 292, column: 21, scope: !7423)
!7426 = !DILocation(line: 292, column: 24, scope: !7423)
!7427 = !DILocation(line: 292, column: 31, scope: !7423)
!7428 = !DILocation(line: 292, column: 13, scope: !7390)
!7429 = !DILocation(line: 293, column: 13, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7423, file: !238, line: 292, column: 37)
!7431 = !DILocation(line: 295, column: 13, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !7423, file: !238, line: 294, column: 16)
!7433 = !DILocation(line: 295, column: 19, scope: !7432)
!7434 = !DILocation(line: 296, column: 13, scope: !7432)
!7435 = !DILocation(line: 299, column: 12, scope: !7361)
!7436 = !DILocation(line: 299, column: 5, scope: !7361)
!7437 = !DILocation(line: 300, column: 1, scope: !7361)
!7438 = distinct !DISubprogram(name: "modbus_new_tcp_pi", scope: !238, file: !238, line: 846, type: !7439, isLocal: false, isDefinition: true, scopeLine: 847, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7439 = !DISubroutineType(types: !7440)
!7440 = !{!323, !431, !431}
!7441 = !DILocalVariable(name: "node", arg: 1, scope: !7438, file: !238, line: 846, type: !431)
!7442 = !DILocation(line: 846, column: 41, scope: !7438)
!7443 = !DILocalVariable(name: "service", arg: 2, scope: !7438, file: !238, line: 846, type: !431)
!7444 = !DILocation(line: 846, column: 59, scope: !7438)
!7445 = !DILocalVariable(name: "ctx", scope: !7438, file: !238, line: 848, type: !323)
!7446 = !DILocation(line: 848, column: 15, scope: !7438)
!7447 = !DILocalVariable(name: "ctx_tcp_pi", scope: !7438, file: !238, line: 849, type: !419)
!7448 = !DILocation(line: 849, column: 22, scope: !7438)
!7449 = !DILocalVariable(name: "dest_size", scope: !7438, file: !238, line: 850, type: !4669)
!7450 = !DILocation(line: 850, column: 12, scope: !7438)
!7451 = !DILocalVariable(name: "ret_size", scope: !7438, file: !238, line: 851, type: !4669)
!7452 = !DILocation(line: 851, column: 12, scope: !7438)
!7453 = !DILocation(line: 853, column: 23, scope: !7438)
!7454 = !DILocation(line: 853, column: 11, scope: !7438)
!7455 = !DILocation(line: 853, column: 9, scope: !7438)
!7456 = !DILocation(line: 854, column: 9, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 854, column: 9)
!7458 = !DILocation(line: 854, column: 13, scope: !7457)
!7459 = !DILocation(line: 854, column: 9, scope: !7438)
!7460 = !DILocation(line: 855, column: 9, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7457, file: !238, line: 854, column: 22)
!7462 = !DILocation(line: 857, column: 25, scope: !7438)
!7463 = !DILocation(line: 857, column: 5, scope: !7438)
!7464 = !DILocation(line: 860, column: 5, scope: !7438)
!7465 = !DILocation(line: 860, column: 10, scope: !7438)
!7466 = !DILocation(line: 860, column: 16, scope: !7438)
!7467 = !DILocation(line: 862, column: 5, scope: !7438)
!7468 = !DILocation(line: 862, column: 10, scope: !7438)
!7469 = !DILocation(line: 862, column: 18, scope: !7438)
!7470 = !DILocation(line: 864, column: 44, scope: !7438)
!7471 = !DILocation(line: 864, column: 25, scope: !7438)
!7472 = !DILocation(line: 864, column: 5, scope: !7438)
!7473 = !DILocation(line: 864, column: 10, scope: !7438)
!7474 = !DILocation(line: 864, column: 23, scope: !7438)
!7475 = !DILocation(line: 865, column: 9, scope: !7476)
!7476 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 865, column: 9)
!7477 = !DILocation(line: 865, column: 14, scope: !7476)
!7478 = !DILocation(line: 865, column: 27, scope: !7476)
!7479 = !DILocation(line: 865, column: 9, scope: !7438)
!7480 = !DILocation(line: 866, column: 21, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7476, file: !238, line: 865, column: 36)
!7482 = !DILocation(line: 866, column: 9, scope: !7481)
!7483 = !DILocation(line: 867, column: 9, scope: !7481)
!7484 = !DILocation(line: 867, column: 15, scope: !7481)
!7485 = !DILocation(line: 868, column: 9, scope: !7481)
!7486 = !DILocation(line: 870, column: 37, scope: !7438)
!7487 = !DILocation(line: 870, column: 42, scope: !7438)
!7488 = !DILocation(line: 870, column: 18, scope: !7438)
!7489 = !DILocation(line: 870, column: 16, scope: !7438)
!7490 = !DILocation(line: 872, column: 9, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 872, column: 9)
!7492 = !DILocation(line: 872, column: 14, scope: !7491)
!7493 = !DILocation(line: 872, column: 9, scope: !7438)
!7494 = !DILocation(line: 874, column: 9, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7491, file: !238, line: 872, column: 23)
!7496 = !DILocation(line: 874, column: 21, scope: !7495)
!7497 = !DILocation(line: 874, column: 29, scope: !7495)
!7498 = !DILocation(line: 875, column: 5, scope: !7495)
!7499 = !DILocation(line: 876, column: 19, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7491, file: !238, line: 875, column: 12)
!7501 = !DILocation(line: 877, column: 28, scope: !7500)
!7502 = !DILocation(line: 877, column: 40, scope: !7500)
!7503 = !DILocation(line: 877, column: 46, scope: !7500)
!7504 = !DILocation(line: 877, column: 52, scope: !7500)
!7505 = !DILocation(line: 877, column: 20, scope: !7500)
!7506 = !DILocation(line: 877, column: 18, scope: !7500)
!7507 = !DILocation(line: 878, column: 13, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7500, file: !238, line: 878, column: 13)
!7509 = !DILocation(line: 878, column: 22, scope: !7508)
!7510 = !DILocation(line: 878, column: 13, scope: !7500)
!7511 = !DILocation(line: 879, column: 21, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7508, file: !238, line: 878, column: 28)
!7513 = !DILocation(line: 879, column: 13, scope: !7512)
!7514 = !DILocation(line: 880, column: 25, scope: !7512)
!7515 = !DILocation(line: 880, column: 13, scope: !7512)
!7516 = !DILocation(line: 881, column: 13, scope: !7512)
!7517 = !DILocation(line: 881, column: 19, scope: !7512)
!7518 = !DILocation(line: 882, column: 13, scope: !7512)
!7519 = !DILocation(line: 885, column: 13, scope: !7520)
!7520 = distinct !DILexicalBlock(scope: !7500, file: !238, line: 885, column: 13)
!7521 = !DILocation(line: 885, column: 25, scope: !7520)
!7522 = !DILocation(line: 885, column: 22, scope: !7520)
!7523 = !DILocation(line: 885, column: 13, scope: !7500)
!7524 = !DILocation(line: 886, column: 21, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7520, file: !238, line: 885, column: 36)
!7526 = !DILocation(line: 886, column: 13, scope: !7525)
!7527 = !DILocation(line: 887, column: 25, scope: !7525)
!7528 = !DILocation(line: 887, column: 13, scope: !7525)
!7529 = !DILocation(line: 888, column: 13, scope: !7525)
!7530 = !DILocation(line: 888, column: 19, scope: !7525)
!7531 = !DILocation(line: 889, column: 13, scope: !7525)
!7532 = !DILocation(line: 893, column: 9, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 893, column: 9)
!7534 = !DILocation(line: 893, column: 17, scope: !7533)
!7535 = !DILocation(line: 893, column: 9, scope: !7438)
!7536 = !DILocation(line: 894, column: 19, scope: !7537)
!7537 = distinct !DILexicalBlock(scope: !7533, file: !238, line: 893, column: 26)
!7538 = !DILocation(line: 895, column: 28, scope: !7537)
!7539 = !DILocation(line: 895, column: 40, scope: !7537)
!7540 = !DILocation(line: 895, column: 49, scope: !7537)
!7541 = !DILocation(line: 895, column: 58, scope: !7537)
!7542 = !DILocation(line: 895, column: 20, scope: !7537)
!7543 = !DILocation(line: 895, column: 18, scope: !7537)
!7544 = !DILocation(line: 896, column: 5, scope: !7537)
!7545 = !DILocation(line: 898, column: 18, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7533, file: !238, line: 896, column: 12)
!7547 = !DILocation(line: 901, column: 9, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 901, column: 9)
!7549 = !DILocation(line: 901, column: 18, scope: !7548)
!7550 = !DILocation(line: 901, column: 9, scope: !7438)
!7551 = !DILocation(line: 902, column: 17, scope: !7552)
!7552 = distinct !DILexicalBlock(scope: !7548, file: !238, line: 901, column: 24)
!7553 = !DILocation(line: 902, column: 9, scope: !7552)
!7554 = !DILocation(line: 903, column: 21, scope: !7552)
!7555 = !DILocation(line: 903, column: 9, scope: !7552)
!7556 = !DILocation(line: 904, column: 9, scope: !7552)
!7557 = !DILocation(line: 904, column: 15, scope: !7552)
!7558 = !DILocation(line: 905, column: 9, scope: !7552)
!7559 = !DILocation(line: 908, column: 9, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7438, file: !238, line: 908, column: 9)
!7561 = !DILocation(line: 908, column: 21, scope: !7560)
!7562 = !DILocation(line: 908, column: 18, scope: !7560)
!7563 = !DILocation(line: 908, column: 9, scope: !7438)
!7564 = !DILocation(line: 909, column: 17, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7560, file: !238, line: 908, column: 32)
!7566 = !DILocation(line: 909, column: 9, scope: !7565)
!7567 = !DILocation(line: 910, column: 21, scope: !7565)
!7568 = !DILocation(line: 910, column: 9, scope: !7565)
!7569 = !DILocation(line: 911, column: 9, scope: !7565)
!7570 = !DILocation(line: 911, column: 15, scope: !7565)
!7571 = !DILocation(line: 912, column: 9, scope: !7565)
!7572 = !DILocation(line: 915, column: 5, scope: !7438)
!7573 = !DILocation(line: 915, column: 17, scope: !7438)
!7574 = !DILocation(line: 915, column: 22, scope: !7438)
!7575 = !DILocation(line: 917, column: 12, scope: !7438)
!7576 = !DILocation(line: 917, column: 5, scope: !7438)
!7577 = !DILocation(line: 918, column: 1, scope: !7438)
!7578 = distinct !DISubprogram(name: "_modbus_tcp_pi_connect", scope: !238, file: !238, line: 355, type: !391, isLocal: true, isDefinition: true, scopeLine: 356, flags: DIFlagPrototyped, isOptimized: false, unit: !237, variables: !440)
!7579 = !DILocalVariable(name: "ctx", arg: 1, scope: !7578, file: !238, line: 355, type: !323)
!7580 = !DILocation(line: 355, column: 45, scope: !7578)
!7581 = !DILocalVariable(name: "rc", scope: !7578, file: !238, line: 357, type: !44)
!7582 = !DILocation(line: 357, column: 9, scope: !7578)
!7583 = !DILocalVariable(name: "ai_list", scope: !7578, file: !238, line: 358, type: !6440)
!7584 = !DILocation(line: 358, column: 22, scope: !7578)
!7585 = !DILocalVariable(name: "ai_ptr", scope: !7578, file: !238, line: 359, type: !6440)
!7586 = !DILocation(line: 359, column: 22, scope: !7578)
!7587 = !DILocalVariable(name: "ai_hints", scope: !7578, file: !238, line: 360, type: !6441)
!7588 = !DILocation(line: 360, column: 21, scope: !7578)
!7589 = !DILocalVariable(name: "ctx_tcp_pi", scope: !7578, file: !238, line: 361, type: !419)
!7590 = !DILocation(line: 361, column: 22, scope: !7578)
!7591 = !DILocation(line: 361, column: 35, scope: !7578)
!7592 = !DILocation(line: 361, column: 40, scope: !7578)
!7593 = !DILocation(line: 369, column: 5, scope: !7578)
!7594 = !DILocation(line: 371, column: 14, scope: !7578)
!7595 = !DILocation(line: 371, column: 23, scope: !7578)
!7596 = !DILocation(line: 373, column: 14, scope: !7578)
!7597 = !DILocation(line: 373, column: 24, scope: !7578)
!7598 = !DILocation(line: 374, column: 14, scope: !7578)
!7599 = !DILocation(line: 374, column: 26, scope: !7578)
!7600 = !DILocation(line: 375, column: 14, scope: !7578)
!7601 = !DILocation(line: 375, column: 22, scope: !7578)
!7602 = !DILocation(line: 376, column: 14, scope: !7578)
!7603 = !DILocation(line: 376, column: 27, scope: !7578)
!7604 = !DILocation(line: 377, column: 14, scope: !7578)
!7605 = !DILocation(line: 377, column: 22, scope: !7578)
!7606 = !DILocation(line: 379, column: 13, scope: !7578)
!7607 = !DILocation(line: 380, column: 22, scope: !7578)
!7608 = !DILocation(line: 380, column: 34, scope: !7578)
!7609 = !DILocation(line: 380, column: 40, scope: !7578)
!7610 = !DILocation(line: 380, column: 52, scope: !7578)
!7611 = !DILocation(line: 380, column: 10, scope: !7578)
!7612 = !DILocation(line: 380, column: 8, scope: !7578)
!7613 = !DILocation(line: 382, column: 9, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7578, file: !238, line: 382, column: 9)
!7615 = !DILocation(line: 382, column: 12, scope: !7614)
!7616 = !DILocation(line: 382, column: 9, scope: !7578)
!7617 = !DILocation(line: 383, column: 13, scope: !7618)
!7618 = distinct !DILexicalBlock(scope: !7619, file: !238, line: 383, column: 13)
!7619 = distinct !DILexicalBlock(scope: !7614, file: !238, line: 382, column: 18)
!7620 = !DILocation(line: 383, column: 18, scope: !7618)
!7621 = !DILocation(line: 383, column: 13, scope: !7619)
!7622 = !DILocation(line: 384, column: 21, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7618, file: !238, line: 383, column: 25)
!7624 = !DILocation(line: 384, column: 81, scope: !7623)
!7625 = !DILocation(line: 384, column: 68, scope: !7623)
!7626 = !DILocation(line: 384, column: 13, scope: !7623)
!7627 = !DILocation(line: 385, column: 9, scope: !7623)
!7628 = !DILocation(line: 386, column: 9, scope: !7619)
!7629 = !DILocation(line: 386, column: 15, scope: !7619)
!7630 = !DILocation(line: 387, column: 9, scope: !7619)
!7631 = !DILocation(line: 390, column: 19, scope: !7632)
!7632 = distinct !DILexicalBlock(scope: !7578, file: !238, line: 390, column: 5)
!7633 = !DILocation(line: 390, column: 17, scope: !7632)
!7634 = !DILocation(line: 390, column: 10, scope: !7632)
!7635 = !DILocation(line: 390, column: 28, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7632, file: !238, line: 390, column: 5)
!7637 = !DILocation(line: 390, column: 35, scope: !7636)
!7638 = !DILocation(line: 390, column: 5, scope: !7632)
!7639 = !DILocalVariable(name: "flags", scope: !7640, file: !238, line: 391, type: !44)
!7640 = distinct !DILexicalBlock(scope: !7636, file: !238, line: 390, column: 70)
!7641 = !DILocation(line: 391, column: 13, scope: !7640)
!7642 = !DILocation(line: 391, column: 21, scope: !7640)
!7643 = !DILocation(line: 391, column: 29, scope: !7640)
!7644 = !DILocalVariable(name: "s", scope: !7640, file: !238, line: 392, type: !44)
!7645 = !DILocation(line: 392, column: 13, scope: !7640)
!7646 = !DILocation(line: 395, column: 15, scope: !7640)
!7647 = !DILocation(line: 399, column: 15, scope: !7640)
!7648 = !DILocation(line: 402, column: 20, scope: !7640)
!7649 = !DILocation(line: 402, column: 28, scope: !7640)
!7650 = !DILocation(line: 402, column: 39, scope: !7640)
!7651 = !DILocation(line: 402, column: 46, scope: !7640)
!7652 = !DILocation(line: 402, column: 54, scope: !7640)
!7653 = !DILocation(line: 402, column: 13, scope: !7640)
!7654 = !DILocation(line: 402, column: 11, scope: !7640)
!7655 = !DILocation(line: 403, column: 13, scope: !7656)
!7656 = distinct !DILexicalBlock(scope: !7640, file: !238, line: 403, column: 13)
!7657 = !DILocation(line: 403, column: 15, scope: !7656)
!7658 = !DILocation(line: 403, column: 13, scope: !7640)
!7659 = !DILocation(line: 404, column: 13, scope: !7656)
!7660 = !DILocation(line: 406, column: 13, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7640, file: !238, line: 406, column: 13)
!7662 = !DILocation(line: 406, column: 21, scope: !7661)
!7663 = !DILocation(line: 406, column: 31, scope: !7661)
!7664 = !DILocation(line: 406, column: 13, scope: !7640)
!7665 = !DILocation(line: 407, column: 42, scope: !7661)
!7666 = !DILocation(line: 407, column: 13, scope: !7661)
!7667 = !DILocation(line: 409, column: 13, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7640, file: !238, line: 409, column: 13)
!7669 = !DILocation(line: 409, column: 18, scope: !7668)
!7670 = !DILocation(line: 409, column: 13, scope: !7640)
!7671 = !DILocation(line: 410, column: 47, scope: !7672)
!7672 = distinct !DILexicalBlock(scope: !7668, file: !238, line: 409, column: 25)
!7673 = !DILocation(line: 410, column: 59, scope: !7672)
!7674 = !DILocation(line: 410, column: 65, scope: !7672)
!7675 = !DILocation(line: 410, column: 77, scope: !7672)
!7676 = !DILocation(line: 410, column: 13, scope: !7672)
!7677 = !DILocation(line: 411, column: 9, scope: !7672)
!7678 = !DILocation(line: 413, column: 23, scope: !7640)
!7679 = !DILocation(line: 413, column: 26, scope: !7640)
!7680 = !DILocation(line: 413, column: 34, scope: !7640)
!7681 = !DILocation(line: 413, column: 43, scope: !7640)
!7682 = !DILocation(line: 413, column: 51, scope: !7640)
!7683 = !DILocation(line: 413, column: 64, scope: !7640)
!7684 = !DILocation(line: 413, column: 69, scope: !7640)
!7685 = !DILocation(line: 413, column: 14, scope: !7640)
!7686 = !DILocation(line: 413, column: 12, scope: !7640)
!7687 = !DILocation(line: 414, column: 13, scope: !7688)
!7688 = distinct !DILexicalBlock(scope: !7640, file: !238, line: 414, column: 13)
!7689 = !DILocation(line: 414, column: 16, scope: !7688)
!7690 = !DILocation(line: 414, column: 13, scope: !7640)
!7691 = !DILocation(line: 415, column: 19, scope: !7692)
!7692 = distinct !DILexicalBlock(scope: !7688, file: !238, line: 414, column: 23)
!7693 = !DILocation(line: 415, column: 13, scope: !7692)
!7694 = !DILocation(line: 416, column: 13, scope: !7692)
!7695 = !DILocation(line: 419, column: 18, scope: !7640)
!7696 = !DILocation(line: 419, column: 9, scope: !7640)
!7697 = !DILocation(line: 419, column: 14, scope: !7640)
!7698 = !DILocation(line: 419, column: 16, scope: !7640)
!7699 = !DILocation(line: 420, column: 9, scope: !7640)
!7700 = !DILocation(line: 390, column: 53, scope: !7636)
!7701 = !DILocation(line: 390, column: 61, scope: !7636)
!7702 = !DILocation(line: 390, column: 51, scope: !7636)
!7703 = !DILocation(line: 390, column: 5, scope: !7636)
!7704 = distinct !{!7704, !7638, !7705}
!7705 = !DILocation(line: 421, column: 5, scope: !7632)
!7706 = !DILocation(line: 423, column: 18, scope: !7578)
!7707 = !DILocation(line: 423, column: 5, scope: !7578)
!7708 = !DILocation(line: 425, column: 9, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7578, file: !238, line: 425, column: 9)
!7710 = !DILocation(line: 425, column: 14, scope: !7709)
!7711 = !DILocation(line: 425, column: 16, scope: !7709)
!7712 = !DILocation(line: 425, column: 9, scope: !7578)
!7713 = !DILocation(line: 426, column: 9, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7709, file: !238, line: 425, column: 21)
!7715 = !DILocation(line: 429, column: 5, scope: !7578)
!7716 = !DILocation(line: 430, column: 1, scope: !7578)
